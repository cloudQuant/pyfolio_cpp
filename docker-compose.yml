# PyFolio C++ Production Docker Compose Configuration
# Multi-service setup with Redis, PostgreSQL, and monitoring

version: '3.8'

services:
  # Main PyFolio C++ Application
  pyfolio-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: pyfolio-app
    restart: unless-stopped
    ports:
      - "8000:8000"  # API port
      - "8080:8080"  # Web UI port
      - "9090:9090"  # Metrics port
    environment:
      - PYFOLIO_MODE=production
      - PYFOLIO_SERVICE=api
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_WORKERS=4
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=pyfolio
      - POSTGRES_USER=pyfolio
      - POSTGRES_PASSWORD=pyfolio_secure_password
    volumes:
      - pyfolio-data:/app/data
      - pyfolio-logs:/app/logs
      - pyfolio-config:/app/config
      - ./data:/app/data/external:ro  # External data mount
    depends_on:
      - redis
      - postgres
    networks:
      - pyfolio-network
    healthcheck:
      test: ["/app/bin/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: pyfolio-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis_secure_password
    volumes:
      - redis-data:/data
    networks:
      - pyfolio-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pyfolio-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=pyfolio
      - POSTGRES_USER=pyfolio
      - POSTGRES_PASSWORD=pyfolio_secure_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - pyfolio-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pyfolio -d pyfolio"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: pyfolio-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - pyfolio-logs:/var/log/nginx
    depends_on:
      - pyfolio-app
    networks:
      - pyfolio-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: pyfolio-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - pyfolio-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: pyfolio-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_secure_password
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana-datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - pyfolio-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Development Environment (optional)
  pyfolio-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: pyfolio-dev
    restart: "no"
    ports:
      - "8001:8000"
      - "8888:8888"  # Jupyter
    environment:
      - PYFOLIO_MODE=development
      - PYFOLIO_DEBUG=1
    volumes:
      - .:/app/source
      - pyfolio-dev-data:/app/data
      - pyfolio-dev-logs:/app/logs
    networks:
      - pyfolio-network
    profiles:
      - development
    command: ["/bin/bash"]
    tty: true
    stdin_open: true

# Named Volumes
volumes:
  pyfolio-data:
    driver: local
  pyfolio-logs:
    driver: local
  pyfolio-config:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  pyfolio-dev-data:
    driver: local
  pyfolio-dev-logs:
    driver: local

# Networks
networks:
  pyfolio-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16