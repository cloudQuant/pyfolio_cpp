<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer" kind="class" language="C++" prot="public">
    <compoundname>pyfolio::intraday::IntradayAnalyzer</compoundname>
    <includes refid="d2/d59/intraday_8h" local="no">intraday.h</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1a55e4461ef8ea907d50c4a3e83bee9872" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d4/db5/structpyfolio_1_1intraday_1_1IntradayDetectionResult" kindref="compound">IntradayDetectionResult</ref> &gt;</type>
        <definition>Result&lt; IntradayDetectionResult &gt; pyfolio::intraday::IntradayAnalyzer::detect_intraday</definition>
        <argsstring>(const PositionSeries &amp;positions, const TransactionSeries &amp;transactions, double threshold=0.25)</argsstring>
        <name>detect_intraday</name>
        <qualifiedname>pyfolio::intraday::IntradayAnalyzer::detect_intraday</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a8b225a867ab95979be89a7d9e8519eb1" kindref="member">PositionSeries</ref> &amp;</type>
          <declname>positions</declname>
        </param>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a4b722d754217aac2549ef3ef5fa23fff" kindref="member">TransactionSeries</ref> &amp;</type>
          <declname>transactions</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
          <defval>0.25</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Detects if a strategy is intraday by analyzing the ratio of positions to transactions Equivalent to Python pyfolio.utils.detect_intraday()</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>positions</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d3/d21/conceptpyfolio_1_1Portfolio" kindref="compound">Portfolio</ref> positions over time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transactions</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d5/d11/structpyfolio_1_1Transaction" kindref="compound">Transaction</ref> history </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Detection threshold (default 0.25 from Python) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Detection result with intraday classification </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/utils/intraday.h" line="45" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/utils/intraday.cpp" bodystart="10" bodyend="55"/>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9aacbb30bd92a04a43bc1ea560dac5c241" compoundref="d3/d11/error__handling_8h" startline="26">pyfolio::CalculationError</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="d6/d4f/classpyfolio_1_1DateTime_1adfc972d8ea84c03f9a6d9eb9e661b6cd" compoundref="de/d1b/datetime_8h" startline="150" endline="173">pyfolio::DateTime::parse</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
      </memberdef>
      <memberdef kind="function" id="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1ad5f70c82e839ca853a0ab7132e4c7259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1a8b225a867ab95979be89a7d9e8519eb1" kindref="member">PositionSeries</ref> &gt;</type>
        <definition>Result&lt; PositionSeries &gt; pyfolio::intraday::IntradayAnalyzer::estimate_intraday_positions</definition>
        <argsstring>(const TimeSeries&lt; Return &gt; &amp;returns, const PositionSeries &amp;positions, const TransactionSeries &amp;transactions, const IntradayEstimationConfig &amp;config={})</argsstring>
        <name>estimate_intraday_positions</name>
        <qualifiedname>pyfolio::intraday::IntradayAnalyzer::estimate_intraday_positions</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a8b225a867ab95979be89a7d9e8519eb1" kindref="member">PositionSeries</ref> &amp;</type>
          <declname>positions</declname>
        </param>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a4b722d754217aac2549ef3ef5fa23fff" kindref="member">TransactionSeries</ref> &amp;</type>
          <declname>transactions</declname>
        </param>
        <param>
          <type>const <ref refid="d1/d68/structpyfolio_1_1intraday_1_1IntradayEstimationConfig" kindref="compound">IntradayEstimationConfig</ref> &amp;</type>
          <declname>config</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Estimates intraday positions by finding optimal sampling times Equivalent to Python pyfolio.utils.estimate_intraday()</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>returns</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> series </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>positions</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d6/df6/structpyfolio_1_1Position" kindref="compound">Position</ref> series </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transactions</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d5/d11/structpyfolio_1_1Transaction" kindref="compound">Transaction</ref> series </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration for estimation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Estimated intraday positions </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/utils/intraday.h" line="58" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/utils/intraday.cpp" bodystart="57" bodyend="99"/>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <referencedby refid="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1acadbdac004b215eef082e50ea5341667" compoundref="dc/d51/intraday_8cpp" startline="101" endline="120">check_and_process_intraday</referencedby>
      </memberdef>
      <memberdef kind="function" id="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1acadbdac004b215eef082e50ea5341667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1a8b225a867ab95979be89a7d9e8519eb1" kindref="member">PositionSeries</ref> &gt;</type>
        <definition>Result&lt; PositionSeries &gt; pyfolio::intraday::IntradayAnalyzer::check_and_process_intraday</definition>
        <argsstring>(const IntradayDetectionResult &amp;detection, const TimeSeries&lt; Return &gt; &amp;returns, const PositionSeries &amp;positions, const TransactionSeries &amp;transactions)</argsstring>
        <name>check_and_process_intraday</name>
        <qualifiedname>pyfolio::intraday::IntradayAnalyzer::check_and_process_intraday</qualifiedname>
        <param>
          <type>const <ref refid="d4/db5/structpyfolio_1_1intraday_1_1IntradayDetectionResult" kindref="compound">IntradayDetectionResult</ref> &amp;</type>
          <declname>detection</declname>
        </param>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a8b225a867ab95979be89a7d9e8519eb1" kindref="member">PositionSeries</ref> &amp;</type>
          <declname>positions</declname>
        </param>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a4b722d754217aac2549ef3ef5fa23fff" kindref="member">TransactionSeries</ref> &amp;</type>
          <declname>transactions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Comprehensive intraday check and processing logic Equivalent to Python pyfolio.utils.check_intraday()</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>estimate</parametername>
</parameternamelist>
<parameterdescription>
<para>Estimation result from detection </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>returns</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> series </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>positions</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d6/df6/structpyfolio_1_1Position" kindref="compound">Position</ref> series </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transactions</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d5/d11/structpyfolio_1_1Transaction" kindref="compound">Transaction</ref> series </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Processed position series appropriate for strategy type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/utils/intraday.h" line="73" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/utils/intraday.cpp" bodystart="101" bodyend="120"/>
        <references refid="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1ad5f70c82e839ca853a0ab7132e4c7259" compoundref="dc/d51/intraday_8cpp" startline="57" endline="99">estimate_intraday_positions</references>
        <references refid="d4/db5/structpyfolio_1_1intraday_1_1IntradayDetectionResult_1aae5c2c6dacab4652fcc2b8330899aae7" compoundref="d2/d59/intraday_8h" startline="18">pyfolio::intraday::IntradayDetectionResult::is_intraday</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1a2319d52bbe889caa4d9a0f962cc428e6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref></type>
        <definition>DateTime pyfolio::intraday::IntradayAnalyzer::find_peak_exposure_time</definition>
        <argsstring>(const std::vector&lt; transactions::TransactionRecord &gt; &amp;daily_transactions)</argsstring>
        <name>find_peak_exposure_time</name>
        <qualifiedname>pyfolio::intraday::IntradayAnalyzer::find_peak_exposure_time</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="de/d25/classpyfolio_1_1transactions_1_1TransactionRecord" kindref="compound">transactions::TransactionRecord</ref> &gt; &amp;</type>
          <declname>daily_transactions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds the time of peak exposure based on transaction volume Used to determine optimal sampling time for intraday strategies </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/utils/intraday.h" line="83" column="14" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/utils/intraday.cpp" bodystart="122" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1acf89e86481a317130a204a6fb61b2aa3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pyfolio::intraday::IntradayAnalyzer::calculate_position_transaction_ratio</definition>
        <argsstring>(const PositionSeries &amp;positions, const TransactionSeries &amp;transactions)</argsstring>
        <name>calculate_position_transaction_ratio</name>
        <qualifiedname>pyfolio::intraday::IntradayAnalyzer::calculate_position_transaction_ratio</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a8b225a867ab95979be89a7d9e8519eb1" kindref="member">PositionSeries</ref> &amp;</type>
          <declname>positions</declname>
        </param>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a4b722d754217aac2549ef3ef5fa23fff" kindref="member">TransactionSeries</ref> &amp;</type>
          <declname>transactions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the ratio of position values to transaction volumes Core logic for intraday detection </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/utils/intraday.h" line="89" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/utils/intraday.cpp" bodystart="146" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1aed7f181bdd5f8b05cdcad5939959b78d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pyfolio::intraday::IntradayAnalyzer::calculate_symbol_ratio</definition>
        <argsstring>(const PositionSeries &amp;positions, const TransactionSeries &amp;transactions, const std::string &amp;symbol)</argsstring>
        <name>calculate_symbol_ratio</name>
        <qualifiedname>pyfolio::intraday::IntradayAnalyzer::calculate_symbol_ratio</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a8b225a867ab95979be89a7d9e8519eb1" kindref="member">PositionSeries</ref> &amp;</type>
          <declname>positions</declname>
        </param>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a4b722d754217aac2549ef3ef5fa23fff" kindref="member">TransactionSeries</ref> &amp;</type>
          <declname>transactions</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates position-to-transaction ratio for a specific symbol </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/utils/intraday.h" line="94" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/utils/intraday.cpp" bodystart="184" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1aced604eff0abe9ec402678efa745b7e2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="de/d25/classpyfolio_1_1transactions_1_1TransactionRecord" kindref="compound">transactions::TransactionRecord</ref> &gt;</type>
        <definition>std::vector&lt; TransactionRecord &gt; pyfolio::intraday::IntradayAnalyzer::get_transactions_for_date</definition>
        <argsstring>(const TransactionSeries &amp;transactions, const DateTime &amp;date)</argsstring>
        <name>get_transactions_for_date</name>
        <qualifiedname>pyfolio::intraday::IntradayAnalyzer::get_transactions_for_date</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a4b722d754217aac2549ef3ef5fa23fff" kindref="member">TransactionSeries</ref> &amp;</type>
          <declname>transactions</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extracts transactions for a specific date </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/utils/intraday.h" line="100" column="17" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/utils/intraday.cpp" bodystart="226" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1af79bdf1922a99676226b0cf62edcfb15" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; pyfolio::intraday::IntradayAnalyzer::calculate_rolling_max_exposure</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;exposures, int window)</argsstring>
        <name>calculate_rolling_max_exposure</name>
        <qualifiedname>pyfolio::intraday::IntradayAnalyzer::calculate_rolling_max_exposure</qualifiedname>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>exposures</declname>
        </param>
        <param>
          <type>int</type>
          <declname>window</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates rolling maximum exposure for better intraday estimation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/utils/intraday.h" line="106" column="17"/>
      </memberdef>
      <memberdef kind="function" id="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1a2fd03b3c01b2517bb7f580ab2a9e47eb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; int, double &gt;</type>
        <definition>std::map&lt; int, double &gt; pyfolio::intraday::IntradayAnalyzer::group_transactions_by_hour</definition>
        <argsstring>(const std::vector&lt; transactions::TransactionRecord &gt; &amp;transactions)</argsstring>
        <name>group_transactions_by_hour</name>
        <qualifiedname>pyfolio::intraday::IntradayAnalyzer::group_transactions_by_hour</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="de/d25/classpyfolio_1_1transactions_1_1TransactionRecord" kindref="compound">transactions::TransactionRecord</ref> &gt; &amp;</type>
          <declname>transactions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Groups transactions by time of day to find peak trading times </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/utils/intraday.h" line="111" column="14" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/utils/intraday.cpp" bodystart="240" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1a80f9b887d47cb8c57e1b2d2c15da13a3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d6/df6/structpyfolio_1_1Position" kindref="compound">Position</ref> &gt;</type>
        <definition>Result&lt; PositionSnapshot &gt; pyfolio::intraday::IntradayAnalyzer::estimate_eod_positions</definition>
        <argsstring>(const DateTime &amp;date, const std::vector&lt; transactions::TransactionRecord &gt; &amp;daily_transactions, const Position &amp;previous_positions)</argsstring>
        <name>estimate_eod_positions</name>
        <qualifiedname>pyfolio::intraday::IntradayAnalyzer::estimate_eod_positions</qualifiedname>
        <param>
          <type>const <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> &amp;</type>
          <declname>date</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="de/d25/classpyfolio_1_1transactions_1_1TransactionRecord" kindref="compound">transactions::TransactionRecord</ref> &gt; &amp;</type>
          <declname>daily_transactions</declname>
        </param>
        <param>
          <type>const <ref refid="d6/df6/structpyfolio_1_1Position" kindref="compound">Position</ref> &amp;</type>
          <declname>previous_positions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Estimates end-of-day positions based on transaction flow </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/utils/intraday.h" line="116" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/utils/intraday.cpp" bodystart="252" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1afb34b07468e4584e16b7ef10c69a9bcb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pyfolio::intraday::IntradayAnalyzer::validate_detection_results</definition>
        <argsstring>(const IntradayDetectionResult &amp;result, const PositionSeries &amp;positions, const TransactionSeries &amp;transactions)</argsstring>
        <name>validate_detection_results</name>
        <qualifiedname>pyfolio::intraday::IntradayAnalyzer::validate_detection_results</qualifiedname>
        <param>
          <type>const <ref refid="d4/db5/structpyfolio_1_1intraday_1_1IntradayDetectionResult" kindref="compound">IntradayDetectionResult</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a8b225a867ab95979be89a7d9e8519eb1" kindref="member">PositionSeries</ref> &amp;</type>
          <declname>positions</declname>
        </param>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a4b722d754217aac2549ef3ef5fa23fff" kindref="member">TransactionSeries</ref> &amp;</type>
          <declname>transactions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Validates intraday detection results for consistency </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/utils/intraday.h" line="123" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/utils/intraday.cpp" bodystart="267" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1a3ffd3b3b0fbbeffc108c2a010dfa7937" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pyfolio::intraday::IntradayAnalyzer::calculate_confidence_score</definition>
        <argsstring>(const std::map&lt; std::string, double &gt; &amp;symbol_ratios, double overall_ratio, double threshold)</argsstring>
        <name>calculate_confidence_score</name>
        <qualifiedname>pyfolio::intraday::IntradayAnalyzer::calculate_confidence_score</qualifiedname>
        <param>
          <type>const std::map&lt; std::string, double &gt; &amp;</type>
          <declname>symbol_ratios</declname>
        </param>
        <param>
          <type>double</type>
          <declname>overall_ratio</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates confidence score for intraday detection Based on consistency across multiple symbols and dates </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/utils/intraday.h" line="130" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/utils/intraday.cpp" bodystart="289" bodyend="319"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/utils/intraday.h" line="34" column="1" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/utils/intraday.h" bodystart="34" bodyend="132"/>
    <listofallmembers>
      <member refid="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1a3ffd3b3b0fbbeffc108c2a010dfa7937" prot="private" virt="non-virtual"><scope>pyfolio::intraday::IntradayAnalyzer</scope><name>calculate_confidence_score</name></member>
      <member refid="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1acf89e86481a317130a204a6fb61b2aa3" prot="private" virt="non-virtual"><scope>pyfolio::intraday::IntradayAnalyzer</scope><name>calculate_position_transaction_ratio</name></member>
      <member refid="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1af79bdf1922a99676226b0cf62edcfb15" prot="private" virt="non-virtual"><scope>pyfolio::intraday::IntradayAnalyzer</scope><name>calculate_rolling_max_exposure</name></member>
      <member refid="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1aed7f181bdd5f8b05cdcad5939959b78d" prot="private" virt="non-virtual"><scope>pyfolio::intraday::IntradayAnalyzer</scope><name>calculate_symbol_ratio</name></member>
      <member refid="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1acadbdac004b215eef082e50ea5341667" prot="public" virt="non-virtual"><scope>pyfolio::intraday::IntradayAnalyzer</scope><name>check_and_process_intraday</name></member>
      <member refid="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1a55e4461ef8ea907d50c4a3e83bee9872" prot="public" virt="non-virtual"><scope>pyfolio::intraday::IntradayAnalyzer</scope><name>detect_intraday</name></member>
      <member refid="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1a80f9b887d47cb8c57e1b2d2c15da13a3" prot="private" virt="non-virtual"><scope>pyfolio::intraday::IntradayAnalyzer</scope><name>estimate_eod_positions</name></member>
      <member refid="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1ad5f70c82e839ca853a0ab7132e4c7259" prot="public" virt="non-virtual"><scope>pyfolio::intraday::IntradayAnalyzer</scope><name>estimate_intraday_positions</name></member>
      <member refid="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1a2319d52bbe889caa4d9a0f962cc428e6" prot="private" virt="non-virtual"><scope>pyfolio::intraday::IntradayAnalyzer</scope><name>find_peak_exposure_time</name></member>
      <member refid="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1aced604eff0abe9ec402678efa745b7e2" prot="private" virt="non-virtual"><scope>pyfolio::intraday::IntradayAnalyzer</scope><name>get_transactions_for_date</name></member>
      <member refid="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1a2fd03b3c01b2517bb7f580ab2a9e47eb" prot="private" virt="non-virtual"><scope>pyfolio::intraday::IntradayAnalyzer</scope><name>group_transactions_by_hour</name></member>
      <member refid="da/d6e/classpyfolio_1_1intraday_1_1IntradayAnalyzer_1afb34b07468e4584e16b7ef10c69a9bcb" prot="private" virt="non-virtual"><scope>pyfolio::intraday::IntradayAnalyzer</scope><name>validate_detection_results</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
