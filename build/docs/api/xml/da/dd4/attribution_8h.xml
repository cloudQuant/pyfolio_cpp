<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="da/dd4/attribution_8h" kind="file" language="C++">
    <compoundname>attribution.h</compoundname>
    <includes refid="d2/d99/dataframe_8h" local="yes">../core/dataframe.h</includes>
    <includes refid="de/d1b/datetime_8h" local="yes">../core/datetime.h</includes>
    <includes refid="d3/d11/error__handling_8h" local="yes">../core/error_handling.h</includes>
    <includes refid="d9/d49/types_8h" local="yes">../core/types.h</includes>
    <includes refid="d3/dbe/math_2statistics_8h" local="yes">../math/statistics.h</includes>
    <includes refid="d4/d73/returns_8h" local="yes">../performance/returns.h</includes>
    <includes refid="d7/d0c/holdings_8h" local="yes">../positions/holdings.h</includes>
    <includes local="no">map</includes>
    <includes local="no">vector</includes>
    <includedby refid="d8/d00/attribution__example_8cpp" local="no">/Users/yunjinqi/Documents/source_code/pyfolio_cpp/examples/attribution_example.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/attribution/attribution.h</label>
        <link refid="da/dd4/attribution_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>../core/dataframe.h</label>
        <link refid="d2/d99/dataframe_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>datetime.h</label>
        <link refid="de/d1b/datetime_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>error_handling.h</label>
        <link refid="d3/d11/error__handling_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>time_series.h</label>
        <link refid="d8/d51/time__series_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>types.h</label>
        <link refid="d9/d49/types_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>../math/simd_math.h</label>
        <link refid="d6/d99/simd__math_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>../math/statistics.h</label>
        <link refid="d3/dbe/math_2statistics_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>../performance/returns.h</label>
        <link refid="d4/d73/returns_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>../positions/holdings.h</label>
        <link refid="d7/d0c/holdings_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>../transactions/transaction.h</label>
        <link refid="d0/db6/transaction_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>algorithm</label>
      </node>
      <node id="27">
        <label>any</label>
      </node>
      <node id="12">
        <label>chrono</label>
      </node>
      <node id="22">
        <label>cmath</label>
      </node>
      <node id="13">
        <label>concepts</label>
      </node>
      <node id="14">
        <label>cstddef</label>
      </node>
      <node id="15">
        <label>cstdint</label>
      </node>
      <node id="23">
        <label>deque</label>
      </node>
      <node id="5">
        <label>exception</label>
      </node>
      <node id="6">
        <label>functional</label>
      </node>
      <node id="24">
        <label>limits</label>
      </node>
      <node id="25">
        <label>map</label>
      </node>
      <node id="26">
        <label>numeric</label>
      </node>
      <node id="7">
        <label>optional</label>
      </node>
      <node id="18">
        <label>set</label>
      </node>
      <node id="8">
        <label>source_location</label>
      </node>
      <node id="21">
        <label>span</label>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="28">
        <label>typeindex</label>
      </node>
      <node id="10">
        <label>variant</label>
      </node>
      <node id="16">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/examples/attribution_example.cpp</label>
        <link refid="d8/d00/attribution__example_8cpp"/>
      </node>
      <node id="1">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/attribution/attribution.h</label>
        <link refid="da/dd4/attribution_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult" prot="public">pyfolio::attribution::AttributionResult</innerclass>
    <innerclass refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution" prot="public">pyfolio::attribution::SectorAttribution</innerclass>
    <innerclass refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures" prot="public">pyfolio::attribution::FactorExposures</innerclass>
    <innerclass refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns" prot="public">pyfolio::attribution::FactorReturns</innerclass>
    <innerclass refid="d3/dce/classpyfolio_1_1attribution_1_1BrinsonAttribution" prot="public">pyfolio::attribution::BrinsonAttribution</innerclass>
    <innerclass refid="d0/dda/structpyfolio_1_1attribution_1_1BrinsonAttribution_1_1AttributionEffects" prot="private">pyfolio::attribution::BrinsonAttribution::AttributionEffects</innerclass>
    <innerclass refid="d9/dc2/classpyfolio_1_1attribution_1_1AlphaBetaAnalysis" prot="public">pyfolio::attribution::AlphaBetaAnalysis</innerclass>
    <innerclass refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult" prot="public">pyfolio::attribution::AlphaBetaAnalysis::AlphaBetaResult</innerclass>
    <innerclass refid="d7/d21/classpyfolio_1_1attribution_1_1AttributionAnalyzer" prot="public">pyfolio::attribution::AttributionAnalyzer</innerclass>
    <innernamespace refid="d7/df8/namespacepyfolio">pyfolio</innernamespace>
    <innernamespace refid="dc/dc6/namespacepyfolio_1_1attribution">pyfolio::attribution</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d2/d99/dataframe_8h" kindref="compound">../core/dataframe.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="de/d1b/datetime_8h" kindref="compound">../core/datetime.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/d11/error__handling_8h" kindref="compound">../core/error_handling.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d9/d49/types_8h" kindref="compound">../core/types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/dbe/math_2statistics_8h" kindref="compound">../math/statistics.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d4/d73/returns_8h" kindref="compound">../performance/returns.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d7/d0c/holdings_8h" kindref="compound">../positions/holdings.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="dc/dc6/namespacepyfolio_1_1attribution" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="dc/dc6/namespacepyfolio_1_1attribution" kindref="compound">pyfolio::attribution</ref><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult" kindref="compound">AttributionResult</ref><sp/>{</highlight></codeline>
<codeline lineno="19" refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult_1aab5fd5c0736d928da99190164819ab0c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult_1aab5fd5c0736d928da99190164819ab0c" kindref="member">portfolio_return</ref>;</highlight></codeline>
<codeline lineno="20" refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult_1a1ae7255be75ff89603de22b45d62d728" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult_1a1ae7255be75ff89603de22b45d62d728" kindref="member">benchmark_return</ref>;</highlight></codeline>
<codeline lineno="21" refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult_1a8a876336ad33b20d561049f0d75c1798" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult_1a8a876336ad33b20d561049f0d75c1798" kindref="member">active_return</ref>;</highlight></codeline>
<codeline lineno="22" refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult_1aede4fa31c8104b810a8efd48d75b1331" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult_1aede4fa31c8104b810a8efd48d75b1331" kindref="member">allocation_effect</ref>;</highlight></codeline>
<codeline lineno="23" refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult_1ab4d8a1362c2d2c45f010030060acaf5e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult_1ab4d8a1362c2d2c45f010030060acaf5e" kindref="member">selection_effect</ref>;</highlight></codeline>
<codeline lineno="24" refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult_1ae646f8eb8d781fddde17809609002db9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult_1ae646f8eb8d781fddde17809609002db9" kindref="member">interaction_effect</ref>;</highlight></codeline>
<codeline lineno="25" refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult_1a95b4e89ead28c7e2c9e95280aa57bc6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult_1a95b4e89ead28c7e2c9e95280aa57bc6c" kindref="member">total_effect</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult_1a74891c5d878ec0c20c2852c95d5f2463" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult_1a74891c5d878ec0c20c2852c95d5f2463" kindref="member">is_consistent</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tolerance<sp/>=<sp/>1e-6)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>calculated_total<sp/>=<sp/><ref refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult_1aede4fa31c8104b810a8efd48d75b1331" kindref="member">allocation_effect</ref><sp/>+<sp/><ref refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult_1ab4d8a1362c2d2c45f010030060acaf5e" kindref="member">selection_effect</ref><sp/>+<sp/><ref refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult_1ae646f8eb8d781fddde17809609002db9" kindref="member">interaction_effect</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::abs(calculated_total<sp/>-<sp/><ref refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult_1a95b4e89ead28c7e2c9e95280aa57bc6c" kindref="member">total_effect</ref>)<sp/>&lt;<sp/>tolerance<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::abs(<ref refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult_1a8a876336ad33b20d561049f0d75c1798" kindref="member">active_return</ref><sp/>-<sp/><ref refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult_1a95b4e89ead28c7e2c9e95280aa57bc6c" kindref="member">total_effect</ref>)<sp/>&lt;<sp/>tolerance;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal">};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution" kindref="compound">SectorAttribution</ref><sp/>{</highlight></codeline>
<codeline lineno="41" refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a43b34f11cd5e42310368439b82b7cbec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a43b34f11cd5e42310368439b82b7cbec" kindref="member">sector</ref>;</highlight></codeline>
<codeline lineno="42" refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a606a6cedb46d043b756ca9597559c4b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a606a6cedb46d043b756ca9597559c4b4" kindref="member">portfolio_weight</ref>;</highlight></codeline>
<codeline lineno="43" refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a3ff23f7ec30f31ce9d1800097993cc65" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a3ff23f7ec30f31ce9d1800097993cc65" kindref="member">benchmark_weight</ref>;</highlight></codeline>
<codeline lineno="44" refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a34b70828f7c81195b8cbe94cfbfb3896" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a34b70828f7c81195b8cbe94cfbfb3896" kindref="member">portfolio_return</ref>;</highlight></codeline>
<codeline lineno="45" refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a3e3a02ca2f856f3286bcaf9b8cb2650e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a3e3a02ca2f856f3286bcaf9b8cb2650e" kindref="member">benchmark_return</ref>;</highlight></codeline>
<codeline lineno="46" refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a0ce78d884eca80e9bf40fb0b407494de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a0ce78d884eca80e9bf40fb0b407494de" kindref="member">allocation_effect</ref>;</highlight></codeline>
<codeline lineno="47" refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1ac434f3b0290e09dccec73f1af6ba0431" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1ac434f3b0290e09dccec73f1af6ba0431" kindref="member">selection_effect</ref>;</highlight></codeline>
<codeline lineno="48" refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1ac50e54bafe801c481c2601c856238872" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1ac50e54bafe801c481c2601c856238872" kindref="member">interaction_effect</ref>;</highlight></codeline>
<codeline lineno="49" refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1ad5d7458f9910c785d6cd1df8425d492e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1ad5d7458f9910c785d6cd1df8425d492e" kindref="member">total_contribution</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal">};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1aac5cca4b037ee818911fbd64ec8f02ac" kindref="member">FactorExposures</ref><sp/>{</highlight></codeline>
<codeline lineno="56" refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1aca7d631b073b924d7f89efd6d4b9668f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1aca7d631b073b924d7f89efd6d4b9668f" kindref="member">market_beta</ref>;</highlight></codeline>
<codeline lineno="57" refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1a1eca32accfb23f23f3c8cf188d60f5ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1a1eca32accfb23f23f3c8cf188d60f5ad" kindref="member">size_factor</ref>;</highlight></codeline>
<codeline lineno="58" refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1abf25d702c370cb2b14834d493d88bdd3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1abf25d702c370cb2b14834d493d88bdd3" kindref="member">value_factor</ref>;</highlight></codeline>
<codeline lineno="59" refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1a141f158c067e9bfbe3e7fa4edb77423e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1a141f158c067e9bfbe3e7fa4edb77423e" kindref="member">momentum_factor</ref>;</highlight></codeline>
<codeline lineno="60" refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1a8315ff133f67f56909bcca3f0cea639b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1a8315ff133f67f56909bcca3f0cea639b" kindref="member">quality_factor</ref>;</highlight></codeline>
<codeline lineno="61" refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1ade09d65d7207dcd41d6abafebfdb580b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1ade09d65d7207dcd41d6abafebfdb580b" kindref="member">low_volatility_factor</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1aac5cca4b037ee818911fbd64ec8f02ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1aac5cca4b037ee818911fbd64ec8f02ac" kindref="member">FactorExposures</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64" refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1ab909e4fe32a300b587bbd8862507ba31" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1ab909e4fe32a300b587bbd8862507ba31" kindref="member">FactorExposures</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mb,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sf,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vf,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mf,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>qf,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lvf)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1aca7d631b073b924d7f89efd6d4b9668f" kindref="member">market_beta</ref>(mb),<sp/><ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1a1eca32accfb23f23f3c8cf188d60f5ad" kindref="member">size_factor</ref>(sf),<sp/><ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1abf25d702c370cb2b14834d493d88bdd3" kindref="member">value_factor</ref>(vf),<sp/><ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1a141f158c067e9bfbe3e7fa4edb77423e" kindref="member">momentum_factor</ref>(mf),<sp/><ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1a8315ff133f67f56909bcca3f0cea639b" kindref="member">quality_factor</ref>(qf),</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1ade09d65d7207dcd41d6abafebfdb580b" kindref="member">low_volatility_factor</ref>(lvf)<sp/>{}</highlight></codeline>
<codeline lineno="67"><highlight class="normal">};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1ab24bf57f17c74ddb93fe0465c74551d7" kindref="member">FactorReturns</ref><sp/>{</highlight></codeline>
<codeline lineno="73" refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1a954b8d6f9127b22378224c3913000ffc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1a954b8d6f9127b22378224c3913000ffc" kindref="member">market_return</ref>;</highlight></codeline>
<codeline lineno="74" refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1a8d871460c8fa735b641fb273061e5a89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1a8d871460c8fa735b641fb273061e5a89" kindref="member">size_return</ref>;</highlight></codeline>
<codeline lineno="75" refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1af01832d5d63e7186c7155ed7b18620f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1af01832d5d63e7186c7155ed7b18620f2" kindref="member">value_return</ref>;</highlight></codeline>
<codeline lineno="76" refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1a2e0ef896d33b4c75f7788a29993d195d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1a2e0ef896d33b4c75f7788a29993d195d" kindref="member">momentum_return</ref>;</highlight></codeline>
<codeline lineno="77" refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1ae47ee072b4df916d484e83b929130a37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1ae47ee072b4df916d484e83b929130a37" kindref="member">quality_return</ref>;</highlight></codeline>
<codeline lineno="78" refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1a36a07b2b8c415b9d556611cbbb87dc63" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1a36a07b2b8c415b9d556611cbbb87dc63" kindref="member">low_volatility_return</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1ab24bf57f17c74ddb93fe0465c74551d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1ab24bf57f17c74ddb93fe0465c74551d7" kindref="member">FactorReturns</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81" refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1a1b5599c865c9fce71fe63e5a782dd758" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1a1b5599c865c9fce71fe63e5a782dd758" kindref="member">FactorReturns</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mor,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>qr,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lvr)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1a954b8d6f9127b22378224c3913000ffc" kindref="member">market_return</ref>(mr),<sp/><ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1a8d871460c8fa735b641fb273061e5a89" kindref="member">size_return</ref>(sr),<sp/><ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1af01832d5d63e7186c7155ed7b18620f2" kindref="member">value_return</ref>(vr),<sp/><ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1a2e0ef896d33b4c75f7788a29993d195d" kindref="member">momentum_return</ref>(mor),<sp/><ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1ae47ee072b4df916d484e83b929130a37" kindref="member">quality_return</ref>(qr),</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1a36a07b2b8c415b9d556611cbbb87dc63" kindref="member">low_volatility_return</ref>(lvr)<sp/>{}</highlight></codeline>
<codeline lineno="84"><highlight class="normal">};</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="d3/dce/classpyfolio_1_1attribution_1_1BrinsonAttribution" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d3/dce/classpyfolio_1_1attribution_1_1BrinsonAttribution" kindref="compound">BrinsonAttribution</ref><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;Symbol,<sp/>std::string&gt;<sp/>symbol_to_sector_;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="97" refid="d3/dce/classpyfolio_1_1attribution_1_1BrinsonAttribution_1aa75ec97408cf2164bde3fdbb846d7f1f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d3/dce/classpyfolio_1_1attribution_1_1BrinsonAttribution_1aa75ec97408cf2164bde3fdbb846d7f1f" kindref="member">set_sector_mapping</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Symbol,<sp/>std::string&gt;&amp;<sp/>mapping)<sp/>{<sp/>symbol_to_sector_<sp/>=<sp/>mapping;<sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="d3/dce/classpyfolio_1_1attribution_1_1BrinsonAttribution_1ae8d771d6eab90379e4b81fb06e30eab7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;AttributionResult&gt;</ref><sp/><ref refid="d3/dce/classpyfolio_1_1attribution_1_1BrinsonAttribution_1ae8d771d6eab90379e4b81fb06e30eab7" kindref="member">calculate_period_attribution</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings" kindref="compound">positions::PortfolioHoldings</ref>&amp;<sp/>portfolio_start,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings" kindref="compound">positions::PortfolioHoldings</ref>&amp;<sp/>portfolio_end,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Symbol,<sp/>double&gt;&amp;<sp/>benchmark_weights,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Symbol,<sp/>double&gt;&amp;<sp/>security_returns)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(portfolio_start.<ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings_1a315a3a6f55a4101a289ab1bf2003762a" kindref="member">holdings</ref>().empty()<sp/>||<sp/>portfolio_end.<ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings_1a315a3a6f55a4101a289ab1bf2003762a" kindref="member">holdings</ref>().empty())<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" kindref="member">Result&lt;AttributionResult&gt;::error</ref>(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" kindref="member">ErrorCode::InsufficientData</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Portfolio<sp/>holdings<sp/>cannot<sp/>be<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/df5/structpyfolio_1_1attribution_1_1AttributionResult" kindref="compound">AttributionResult</ref><sp/>result{};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>portfolio<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>portfolio_start_value<sp/>=<sp/>portfolio_start.<ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings_1a024425899ff9486a38f8a209c4369924" kindref="member">total_value</ref>();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>portfolio_end_value<sp/><sp/><sp/>=<sp/>portfolio_end.<ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings_1a024425899ff9486a38f8a209c4369924" kindref="member">total_value</ref>();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(portfolio_start_value<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" kindref="member">Result&lt;AttributionResult&gt;::error</ref>(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" kindref="member">ErrorCode::InvalidInput</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Portfolio<sp/>start<sp/>value<sp/>must<sp/>be<sp/>positive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.portfolio_return<sp/>=<sp/>(portfolio_end_value<sp/>-<sp/>portfolio_start_value)<sp/>/<sp/>portfolio_start_value;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>benchmark<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.benchmark_return<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_benchmark_weight<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[symbol,<sp/>weight]<sp/>:<sp/>benchmark_weights)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>return_it<sp/>=<sp/>security_returns.find(symbol);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(return_it<sp/>!=<sp/>security_returns.end())<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.benchmark_return<sp/>+=<sp/>weight<sp/>*<sp/>return_it-&gt;second;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_benchmark_weight<sp/>+=<sp/>weight;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(total_benchmark_weight<sp/>==<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" kindref="member">Result&lt;AttributionResult&gt;::error</ref>(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" kindref="member">ErrorCode::InvalidInput</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Benchmark<sp/>weights<sp/>sum<sp/>to<sp/>zero&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.benchmark_return<sp/>/=<sp/>total_benchmark_weight;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.active_return<sp/>=<sp/>result.portfolio_return<sp/>-<sp/>result.benchmark_return;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>attribution<sp/>effects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>attribution_effects<sp/>=<sp/>calculate_attribution_effects(portfolio_start,<sp/>benchmark_weights,<sp/>security_returns);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attribution_effects.is_error())<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" kindref="member">Result&lt;AttributionResult&gt;::error</ref>(attribution_effects.error().code,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attribution_effects.error().message);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>effects<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>attribution_effects.value();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.allocation_effect<sp/><sp/>=<sp/>effects.allocation_effect;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.selection_effect<sp/><sp/><sp/>=<sp/>effects.selection_effect;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.interaction_effect<sp/>=<sp/>effects.interaction_effect;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.total_effect<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>result.allocation_effect<sp/>+<sp/>result.selection_effect<sp/>+<sp/>result.interaction_effect;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" kindref="member">Result&lt;AttributionResult&gt;::success</ref>(result);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="d3/dce/classpyfolio_1_1attribution_1_1BrinsonAttribution_1abe02229d1775f669153e6a1ab1d5f86b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;std::vector&lt;SectorAttribution&gt;</ref>&gt;<sp/><ref refid="d3/dce/classpyfolio_1_1attribution_1_1BrinsonAttribution_1abe02229d1775f669153e6a1ab1d5f86b" kindref="member">calculate_sector_attribution</ref>(</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings" kindref="compound">positions::PortfolioHoldings</ref>&amp;<sp/>portfolio,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Symbol,<sp/>double&gt;&amp;<sp/>benchmark_weights,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Symbol,<sp/>double&gt;&amp;<sp/>security_returns)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Aggregate<sp/>portfolio<sp/>and<sp/>benchmark<sp/>by<sp/>sector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>double&gt;<sp/>portfolio_sector_weights;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>double&gt;<sp/>benchmark_sector_weights;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>double&gt;<sp/>sector_returns;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>std::vector&lt;Symbol&gt;&gt;<sp/>sector_symbols;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Portfolio<sp/>sector<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[symbol,<sp/>holding]<sp/>:<sp/>portfolio.<ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings_1a315a3a6f55a4101a289ab1bf2003762a" kindref="member">holdings</ref>())<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>sector<sp/>=<sp/>get_symbol_sector(symbol);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portfolio_sector_weights[sector]<sp/>+=<sp/>holding.weight;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sector_symbols[sector].push_back(symbol);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Benchmark<sp/>sector<sp/>weights<sp/>and<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[symbol,<sp/>weight]<sp/>:<sp/>benchmark_weights)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>sector<sp/>=<sp/>get_symbol_sector(symbol);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>benchmark_sector_weights[sector]<sp/>+=<sp/>weight;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>return_it<sp/>=<sp/>security_returns.find(symbol);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(return_it<sp/>!=<sp/>security_returns.end())<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Weight<sp/>by<sp/>benchmark<sp/>weight<sp/>within<sp/>sector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sector_returns[sector]<sp/>+=<sp/>weight<sp/>*<sp/>return_it-&gt;second;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normalize<sp/>sector<sp/>returns<sp/>by<sp/>sector<sp/>benchmark<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[sector,<sp/>ret]<sp/>:<sp/>sector_returns)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(benchmark_sector_weights[sector]<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>/=<sp/>benchmark_sector_weights[sector];</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>portfolio<sp/>sector<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>double&gt;<sp/>portfolio_sector_returns;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[sector,<sp/>symbols]<sp/>:<sp/>sector_symbols)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sector_return<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sector_weight<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>symbol<sp/>:<sp/>symbols)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>holding_result<sp/>=<sp/>portfolio.<ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings_1a0d055a35906794c27b9136229a063a65" kindref="member">get_holding</ref>(symbol);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>return_it<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>security_returns.find(symbol);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(holding_result.is_ok()<sp/>&amp;&amp;<sp/>return_it<sp/>!=<sp/>security_returns.end())<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weight<sp/>=<sp/>holding_result.value().weight;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sector_return<sp/>+=<sp/>weight<sp/>*<sp/>return_it-&gt;second;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sector_weight<sp/>+=<sp/>weight;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sector_weight<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portfolio_sector_returns[sector]<sp/>=<sp/>sector_return<sp/>/<sp/>sector_weight;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>attribution<sp/>for<sp/>each<sp/>sector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SectorAttribution&gt;<sp/>results;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>all_sectors;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[sector,<sp/>weight]<sp/>:<sp/>portfolio_sector_weights)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_sectors.insert(sector);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[sector,<sp/>weight]<sp/>:<sp/>benchmark_sector_weights)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_sectors.insert(sector);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>sector<sp/>:<sp/>all_sectors)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution" kindref="compound">SectorAttribution</ref><sp/>attr;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a43b34f11cd5e42310368439b82b7cbec" kindref="member">sector</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>sector;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a606a6cedb46d043b756ca9597559c4b4" kindref="member">portfolio_weight</ref><sp/>=<sp/>portfolio_sector_weights[sector];</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a3ff23f7ec30f31ce9d1800097993cc65" kindref="member">benchmark_weight</ref><sp/>=<sp/>benchmark_sector_weights[sector];</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a34b70828f7c81195b8cbe94cfbfb3896" kindref="member">portfolio_return</ref><sp/>=<sp/>portfolio_sector_returns[sector];</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a3e3a02ca2f856f3286bcaf9b8cb2650e" kindref="member">benchmark_return</ref><sp/>=<sp/>sector_returns[sector];</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Brinson<sp/>attribution<sp/>formulas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weight_diff<sp/>=<sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a606a6cedb46d043b756ca9597559c4b4" kindref="member">portfolio_weight</ref><sp/>-<sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a3ff23f7ec30f31ce9d1800097993cc65" kindref="member">benchmark_weight</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>return_diff<sp/>=<sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a34b70828f7c81195b8cbe94cfbfb3896" kindref="member">portfolio_return</ref><sp/>-<sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a3e3a02ca2f856f3286bcaf9b8cb2650e" kindref="member">benchmark_return</ref>;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a0ce78d884eca80e9bf40fb0b407494de" kindref="member">allocation_effect</ref><sp/><sp/>=<sp/>weight_diff<sp/>*<sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a3e3a02ca2f856f3286bcaf9b8cb2650e" kindref="member">benchmark_return</ref>;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1ac434f3b0290e09dccec73f1af6ba0431" kindref="member">selection_effect</ref><sp/><sp/><sp/>=<sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a3ff23f7ec30f31ce9d1800097993cc65" kindref="member">benchmark_weight</ref><sp/>*<sp/>return_diff;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1ac50e54bafe801c481c2601c856238872" kindref="member">interaction_effect</ref><sp/>=<sp/>weight_diff<sp/>*<sp/>return_diff;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1ad5d7458f9910c785d6cd1df8425d492e" kindref="member">total_contribution</ref><sp/>=<sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a0ce78d884eca80e9bf40fb0b407494de" kindref="member">allocation_effect</ref><sp/>+<sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1ac434f3b0290e09dccec73f1af6ba0431" kindref="member">selection_effect</ref><sp/>+<sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1ac50e54bafe801c481c2601c856238872" kindref="member">interaction_effect</ref>;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results.push_back(attr);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>by<sp/>absolute<sp/>total<sp/>contribution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(results.begin(),<sp/>results.end(),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution" kindref="compound">SectorAttribution</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution" kindref="compound">SectorAttribution</ref>&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::abs(a.total_contribution)<sp/>&gt;<sp/>std::abs(b.total_contribution);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;std::vector&lt;SectorAttribution&gt;</ref>&gt;::success(std::move(results));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="d3/dce/classpyfolio_1_1attribution_1_1BrinsonAttribution_1a26103570130f728535e2998cbc546928" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;DataFrame&gt;</ref><sp/><ref refid="d3/dce/classpyfolio_1_1attribution_1_1BrinsonAttribution_1a26103570130f728535e2998cbc546928" kindref="member">calculate_multi_period_attribution</ref>(</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d02/classpyfolio_1_1positions_1_1HoldingsSeries" kindref="compound">positions::HoldingsSeries</ref>&amp;<sp/>holdings_series,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;<ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref>,<sp/>std::map&lt;Symbol,<sp/>double&gt;&gt;&amp;<sp/>benchmark_weights_series,</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;<ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref>,<sp/><ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries&lt;double&gt;</ref>&gt;&amp;<sp/>return_series)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(holdings_series.<ref refid="d0/d02/classpyfolio_1_1positions_1_1HoldingsSeries_1aa339b863f39735db8959a933074a432e" kindref="member">size</ref>()<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" kindref="member">Result&lt;DataFrame&gt;::error</ref>(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" kindref="member">ErrorCode::InsufficientData</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Need<sp/>at<sp/>least<sp/>2<sp/>holdings<sp/>snapshots&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;DateTime&gt;<sp/>dates;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>portfolio_returns;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>benchmark_returns;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>active_returns;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>allocation_effects;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>selection_effects;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>interaction_effects;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>holdings_series.<ref refid="d0/d02/classpyfolio_1_1positions_1_1HoldingsSeries_1aa339b863f39735db8959a933074a432e" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>start_holdings<sp/>=<sp/>holdings_series[i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>end_holdings<sp/><sp/><sp/>=<sp/>holdings_series[i];</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref><sp/>period_end<sp/>=<sp/>end_holdings.timestamp();</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dates.push_back(period_end);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>benchmark<sp/>weights<sp/>for<sp/>this<sp/>period</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bench_it<sp/>=<sp/>benchmark_weights_series.find(period_end);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bench_it<sp/>==<sp/>benchmark_weights_series.end())<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>period<sp/>if<sp/>no<sp/>benchmark<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>security<sp/>returns<sp/>for<sp/>this<sp/>period</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;Symbol,<sp/>double&gt;<sp/>period_returns;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref><sp/>period_start<sp/>=<sp/>start_holdings.timestamp();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[symbol,<sp/>ts]<sp/>:<sp/>return_series)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start_result<sp/>=<sp/>ts.at_time(period_start);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end_result<sp/><sp/><sp/>=<sp/>ts.at_time(period_end);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_result.is_ok()<sp/>&amp;&amp;<sp/>end_result.is_ok())<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>start_price<sp/>=<sp/>start_result.value();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>end_price<sp/><sp/><sp/>=<sp/>end_result.value();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_price<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>period_returns[symbol]<sp/>=<sp/>(end_price<sp/>-<sp/>start_price)<sp/>/<sp/>start_price;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>attribution<sp/>for<sp/>this<sp/>period</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>attribution_result<sp/>=</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d3/dce/classpyfolio_1_1attribution_1_1BrinsonAttribution_1ae8d771d6eab90379e4b81fb06e30eab7" kindref="member">calculate_period_attribution</ref>(start_holdings,<sp/>end_holdings,<sp/>bench_it-&gt;second,<sp/>period_returns);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(attribution_result.is_ok())<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>attr<sp/>=<sp/>attribution_result.value();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portfolio_returns.push_back(attr.portfolio_return);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>benchmark_returns.push_back(attr.benchmark_return);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>active_returns.push_back(attr.active_return);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocation_effects.push_back(attr.allocation_effect);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selection_effects.push_back(attr.selection_effect);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interaction_effects.push_back(attr.interaction_effect);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>with<sp/>zeros<sp/>if<sp/>calculation<sp/>fails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portfolio_returns.push_back(0.0);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>benchmark_returns.push_back(0.0);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>active_returns.push_back(0.0);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocation_effects.push_back(0.0);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selection_effects.push_back(0.0);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interaction_effects.push_back(0.0);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/deb/classpyfolio_1_1DataFrame" kindref="compound">DataFrame</ref><sp/>df{dates};</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df.<ref refid="da/deb/classpyfolio_1_1DataFrame_1ae16ceddcf917845c49128783794c109e" kindref="member">add_column</ref>(</highlight><highlight class="stringliteral">&quot;portfolio_return&quot;</highlight><highlight class="normal">,<sp/>portfolio_returns);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df.add_column(</highlight><highlight class="stringliteral">&quot;benchmark_return&quot;</highlight><highlight class="normal">,<sp/>benchmark_returns);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df.add_column(</highlight><highlight class="stringliteral">&quot;active_return&quot;</highlight><highlight class="normal">,<sp/>active_returns);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df.add_column(</highlight><highlight class="stringliteral">&quot;allocation_effect&quot;</highlight><highlight class="normal">,<sp/>allocation_effects);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df.add_column(</highlight><highlight class="stringliteral">&quot;selection_effect&quot;</highlight><highlight class="normal">,<sp/>selection_effects);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df.add_column(</highlight><highlight class="stringliteral">&quot;interaction_effect&quot;</highlight><highlight class="normal">,<sp/>interaction_effects);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" kindref="member">Result&lt;DataFrame&gt;::success</ref>(std::move(df));</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>get_symbol_sector(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref>&amp;<sp/>symbol)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>symbol_to_sector_.find(symbol);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>symbol_to_sector_.end())<sp/>?<sp/>it-&gt;second<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Unknown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AttributionEffects<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>allocation_effect;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>selection_effect;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>interaction_effect;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>Result&lt;AttributionEffects&gt;<sp/>calculate_attribution_effects(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>positions::PortfolioHoldings&amp;<sp/>portfolio,</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Symbol,<sp/>double&gt;&amp;<sp/>benchmark_weights,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Symbol,<sp/>double&gt;&amp;<sp/>security_returns)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AttributionEffects<sp/>effects{0.0,<sp/>0.0,<sp/>0.0};</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;Symbol&gt;<sp/>all_symbols;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[symbol,<sp/>holding]<sp/>:<sp/>portfolio.holdings())<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_symbols.insert(symbol);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[symbol,<sp/>weight]<sp/>:<sp/>benchmark_weights)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_symbols.insert(symbol);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref>&amp;<sp/>symbol<sp/>:<sp/>all_symbols)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>portfolio_weight<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>holding_result<sp/><sp/><sp/><sp/><sp/>=<sp/>portfolio.get_holding(symbol);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(holding_result.is_ok())<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portfolio_weight<sp/>=<sp/>holding_result.value().weight;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>benchmark_weight<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bench_it<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>benchmark_weights.find(symbol);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bench_it<sp/>!=<sp/>benchmark_weights.end())<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>benchmark_weight<sp/>=<sp/>bench_it-&gt;second;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>security_return<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>return_it<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>security_returns.find(symbol);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(return_it<sp/>!=<sp/>security_returns.end())<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>security_return<sp/>=<sp/>return_it-&gt;second;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Brinson<sp/>attribution<sp/>formulas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weight_diff<sp/>=<sp/>portfolio_weight<sp/>-<sp/>benchmark_weight;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effects.allocation_effect<sp/>+=<sp/>weight_diff<sp/>*<sp/>security_return;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effects.selection_effect<sp/>+=</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>benchmark_weight<sp/>*<sp/>security_return<sp/>*<sp/>(portfolio_weight<sp/>&gt;<sp/>0<sp/>?<sp/>1.0<sp/>:<sp/>0.0);<sp/><sp/></highlight><highlight class="comment">//<sp/>Simplified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>effects.interaction_effect<sp/>+=</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weight_diff<sp/>*<sp/>security_return<sp/>*<sp/>(portfolio_weight<sp/>&gt;<sp/>0<sp/>?<sp/>1.0<sp/>:<sp/>0.0);<sp/><sp/></highlight><highlight class="comment">//<sp/>Simplified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" kindref="member">Result&lt;AttributionEffects&gt;::success</ref>(effects);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal">};</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="401" refid="d9/dc2/classpyfolio_1_1attribution_1_1AlphaBetaAnalysis" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d9/dc2/classpyfolio_1_1attribution_1_1AlphaBetaAnalysis" kindref="compound">AlphaBetaAnalysis</ref><sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="403" refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult" kindref="compound">AlphaBetaResult</ref><sp/>{</highlight></codeline>
<codeline lineno="404" refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1a5a9d35e58d436aedbadd418650cd1444" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1a5a9d35e58d436aedbadd418650cd1444" kindref="member">alpha</ref>;</highlight></codeline>
<codeline lineno="405" refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1a8ac9e2b0cb92b5b59f234c4f4271ae1a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1a8ac9e2b0cb92b5b59f234c4f4271ae1a" kindref="member">beta</ref>;</highlight></codeline>
<codeline lineno="406" refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1a31c462a120c3bdc2e43751b28226d800" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1a31c462a120c3bdc2e43751b28226d800" kindref="member">r_squared</ref>;</highlight></codeline>
<codeline lineno="407" refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1abdc71904641a095d8c7acbfcd8060c5a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1abdc71904641a095d8c7acbfcd8060c5a" kindref="member">tracking_error</ref>;</highlight></codeline>
<codeline lineno="408" refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1af4dd7d95f36605e3733e29fed79d657f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1af4dd7d95f36605e3733e29fed79d657f" kindref="member">information_ratio</ref>;</highlight></codeline>
<codeline lineno="409" refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1ad37262010c03f54c2a8fb0444de158a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1ad37262010c03f54c2a8fb0444de158a1" kindref="member">active_return</ref>;</highlight></codeline>
<codeline lineno="410" refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1a68f6ed1ac77d0c54b824d89c6d598d52" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1a68f6ed1ac77d0c54b824d89c6d598d52" kindref="member">systematic_risk</ref>;</highlight></codeline>
<codeline lineno="411" refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1a2cf02a111b19b5e14f172656a2f89fda" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1a2cf02a111b19b5e14f172656a2f89fda" kindref="member">specific_risk</ref>;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="d9/dc2/classpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1aa1a010f21d746f4b5ca020320a4ad529" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;AlphaBetaResult&gt;</ref><sp/><ref refid="d9/dc2/classpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1aa1a010f21d746f4b5ca020320a4ad529" kindref="member">calculate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref>&amp;<sp/>portfolio_returns,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref>&amp;<sp/>benchmark_returns,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>risk_free_rate<sp/>=<sp/><ref refid="db/d9c/namespacepyfolio_1_1constants_1a6b629b058e12e9c8e6b1c39036389ddf" kindref="member">constants::DEFAULT_RISK_FREE_RATE</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(portfolio_returns.<ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" kindref="member">size</ref>()<sp/>!=<sp/>benchmark_returns.<ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" kindref="member">size</ref>())<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" kindref="member">Result&lt;AlphaBetaResult&gt;::error</ref>(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" kindref="member">ErrorCode::InvalidInput</ref>,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Portfolio<sp/>and<sp/>benchmark<sp/>returns<sp/>must<sp/>have<sp/>same<sp/>length&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(portfolio_returns.<ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" kindref="member">size</ref>()<sp/>&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" kindref="member">Result&lt;AlphaBetaResult&gt;::error</ref>(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" kindref="member">ErrorCode::InsufficientData</ref>,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Need<sp/>at<sp/>least<sp/>3<sp/>observations<sp/>for<sp/>regression&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>to<sp/>excess<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>portfolio_excess_result<sp/>=</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/dd9/namespacepyfolio_1_1performance_1a0b36bd99af8d88af1dc5578ef684c6e8" kindref="member">pyfolio::performance::calculate_excess_returns</ref>(portfolio_returns,<sp/>risk_free_rate);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>benchmark_excess_result<sp/>=</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d8/dd9/namespacepyfolio_1_1performance_1a0b36bd99af8d88af1dc5578ef684c6e8" kindref="member">pyfolio::performance::calculate_excess_returns</ref>(benchmark_returns,<sp/>risk_free_rate);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(portfolio_excess_result.is_error()<sp/>||<sp/>benchmark_excess_result.is_error())<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" kindref="member">Result&lt;AlphaBetaResult&gt;::error</ref>(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9aacbb30bd92a04a43bc1ea560dac5c241" kindref="member">ErrorCode::CalculationError</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>calculate<sp/>excess<sp/>returns&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>port_excess<sp/><sp/>=<sp/>portfolio_excess_result.value();</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>bench_excess<sp/>=<sp/>benchmark_excess_result.value();</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Linear<sp/>regression:<sp/>portfolio_excess<sp/>=<sp/>alpha<sp/>+<sp/>beta<sp/>*<sp/>benchmark_excess</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>regression_result<sp/>=<sp/>linear_regression(bench_excess.values(),<sp/>port_excess.values());</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regression_result.is_error())<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>regression_result;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult" kindref="compound">AlphaBetaResult</ref><sp/>result<sp/>=<sp/>regression_result.value();</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>additional<sp/>metrics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>active_returns;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>portfolio_returns.<ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>active_returns.push_back(portfolio_returns[i]<sp/>-<sp/>benchmark_returns[i]);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mean_active_result<sp/>=<sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats_1a0ded7b265023215831bffb8b799ba59a" kindref="member">pyfolio::stats::mean</ref>(std::span&lt;const<sp/>double&gt;{active_returns});</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>std_active_result<sp/><sp/>=<sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats_1ae9a69383818faf0de2b2e0a99d4179d9" kindref="member">pyfolio::stats::standard_deviation</ref>(std::span&lt;const<sp/>double&gt;{active_returns});</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mean_active_result.is_ok()<sp/>&amp;&amp;<sp/>std_active_result.is_ok())<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1ad37262010c03f54c2a8fb0444de158a1" kindref="member">active_return</ref><sp/><sp/>=<sp/>mean_active_result.value();</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1abdc71904641a095d8c7acbfcd8060c5a" kindref="member">tracking_error</ref><sp/>=<sp/>std_active_result.value();</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.<ref refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1abdc71904641a095d8c7acbfcd8060c5a" kindref="member">tracking_error</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1af4dd7d95f36605e3733e29fed79d657f" kindref="member">information_ratio</ref><sp/>=<sp/>result.<ref refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1ad37262010c03f54c2a8fb0444de158a1" kindref="member">active_return</ref><sp/>/<sp/>result.<ref refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1abdc71904641a095d8c7acbfcd8060c5a" kindref="member">tracking_error</ref>;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Risk<sp/>decomposition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bench_vol_result<sp/>=<sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats_1ae9a69383818faf0de2b2e0a99d4179d9" kindref="member">pyfolio::stats::standard_deviation</ref>(std::span&lt;const<sp/>Return&gt;{benchmark_returns.<ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" kindref="member">values</ref>()});</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bench_vol_result.is_ok())<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>benchmark_vol<sp/><sp/><sp/>=<sp/>bench_vol_result.value();</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1a68f6ed1ac77d0c54b824d89c6d598d52" kindref="member">systematic_risk</ref><sp/>=<sp/>std::abs(result.<ref refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1a8ac9e2b0cb92b5b59f234c4f4271ae1a" kindref="member">beta</ref>)<sp/>*<sp/>benchmark_vol;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>port_vol_result<sp/>=</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats_1ae9a69383818faf0de2b2e0a99d4179d9" kindref="member">pyfolio::stats::standard_deviation</ref>(std::span&lt;const<sp/>Return&gt;{portfolio_returns.<ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" kindref="member">values</ref>()});</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(port_vol_result.is_ok())<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>portfolio_vol<sp/>=<sp/>port_vol_result.value();</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1a2cf02a111b19b5e14f172656a2f89fda" kindref="member">specific_risk</ref><sp/>=<sp/>std::sqrt(</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::max(0.0,<sp/>portfolio_vol<sp/>*<sp/>portfolio_vol<sp/>-<sp/>result.<ref refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1a68f6ed1ac77d0c54b824d89c6d598d52" kindref="member">systematic_risk</ref><sp/>*<sp/>result.<ref refid="da/dbd/structpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1_1AlphaBetaResult_1a68f6ed1ac77d0c54b824d89c6d598d52" kindref="member">systematic_risk</ref>));</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" kindref="member">Result&lt;AlphaBetaResult&gt;::success</ref>(result);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;AlphaBetaResult&gt;</ref><sp/>linear_regression(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Return&gt;&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Return&gt;&amp;<sp/>y)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x.size()<sp/>!=<sp/>y.size()<sp/>||<sp/>x.size()<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" kindref="member">Result&lt;AlphaBetaResult&gt;::error</ref>(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" kindref="member">ErrorCode::InvalidInput</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>data<sp/>for<sp/>regression&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x.size();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_x<sp/><sp/>=<sp/>std::accumulate(x.begin(),<sp/>x.end(),<sp/>0.0);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_y<sp/><sp/>=<sp/>std::accumulate(y.begin(),<sp/>y.end(),<sp/>0.0);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_xx<sp/>=<sp/>std::inner_product(x.begin(),<sp/>x.end(),<sp/>x.begin(),<sp/>0.0);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_xy<sp/>=<sp/>std::inner_product(x.begin(),<sp/>x.end(),<sp/>y.begin(),<sp/>0.0);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_yy<sp/>=<sp/>std::inner_product(y.begin(),<sp/>y.end(),<sp/>y.begin(),<sp/>0.0);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mean_x<sp/>=<sp/>sum_x<sp/>/<sp/>n;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mean_y<sp/>=<sp/>sum_y<sp/>/<sp/>n;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sxx<sp/>=<sp/>sum_xx<sp/>-<sp/>n<sp/>*<sp/>mean_x<sp/>*<sp/>mean_x;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sxy<sp/>=<sp/>sum_xy<sp/>-<sp/>n<sp/>*<sp/>mean_x<sp/>*<sp/>mean_y;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>syy<sp/>=<sp/>sum_yy<sp/>-<sp/>n<sp/>*<sp/>mean_y<sp/>*<sp/>mean_y;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sxx<sp/>==<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" kindref="member">Result&lt;AlphaBetaResult&gt;::error</ref>(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a34e540e6594987eef203290f0a593bd2" kindref="member">ErrorCode::DivisionByZero</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Zero<sp/>variance<sp/>in<sp/>benchmark<sp/>returns&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlphaBetaResult<sp/>result{};</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.beta<sp/><sp/>=<sp/>sxy<sp/>/<sp/>sxx;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.alpha<sp/>=<sp/>mean_y<sp/>-<sp/>result.beta<sp/>*<sp/>mean_x;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>R-squared</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(syy<sp/>&gt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.r_squared<sp/>=<sp/>(sxy<sp/>*<sp/>sxy)<sp/>/<sp/>(sxx<sp/>*<sp/>syy);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" kindref="member">Result&lt;AlphaBetaResult&gt;::success</ref>(result);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal">};</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="526" refid="d7/d21/classpyfolio_1_1attribution_1_1AttributionAnalyzer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d7/d21/classpyfolio_1_1attribution_1_1AttributionAnalyzer" kindref="compound">AttributionAnalyzer</ref><sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="531" refid="d7/d21/classpyfolio_1_1attribution_1_1AttributionAnalyzer_1aba8060cedc814707e65a74e7f2e0a9f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;double&gt;</ref><sp/><ref refid="d7/d21/classpyfolio_1_1attribution_1_1AttributionAnalyzer_1aba8060cedc814707e65a74e7f2e0a9f9" kindref="member">analyze_factor_attribution</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures" kindref="compound">FactorExposures</ref>&amp;<sp/>portfolio_exposures,</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures" kindref="compound">FactorExposures</ref>&amp;<sp/>benchmark_exposures,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns" kindref="compound">FactorReturns</ref>&amp;<sp/>factor_returns)<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>portfolio_return<sp/>=<sp/>portfolio_exposures.<ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1aca7d631b073b924d7f89efd6d4b9668f" kindref="member">market_beta</ref><sp/>*<sp/>factor_returns.<ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1a954b8d6f9127b22378224c3913000ffc" kindref="member">market_return</ref><sp/>+</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portfolio_exposures.<ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1a1eca32accfb23f23f3c8cf188d60f5ad" kindref="member">size_factor</ref><sp/>*<sp/>factor_returns.<ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1a8d871460c8fa735b641fb273061e5a89" kindref="member">size_return</ref><sp/>+</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portfolio_exposures.<ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1abf25d702c370cb2b14834d493d88bdd3" kindref="member">value_factor</ref><sp/>*<sp/>factor_returns.<ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1af01832d5d63e7186c7155ed7b18620f2" kindref="member">value_return</ref><sp/>+</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portfolio_exposures.<ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1a141f158c067e9bfbe3e7fa4edb77423e" kindref="member">momentum_factor</ref><sp/>*<sp/>factor_returns.<ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1a2e0ef896d33b4c75f7788a29993d195d" kindref="member">momentum_return</ref><sp/>+</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portfolio_exposures.<ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1a8315ff133f67f56909bcca3f0cea639b" kindref="member">quality_factor</ref><sp/>*<sp/>factor_returns.<ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1ae47ee072b4df916d484e83b929130a37" kindref="member">quality_return</ref><sp/>+</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portfolio_exposures.<ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1ade09d65d7207dcd41d6abafebfdb580b" kindref="member">low_volatility_factor</ref><sp/>*<sp/>factor_returns.<ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1a36a07b2b8c415b9d556611cbbb87dc63" kindref="member">low_volatility_return</ref>;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>benchmark_return<sp/>=<sp/>benchmark_exposures.<ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1aca7d631b073b924d7f89efd6d4b9668f" kindref="member">market_beta</ref><sp/>*<sp/>factor_returns.<ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1a954b8d6f9127b22378224c3913000ffc" kindref="member">market_return</ref><sp/>+</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>benchmark_exposures.<ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1a1eca32accfb23f23f3c8cf188d60f5ad" kindref="member">size_factor</ref><sp/>*<sp/>factor_returns.<ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1a8d871460c8fa735b641fb273061e5a89" kindref="member">size_return</ref><sp/>+</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>benchmark_exposures.<ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1abf25d702c370cb2b14834d493d88bdd3" kindref="member">value_factor</ref><sp/>*<sp/>factor_returns.<ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1af01832d5d63e7186c7155ed7b18620f2" kindref="member">value_return</ref><sp/>+</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>benchmark_exposures.<ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1a141f158c067e9bfbe3e7fa4edb77423e" kindref="member">momentum_factor</ref><sp/>*<sp/>factor_returns.<ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1a2e0ef896d33b4c75f7788a29993d195d" kindref="member">momentum_return</ref><sp/>+</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>benchmark_exposures.<ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1a8315ff133f67f56909bcca3f0cea639b" kindref="member">quality_factor</ref><sp/>*<sp/>factor_returns.<ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1ae47ee072b4df916d484e83b929130a37" kindref="member">quality_return</ref><sp/>+</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>benchmark_exposures.<ref refid="df/da4/structpyfolio_1_1attribution_1_1FactorExposures_1ade09d65d7207dcd41d6abafebfdb580b" kindref="member">low_volatility_factor</ref><sp/>*<sp/>factor_returns.<ref refid="d2/d09/structpyfolio_1_1attribution_1_1FactorReturns_1a36a07b2b8c415b9d556611cbbb87dc63" kindref="member">low_volatility_return</ref>;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" kindref="member">Result&lt;double&gt;::success</ref>(portfolio_return<sp/>-<sp/>benchmark_return);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="554" refid="d7/d21/classpyfolio_1_1attribution_1_1AttributionAnalyzer_1a459039ea2bd76a724a7904e72f9cd8be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;std::vector&lt;SectorAttribution&gt;</ref>&gt;<sp/><ref refid="d7/d21/classpyfolio_1_1attribution_1_1AttributionAnalyzer_1a459039ea2bd76a724a7904e72f9cd8be" kindref="member">analyze_sector_attribution</ref>(</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>double&gt;&amp;<sp/>portfolio_weights,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>double&gt;&amp;<sp/>benchmark_weights,</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>double&gt;&amp;<sp/>sector_returns)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SectorAttribution&gt;<sp/>results;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>all_sectors;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Collect<sp/>all<sp/>sectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[sector,<sp/>weight]<sp/>:<sp/>portfolio_weights)</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_sectors.insert(sector);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[sector,<sp/>weight]<sp/>:<sp/>benchmark_weights)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_sectors.insert(sector);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>sector<sp/>:<sp/>all_sectors)<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution" kindref="compound">SectorAttribution</ref><sp/>attr;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a43b34f11cd5e42310368439b82b7cbec" kindref="member">sector</ref><sp/>=<sp/>sector;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>weights<sp/>(default<sp/>to<sp/>0<sp/>if<sp/>not<sp/>present)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>port_it<sp/><sp/>=<sp/>portfolio_weights.find(sector);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bench_it<sp/>=<sp/>benchmark_weights.find(sector);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret_it<sp/><sp/><sp/>=<sp/>sector_returns.find(sector);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a606a6cedb46d043b756ca9597559c4b4" kindref="member">portfolio_weight</ref><sp/>=<sp/>(port_it<sp/>!=<sp/>portfolio_weights.end())<sp/>?<sp/>port_it-&gt;second<sp/>:<sp/>0.0;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a3ff23f7ec30f31ce9d1800097993cc65" kindref="member">benchmark_weight</ref><sp/>=<sp/>(bench_it<sp/>!=<sp/>benchmark_weights.end())<sp/>?<sp/>bench_it-&gt;second<sp/>:<sp/>0.0;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a34b70828f7c81195b8cbe94cfbfb3896" kindref="member">portfolio_return</ref><sp/>=<sp/>(ret_it<sp/>!=<sp/>sector_returns.end())<sp/>?<sp/>ret_it-&gt;second<sp/>:<sp/>0.0;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a3e3a02ca2f856f3286bcaf9b8cb2650e" kindref="member">benchmark_return</ref><sp/>=<sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a34b70828f7c81195b8cbe94cfbfb3896" kindref="member">portfolio_return</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>Simplified<sp/>assumption</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Brinson<sp/>attribution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a0ce78d884eca80e9bf40fb0b407494de" kindref="member">allocation_effect</ref><sp/>=<sp/>(attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a606a6cedb46d043b756ca9597559c4b4" kindref="member">portfolio_weight</ref><sp/>-<sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a3ff23f7ec30f31ce9d1800097993cc65" kindref="member">benchmark_weight</ref>)<sp/>*<sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a3e3a02ca2f856f3286bcaf9b8cb2650e" kindref="member">benchmark_return</ref>;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1ac434f3b0290e09dccec73f1af6ba0431" kindref="member">selection_effect</ref><sp/><sp/>=<sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a3ff23f7ec30f31ce9d1800097993cc65" kindref="member">benchmark_weight</ref><sp/>*<sp/>(attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a34b70828f7c81195b8cbe94cfbfb3896" kindref="member">portfolio_return</ref><sp/>-<sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a3e3a02ca2f856f3286bcaf9b8cb2650e" kindref="member">benchmark_return</ref>);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1ac50e54bafe801c481c2601c856238872" kindref="member">interaction_effect</ref><sp/>=</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a606a6cedb46d043b756ca9597559c4b4" kindref="member">portfolio_weight</ref><sp/>-<sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a3ff23f7ec30f31ce9d1800097993cc65" kindref="member">benchmark_weight</ref>)<sp/>*<sp/>(attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a34b70828f7c81195b8cbe94cfbfb3896" kindref="member">portfolio_return</ref><sp/>-<sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a3e3a02ca2f856f3286bcaf9b8cb2650e" kindref="member">benchmark_return</ref>);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1ad5d7458f9910c785d6cd1df8425d492e" kindref="member">total_contribution</ref><sp/>=<sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1a0ce78d884eca80e9bf40fb0b407494de" kindref="member">allocation_effect</ref><sp/>+<sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1ac434f3b0290e09dccec73f1af6ba0431" kindref="member">selection_effect</ref><sp/>+<sp/>attr.<ref refid="d6/dcd/structpyfolio_1_1attribution_1_1SectorAttribution_1ac50e54bafe801c481c2601c856238872" kindref="member">interaction_effect</ref>;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results.push_back(attr);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;std::vector&lt;SectorAttribution&gt;</ref>&gt;::success(results);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal">};</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>pyfolio::attribution</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/attribution/attribution.h"/>
  </compounddef>
</doxygen>
