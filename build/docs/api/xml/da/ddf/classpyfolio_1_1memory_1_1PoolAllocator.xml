<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator" kind="class" language="C++" prot="public">
    <compoundname>pyfolio::memory::PoolAllocator</compoundname>
    <includes refid="df/d9d/pool__allocator_8h" local="no">pool_allocator.h</includes>
    <innerclass refid="d2/d57/structpyfolio_1_1memory_1_1PoolAllocator_1_1rebind" prot="public">pyfolio::memory::PoolAllocator::rebind</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1aeffb002b085a52e575145c760cb4efc7" prot="public" static="no">
        <type>T</type>
        <definition>using pyfolio::memory::PoolAllocator&lt; T &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>pyfolio::memory::PoolAllocator::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="439" column="5" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1a1d70e05e7595f0ca21eab1a784dc0466" prot="public" static="no">
        <type>T *</type>
        <definition>using pyfolio::memory::PoolAllocator&lt; T &gt;::pointer =  T*</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <qualifiedname>pyfolio::memory::PoolAllocator::pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="440" column="5" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="440" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1a74fbb7499f18faf1d2aaad9849b62bfb" prot="public" static="no">
        <type>const T *</type>
        <definition>using pyfolio::memory::PoolAllocator&lt; T &gt;::const_pointer =  const T*</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <qualifiedname>pyfolio::memory::PoolAllocator::const_pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="441" column="5" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="441" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1af7fed2e3f51602b9444436f77e07a6d4" prot="public" static="no">
        <type>T &amp;</type>
        <definition>using pyfolio::memory::PoolAllocator&lt; T &gt;::reference =  T&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <qualifiedname>pyfolio::memory::PoolAllocator::reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="442" column="5" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1aa2a5018f057a519d7c4eef3161addb0d" prot="public" static="no">
        <type>const T &amp;</type>
        <definition>using pyfolio::memory::PoolAllocator&lt; T &gt;::const_reference =  const T&amp;</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <qualifiedname>pyfolio::memory::PoolAllocator::const_reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="443" column="5" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1a0751964ae34305e80dcdaab0dc5fb11d" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using pyfolio::memory::PoolAllocator&lt; T &gt;::size_type =  std::size_t</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>pyfolio::memory::PoolAllocator::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="444" column="5" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1a0deb57f0de6b8996336d51a8ba65ea1b" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using pyfolio::memory::PoolAllocator&lt; T &gt;::difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <qualifiedname>pyfolio::memory::PoolAllocator::difference_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="445" column="5" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="445" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1a69a7be23c86f826334ca140ce9fd9ebb" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d6/d0f/classpyfolio_1_1memory_1_1FixedBlockAllocator" kindref="compound">FixedBlockAllocator</ref>&lt; T &gt; &amp;</type>
        <definition>static FixedBlockAllocator&lt; T &gt; &amp; pyfolio::memory::PoolAllocator&lt; T &gt;::get_allocator</definition>
        <argsstring>()</argsstring>
        <name>get_allocator</name>
        <qualifiedname>pyfolio::memory::PoolAllocator::get_allocator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="433" column="32" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="433" bodyend="436"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1aef16a324c2daa87d42faa8f4aa93ef24" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>pyfolio::memory::PoolAllocator&lt; T &gt;::PoolAllocator</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>PoolAllocator</name>
        <qualifiedname>pyfolio::memory::PoolAllocator::PoolAllocator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="452" column="5"/>
      </memberdef>
      <memberdef kind="function" id="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1a950ca2fe7cb24c98771d40af0a5127bf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>pyfolio::memory::PoolAllocator&lt; T &gt;::PoolAllocator</definition>
        <argsstring>(const PoolAllocator&lt; U &gt; &amp;) noexcept</argsstring>
        <name>PoolAllocator</name>
        <qualifiedname>pyfolio::memory::PoolAllocator::PoolAllocator</qualifiedname>
        <param>
          <type>const <ref refid="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator" kindref="compound">PoolAllocator</ref>&lt; U &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="455" column="5" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="455" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1a318fe95fe7bcc00259248e03d4d5e945" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1a1d70e05e7595f0ca21eab1a784dc0466" kindref="member">pointer</ref></type>
        <definition>pointer pyfolio::memory::PoolAllocator&lt; T &gt;::allocate</definition>
        <argsstring>(size_type n)</argsstring>
        <name>allocate</name>
        <qualifiedname>pyfolio::memory::PoolAllocator::allocate</qualifiedname>
        <param>
          <type><ref refid="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1a0751964ae34305e80dcdaab0dc5fb11d" kindref="member">size_type</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="457" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="457" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1ae0c0cf21cc43f5fce701c4b677ed3700" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::memory::PoolAllocator&lt; T &gt;::deallocate</definition>
        <argsstring>(pointer ptr, size_type)</argsstring>
        <name>deallocate</name>
        <qualifiedname>pyfolio::memory::PoolAllocator::deallocate</qualifiedname>
        <param>
          <type><ref refid="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1a1d70e05e7595f0ca21eab1a784dc0466" kindref="member">pointer</ref></type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1a0751964ae34305e80dcdaab0dc5fb11d" kindref="member">size_type</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="470" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="470" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1a8f36e035226f7995b8d17dbf1160d453" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool pyfolio::memory::PoolAllocator&lt; T &gt;::operator==</definition>
        <argsstring>(const PoolAllocator&lt; U &gt; &amp;) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>pyfolio::memory::PoolAllocator::operator==</qualifiedname>
        <param>
          <type>const <ref refid="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator" kindref="compound">PoolAllocator</ref>&lt; U &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="473" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="473" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1a30dc7b4f0332f467a8fce8f6f9a97fa5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool pyfolio::memory::PoolAllocator&lt; T &gt;::operator!=</definition>
        <argsstring>(const PoolAllocator&lt; U &gt; &amp;) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>pyfolio::memory::PoolAllocator::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator" kindref="compound">PoolAllocator</ref>&lt; U &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="478" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="478" bodyend="480"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1aa6f8c80e775c89f60162e13f0550fda9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d9/d8e/structpyfolio_1_1memory_1_1PoolStats" kindref="compound">PoolStats</ref></type>
        <definition>static PoolStats pyfolio::memory::PoolAllocator&lt; T &gt;::get_stats</definition>
        <argsstring>()</argsstring>
        <name>get_stats</name>
        <qualifiedname>pyfolio::memory::PoolAllocator::get_stats</qualifiedname>
        <briefdescription>
<para>Get allocator statistics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="485" column="22" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="485" bodyend="485"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>STL-compatible allocator using memory pools. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="431" column="1" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="431" bodyend="486"/>
    <listofallmembers>
      <member refid="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1a318fe95fe7bcc00259248e03d4d5e945" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolAllocator</scope><name>allocate</name></member>
      <member refid="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1a74fbb7499f18faf1d2aaad9849b62bfb" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolAllocator</scope><name>const_pointer</name></member>
      <member refid="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1aa2a5018f057a519d7c4eef3161addb0d" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolAllocator</scope><name>const_reference</name></member>
      <member refid="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1ae0c0cf21cc43f5fce701c4b677ed3700" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolAllocator</scope><name>deallocate</name></member>
      <member refid="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1a0deb57f0de6b8996336d51a8ba65ea1b" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolAllocator</scope><name>difference_type</name></member>
      <member refid="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1a69a7be23c86f826334ca140ce9fd9ebb" prot="private" virt="non-virtual"><scope>pyfolio::memory::PoolAllocator</scope><name>get_allocator</name></member>
      <member refid="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1aa6f8c80e775c89f60162e13f0550fda9" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolAllocator</scope><name>get_stats</name></member>
      <member refid="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1a30dc7b4f0332f467a8fce8f6f9a97fa5" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolAllocator</scope><name>operator!=</name></member>
      <member refid="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1a8f36e035226f7995b8d17dbf1160d453" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolAllocator</scope><name>operator==</name></member>
      <member refid="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1a1d70e05e7595f0ca21eab1a784dc0466" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolAllocator</scope><name>pointer</name></member>
      <member refid="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1aef16a324c2daa87d42faa8f4aa93ef24" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolAllocator</scope><name>PoolAllocator</name></member>
      <member refid="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1a950ca2fe7cb24c98771d40af0a5127bf" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolAllocator</scope><name>PoolAllocator</name></member>
      <member refid="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1af7fed2e3f51602b9444436f77e07a6d4" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolAllocator</scope><name>reference</name></member>
      <member refid="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1a0751964ae34305e80dcdaab0dc5fb11d" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolAllocator</scope><name>size_type</name></member>
      <member refid="da/ddf/classpyfolio_1_1memory_1_1PoolAllocator_1aeffb002b085a52e575145c760cb4efc7" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolAllocator</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
