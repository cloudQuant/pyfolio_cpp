<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d6/d06/GETTING__STARTED_8md" kind="file" language="Markdown">
    <compoundname>GETTING_STARTED.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>Getting<sp/>Started<sp/>with<sp/>Pyfolio<sp/>C++</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>guide<sp/>will<sp/>help<sp/>you<sp/>get<sp/>up<sp/>and<sp/>running<sp/>with<sp/>Pyfolio<sp/>C++,<sp/>a<sp/>high-performance<sp/>financial<sp/>portfolio<sp/>analysis<sp/>library.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Table<sp/>of<sp/>Contents</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>[Installation](#installation)</highlight></codeline>
<codeline><highlight class="normal">2.<sp/>[Basic<sp/>Usage](#basic-usage)</highlight></codeline>
<codeline><highlight class="normal">3.<sp/>[Core<sp/>Concepts](#core-concepts)</highlight></codeline>
<codeline><highlight class="normal">4.<sp/>[Performance<sp/>Tips](#performance-tips)</highlight></codeline>
<codeline><highlight class="normal">5.<sp/>[Common<sp/>Patterns](#common-patterns)</highlight></codeline>
<codeline><highlight class="normal">6.<sp/>[Troubleshooting](#troubleshooting)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Installation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Prerequisites</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>**C++20<sp/>Compiler**:<sp/>GCC<sp/>11+,<sp/>Clang<sp/>13+,<sp/>or<sp/>MSVC<sp/>2022+</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**CMake**:<sp/>Version<sp/>3.25<sp/>or<sp/>newer</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Dependencies**:<sp/>Automatically<sp/>fetched<sp/>via<sp/>CMake</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Quick<sp/>Build</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">git<sp/>clone<sp/>https://github.com/your-org/pyfolio_cpp.git</highlight></codeline>
<codeline><highlight class="normal">cd<sp/>pyfolio_cpp</highlight></codeline>
<codeline><highlight class="normal">mkdir<sp/>build<sp/>&amp;&amp;<sp/>cd<sp/>build</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>-DCMAKE_BUILD_TYPE=Release<sp/>..</highlight></codeline>
<codeline><highlight class="normal">make<sp/>-j$(nproc)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Advanced<sp/>Build<sp/>Options</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">#<sp/>Debug<sp/>build<sp/>with<sp/>coverage</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>-DCMAKE_BUILD_TYPE=Debug<sp/>-DENABLE_COVERAGE=ON<sp/>..</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Release<sp/>with<sp/>documentation</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>-DCMAKE_BUILD_TYPE=Release<sp/>-DBUILD_DOCUMENTATION=ON<sp/>..</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>With<sp/>static<sp/>analysis</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>-DENABLE_CPPCHECK=ON<sp/>-DENABLE_CLANG_TIDY=ON<sp/>..</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Basic<sp/>Usage</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Your<sp/>First<sp/>Analysis</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pyfolio/pyfolio.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;iostream&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>pyfolio;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Create<sp/>sample<sp/>return<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;DateTime&gt;<sp/>dates<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DateTime::parse(&quot;2024-01-01&quot;).value(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DateTime::parse(&quot;2024-01-02&quot;).value(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DateTime::parse(&quot;2024-01-03&quot;).value(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DateTime::parse(&quot;2024-01-04&quot;).value(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DateTime::parse(&quot;2024-01-05&quot;).value()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Return&gt;<sp/>returns<sp/>=<sp/>{0.01,<sp/>-0.02,<sp/>0.015,<sp/>-0.005,<sp/>0.008};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Create<sp/>time<sp/>series</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TimeSeries&lt;Return&gt;<sp/>portfolio_returns(dates,<sp/>returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Calculate<sp/>basic<sp/>metrics</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>sharpe<sp/>=<sp/>performance::sharpe_ratio(portfolio_returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>max_dd<sp/>=<sp/>performance::max_drawdown(portfolio_returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>volatility<sp/>=<sp/>performance::volatility(portfolio_returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(sharpe.is_ok()<sp/>&amp;&amp;<sp/>max_dd.is_ok()<sp/>&amp;&amp;<sp/>volatility.is_ok())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Sharpe<sp/>Ratio:<sp/>&quot;<sp/>&lt;&lt;<sp/>sharpe.value()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Max<sp/>Drawdown:<sp/>&quot;<sp/>&lt;&lt;<sp/>max_dd.value()<sp/>*<sp/>100<sp/>&lt;&lt;<sp/>&quot;%&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Volatility:<sp/>&quot;<sp/>&lt;&lt;<sp/>volatility.value()<sp/>*<sp/>100<sp/>&lt;&lt;<sp/>&quot;%&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Loading<sp/>Data<sp/>from<sp/>Files</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pyfolio/io/data_loader.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Load<sp/>returns<sp/>from<sp/>CSV</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>returns_result<sp/>=<sp/>pyfolio::io::load_returns_csv(&quot;portfolio_returns.csv&quot;);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(returns_result.is_ok())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>auto&amp;<sp/>returns<sp/>=<sp/>returns_result.value();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Calculate<sp/>comprehensive<sp/>metrics</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>metrics<sp/>=<sp/>pyfolio::analytics::calculate_performance_metrics(returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(metrics.is_ok())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto&amp;<sp/>m<sp/>=<sp/>metrics.value();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Annual<sp/>Return:<sp/>&quot;<sp/>&lt;&lt;<sp/>m.annual_return<sp/>*<sp/>100<sp/>&lt;&lt;<sp/>&quot;%&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Sharpe<sp/>Ratio:<sp/>&quot;<sp/>&lt;&lt;<sp/>m.sharpe_ratio<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Core<sp/>Concepts</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>1.<sp/>Result&lt;T&gt;<sp/>Error<sp/>Handling</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Pyfolio<sp/>C++<sp/>uses<sp/>the<sp/>`Result&lt;T&gt;`<sp/>monad<sp/>for<sp/>robust<sp/>error<sp/>handling:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Always<sp/>check<sp/>for<sp/>errors</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>result<sp/>=<sp/>calculate_something();</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(result.is_error())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;Error:<sp/>&quot;<sp/>&lt;&lt;<sp/>result.error().message<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Use<sp/>the<sp/>value<sp/>safely</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>value<sp/>=<sp/>result.value();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>2.<sp/>TimeSeries<sp/>Container</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>`TimeSeries&lt;T&gt;`<sp/>class<sp/>is<sp/>the<sp/>foundation<sp/>for<sp/>all<sp/>time-based<sp/>analysis:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">TimeSeries&lt;Return&gt;<sp/>returns;</highlight></codeline>
<codeline><highlight class="normal">returns.reserve(10000);<sp/><sp/>//<sp/>Pre-allocate<sp/>for<sp/>performance</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Add<sp/>data<sp/>efficiently</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(const<sp/>auto&amp;<sp/>[date,<sp/>ret]<sp/>:<sp/>data)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>returns.push_back(date,<sp/>ret);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Automatic<sp/>sorting<sp/>and<sp/>validation</highlight></codeline>
<codeline><highlight class="normal">returns.sort_by_time();<sp/><sp/>//<sp/>O(n<sp/>log<sp/>n)<sp/>worst<sp/>case,<sp/>O(n)<sp/>if<sp/>already<sp/>sorted</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>3.<sp/>SIMD<sp/>Optimization</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Operations<sp/>automatically<sp/>use<sp/>SIMD<sp/>when<sp/>available:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>This<sp/>automatically<sp/>uses<sp/>AVX2/SSE2<sp/>if<sp/>available</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>correlation<sp/>=<sp/>series1.correlation(series2);</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>dot_product<sp/>=<sp/>series1.dot(series2);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Explicit<sp/>SIMD<sp/>control</highlight></codeline>
<codeline><highlight class="normal">#ifdef<sp/>PYFOLIO_HAS_AVX2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>AVX2-specific<sp/>optimizations<sp/>available</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>4.<sp/>Parallel<sp/>Processing</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pyfolio/core/parallel_algorithms.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Parallel<sp/>metric<sp/>calculation</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>metrics<sp/>=<sp/>pyfolio::parallel::calculate_metrics(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>large_portfolio,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::thread::hardware_concurrency()</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Performance<sp/>Tips</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>1.<sp/>Memory<sp/>Management</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Pre-allocate<sp/>containers</highlight></codeline>
<codeline><highlight class="normal">TimeSeries&lt;Return&gt;<sp/>returns;</highlight></codeline>
<codeline><highlight class="normal">returns.reserve(expected_size);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Use<sp/>move<sp/>semantics</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>processed<sp/>=<sp/>std::move(raw_data).process_returns();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Memory<sp/>pools<sp/>for<sp/>high-frequency<sp/>trading</highlight></codeline>
<codeline><highlight class="normal">pyfolio::PoolAllocator&lt;Transaction&gt;<sp/>allocator(1000000);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>2.<sp/>Efficient<sp/>Data<sp/>Access</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Use<sp/>spans<sp/>for<sp/>zero-copy<sp/>operations</highlight></codeline>
<codeline><highlight class="normal">std::span&lt;const<sp/>double&gt;<sp/>data_view<sp/>=<sp/>returns.values();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Batch<sp/>operations<sp/>when<sp/>possible</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>[mean,<sp/>std_dev]<sp/>=<sp/>calculate_mean_and_std(returns);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>3.<sp/>Rolling<sp/>Calculations</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Optimized<sp/>O(n)<sp/>rolling<sp/>calculations</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>rolling_sharpe<sp/>=<sp/>returns.rolling(252,<sp/>[](auto<sp/>window)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>calculate_sharpe_ratio(window);</highlight></codeline>
<codeline><highlight class="normal">});</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Built-in<sp/>optimized<sp/>versions</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>rolling_mean<sp/>=<sp/>returns.rolling_mean(30);</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>rolling_std<sp/>=<sp/>returns.rolling_std(30);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Common<sp/>Patterns</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>1.<sp/>Comprehensive<sp/>Analysis</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>analyze_portfolio(const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>benchmark)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Basic<sp/>metrics</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>metrics<sp/>=<sp/>pyfolio::analytics::calculate_performance_metrics(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>returns,<sp/>benchmark,<sp/>0.02,<sp/>252);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(metrics.is_error())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;Analysis<sp/>failed:<sp/>&quot;<sp/>&lt;&lt;<sp/>metrics.error().message<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>auto&amp;<sp/>m<sp/>=<sp/>metrics.value();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>results</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;===<sp/>Portfolio<sp/>Analysis<sp/>===&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Annual<sp/>Return:<sp/>&quot;<sp/>&lt;&lt;<sp/>m.annual_return<sp/>*<sp/>100<sp/>&lt;&lt;<sp/>&quot;%&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Volatility:<sp/>&quot;<sp/>&lt;&lt;<sp/>m.annual_volatility<sp/>*<sp/>100<sp/>&lt;&lt;<sp/>&quot;%&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Sharpe<sp/>Ratio:<sp/>&quot;<sp/>&lt;&lt;<sp/>m.sharpe_ratio<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Max<sp/>Drawdown:<sp/>&quot;<sp/>&lt;&lt;<sp/>m.max_drawdown<sp/>*<sp/>100<sp/>&lt;&lt;<sp/>&quot;%&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Beta:<sp/>&quot;<sp/>&lt;&lt;<sp/>m.beta<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Alpha:<sp/>&quot;<sp/>&lt;&lt;<sp/>m.alpha<sp/>*<sp/>100<sp/>&lt;&lt;<sp/>&quot;%&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>2.<sp/>Risk<sp/>Analysis</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pyfolio/risk/var.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>risk_analysis(const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Value<sp/>at<sp/>Risk</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>var_95<sp/>=<sp/>pyfolio::risk::value_at_risk(returns,<sp/>0.95);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>var_99<sp/>=<sp/>pyfolio::risk::value_at_risk(returns,<sp/>0.99);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Conditional<sp/>VaR</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>cvar_95<sp/>=<sp/>pyfolio::risk::conditional_var(returns,<sp/>0.95);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;VaR<sp/>(95%):<sp/>&quot;<sp/>&lt;&lt;<sp/>var_95.value()<sp/>*<sp/>100<sp/>&lt;&lt;<sp/>&quot;%&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;VaR<sp/>(99%):<sp/>&quot;<sp/>&lt;&lt;<sp/>var_99.value()<sp/>*<sp/>100<sp/>&lt;&lt;<sp/>&quot;%&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;CVaR<sp/>(95%):<sp/>&quot;<sp/>&lt;&lt;<sp/>cvar_95.value()<sp/>*<sp/>100<sp/>&lt;&lt;<sp/>&quot;%&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>3.<sp/>Performance<sp/>Attribution</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>attribution_analysis(const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>portfolio,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>benchmark,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>PositionSeries&amp;<sp/>positions)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>attribution<sp/>=<sp/>pyfolio::attribution::brinson_attribution(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portfolio,<sp/>benchmark,<sp/>positions);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(attribution.is_ok())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto&amp;<sp/>attr<sp/>=<sp/>attribution.value();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Selection<sp/>Effect:<sp/>&quot;<sp/>&lt;&lt;<sp/>attr.selection_effect<sp/>*<sp/>100<sp/>&lt;&lt;<sp/>&quot;%&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Allocation<sp/>Effect:<sp/>&quot;<sp/>&lt;&lt;<sp/>attr.allocation_effect<sp/>*<sp/>100<sp/>&lt;&lt;<sp/>&quot;%&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>4.<sp/>Visualization</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pyfolio/visualization/plotly_enhanced.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>create_tear_sheet(const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pyfolio::visualization::PlotlyEnhanced<sp/>plotter;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Create<sp/>interactive<sp/>charts</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>equity_curve<sp/>=<sp/>plotter.plot_cumulative_returns(returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>drawdown_plot<sp/>=<sp/>plotter.plot_drawdown(returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>monthly_heatmap<sp/>=<sp/>plotter.plot_monthly_returns_heatmap(returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Save<sp/>to<sp/>HTML</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>plotter.save_tear_sheet(&quot;portfolio_analysis.html&quot;,<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>equity_curve,<sp/>drawdown_plot,<sp/>monthly_heatmap</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Troubleshooting</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Common<sp/>Issues</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>**Compilation<sp/>Errors**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>```bash</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>#<sp/>Ensure<sp/>C++20<sp/>support</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>g++<sp/>--version<sp/><sp/>#<sp/>Should<sp/>be<sp/>11+<sp/>for<sp/>GCC</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>clang++<sp/>--version<sp/><sp/>#<sp/>Should<sp/>be<sp/>13+<sp/>for<sp/>Clang</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">2.<sp/>**Missing<sp/>Dependencies**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>```bash</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>#<sp/>Dependencies<sp/>are<sp/>auto-fetched,<sp/>but<sp/>check<sp/>network<sp/>access</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>cmake<sp/>--build<sp/>.<sp/>--target<sp/>all<sp/><sp/>#<sp/>Re-run<sp/>if<sp/>network<sp/>issues</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">3.<sp/>**Performance<sp/>Issues**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>```cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>Enable<sp/>compiler<sp/>optimizations</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>cmake<sp/>-DCMAKE_BUILD_TYPE=Release<sp/>-DCMAKE_CXX_FLAGS=&quot;-march=native&quot;<sp/>..</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>Check<sp/>SIMD<sp/>availability</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>#ifdef<sp/>PYFOLIO_HAS_AVX2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;AVX2<sp/>available&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">4.<sp/>**Memory<sp/>Issues**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>```cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>Use<sp/>memory<sp/>profiling</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>cmake<sp/>-DCMAKE_BUILD_TYPE=Debug<sp/>-DENABLE_SANITIZER=ON<sp/>..</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>Or<sp/>use<sp/>memory<sp/>pools</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>pyfolio::PoolAllocator&lt;Position&gt;<sp/>allocator(100000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Debug<sp/>Mode</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">#<sp/>Build<sp/>with<sp/>debug<sp/>information</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>-DCMAKE_BUILD_TYPE=Debug<sp/>-DENABLE_COVERAGE=ON<sp/>..</highlight></codeline>
<codeline><highlight class="normal">make</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Run<sp/>with<sp/>detailed<sp/>error<sp/>messages</highlight></codeline>
<codeline><highlight class="normal">export<sp/>PYFOLIO_DEBUG=1</highlight></codeline>
<codeline><highlight class="normal">./your_program</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Performance<sp/>Profiling</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">#<sp/>Build<sp/>with<sp/>profiling</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>-DCMAKE_BUILD_TYPE=RelWithDebInfo<sp/>..</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Profile<sp/>with<sp/>perf<sp/>(Linux)</highlight></codeline>
<codeline><highlight class="normal">perf<sp/>record<sp/>-g<sp/>./your_program</highlight></codeline>
<codeline><highlight class="normal">perf<sp/>report</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Or<sp/>use<sp/>built-in<sp/>benchmarks</highlight></codeline>
<codeline><highlight class="normal">./tests/performance_benchmarks</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Next<sp/>Steps</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>**Explore<sp/>Examples**:<sp/>Check<sp/>the<sp/>`examples/`<sp/>directory<sp/>for<sp/>more<sp/>complex<sp/>use<sp/>cases</highlight></codeline>
<codeline><highlight class="normal">2.<sp/>**Read<sp/>API<sp/>Documentation**:<sp/>Browse<sp/>the<sp/>generated<sp/>Doxygen<sp/>docs<sp/>at<sp/>`build/docs/api/html/index.html`</highlight></codeline>
<codeline><highlight class="normal">3.<sp/>**Performance<sp/>Tuning**:<sp/>See<sp/>the<sp/>optimization<sp/>guide<sp/>in<sp/>`docs/PERFORMANCE.md`</highlight></codeline>
<codeline><highlight class="normal">4.<sp/>**Contributing**:<sp/>Read<sp/>`CONTRIBUTING.md`<sp/>for<sp/>development<sp/>guidelines</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Getting<sp/>Help</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>**Documentation**:<sp/>Generated<sp/>API<sp/>docs<sp/>in<sp/>`build/docs/api/html/`</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Examples**:<sp/>Complete<sp/>examples<sp/>in<sp/>`examples/`<sp/>directory</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Issues**:<sp/>Report<sp/>bugs<sp/>on<sp/>GitHub<sp/>Issues</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Discussions**:<sp/>Join<sp/>the<sp/>GitHub<sp/>Discussions<sp/>for<sp/>questions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Welcome<sp/>to<sp/>high-performance<sp/>financial<sp/>analysis<sp/>with<sp/>Pyfolio<sp/>C++!</highlight></codeline>
    </programlisting>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/docs/GETTING_STARTED.md"/>
  </compounddef>
</doxygen>
