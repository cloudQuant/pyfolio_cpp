<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d6/ddc/namespacepyfolio_1_1stats" kind="namespace" language="C++">
    <compoundname>pyfolio::stats</compoundname>
    <innernamespace refid="dd/d79/namespacepyfolio_1_1stats_1_1constants">pyfolio::stats::constants</innernamespace>
    <innernamespace refid="d9/d4a/namespacepyfolio_1_1stats_1_1constexpr__utils">pyfolio::stats::constexpr_utils</innernamespace>
    <sectiondef kind="func">
      <memberdef kind="function" id="d6/ddc/namespacepyfolio_1_1stats_1a0ded7b265023215831bffb8b799ba59a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Numeric</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::stats::mean</definition>
        <argsstring>(std::span&lt; const T &gt; data)</argsstring>
        <name>mean</name>
        <qualifiedname>pyfolio::stats::mean</qualifiedname>
        <param>
          <type>std::span&lt; const T &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Calculate mean of a data series. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" line="112" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" bodystart="112" bodyend="119"/>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <referencedby refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a0b79ac7ee0ea18fbb4280bdd518040f4" compoundref="d6/dfe/bayesian_8h" startline="228" endline="295">pyfolio::analytics::BayesianAnalyzer::analyze_performance</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a570a25f1233fa82e4d5c237cca260e59" compoundref="d4/d73/returns_8h" startline="125" endline="142">pyfolio::performance::annualize_returns</referencedby>
        <referencedby refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a23872e94eff2db6230bdd21ab0793a12" compoundref="d6/dfe/bayesian_8h" startline="383" endline="437">pyfolio::analytics::BayesianAnalyzer::bayesian_var</referencedby>
        <referencedby refid="d9/dc2/classpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1aa1a010f21d746f4b5ca020320a4ad529" compoundref="da/dd4/attribution_8h" startline="417" endline="484">pyfolio::attribution::AlphaBetaAnalysis::calculate</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1ac3157a75ae2536e6e77a7561917be03e" compoundref="df/d46/var_8h" startline="252" endline="302">pyfolio::risk::VaRCalculator::calculate_cornish_fisher_var</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a5355f08aadc5dc96a9bc0443d70eb93b" compoundref="df/d46/var_8h" startline="144" endline="199">pyfolio::risk::VaRCalculator::calculate_historical_var</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a297d2eb32efafc48a09197a2cd0dd2ab" compoundref="df/d46/var_8h" startline="307" endline="363">pyfolio::risk::VaRCalculator::calculate_monte_carlo_var</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a1c475db5eee0c7ae9a7472688f7bb8fc" compoundref="df/d46/var_8h" startline="204" endline="247">pyfolio::risk::VaRCalculator::calculate_parametric_var</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a77cf1b59bc8f7770d2f1e7df6df96c86" compoundref="d3/d7e/rolling__metrics_8h" startline="76" endline="127">pyfolio::performance::calculate_rolling_sharpe</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a4e5a00565b6f3da166dbcb1a57b53fec" compoundref="d3/d7e/rolling__metrics_8h" startline="322" endline="386">pyfolio::performance::calculate_rolling_sortino</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a048c0615bdec480c0e1574fe8c7c1129" compoundref="d3/d7e/rolling__metrics_8h" startline="25" endline="64">pyfolio::performance::calculate_rolling_volatility</referencedby>
        <referencedby refid="dc/d21/namespacepyfolio_1_1analytics_1_1statistics_1a03d3ac2bfd1691d61e27da8e7d951c22" compoundref="d5/db2/analytics_2statistics_8h" startline="42" endline="104">pyfolio::analytics::statistics::calculate_summary</referencedby>
        <referencedby refid="d0/dfb/classpyfolio_1_1analytics_1_1RegimeDetector_1a1d615e210259da83d7953790e4d5c992" compoundref="d2/dfc/regime__detection_8h" startline="277" endline="325">pyfolio::analytics::RegimeDetector::classify_current_regime</referencedby>
        <referencedby refid="d6/ddc/namespacepyfolio_1_1stats_1a1aca034860dac7ddacbac6f9dd0b930c" compoundref="d3/dbe/math_2statistics_8h" startline="397" endline="424">conditional_value_at_risk</referencedby>
        <referencedby refid="d6/ddc/namespacepyfolio_1_1stats_1ae62df134ebe0d79d73c16894c3dc364d" compoundref="d3/dbe/math_2statistics_8h" startline="236" endline="278">correlation</referencedby>
        <referencedby refid="d6/ddc/namespacepyfolio_1_1stats_1af8d120442d5971c10a506129f562be2c" compoundref="d3/dbe/math_2statistics_8h" startline="284" endline="314">covariance</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a72a6639531f459b9963884e4d4ac571e" compoundref="d7/d06/ratios_8h" startline="164" endline="212">pyfolio::performance::information_ratio</referencedby>
        <referencedby refid="d6/ddc/namespacepyfolio_1_1stats_1ae51a470f87ae34ae1f58305531f9dcf8" compoundref="d3/dbe/math_2statistics_8h" startline="199" endline="230">kurtosis</referencedby>
        <referencedby refid="d0/dfb/classpyfolio_1_1analytics_1_1RegimeDetector_1a2233d9e06edde686d5b6620a2830130a" compoundref="d2/dfc/regime__detection_8h" startline="382" endline="478">pyfolio::analytics::RegimeDetector::markov_switching_detection</referencedby>
        <referencedby refid="d6/ddc/namespacepyfolio_1_1stats_1afc56cb39c9c5a71f7637bb583057c342" compoundref="d3/dbe/math_2statistics_8h" startline="458" endline="460">rolling_mean</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aa8dd6ffc556adc3f76dc32645ec6b57c" compoundref="d7/d06/ratios_8h" startline="15" endline="57">pyfolio::performance::sharpe_ratio</referencedby>
        <referencedby refid="d6/ddc/namespacepyfolio_1_1stats_1a5df7d33f99e4ea05ccf659ac88173b4e" compoundref="d3/dbe/math_2statistics_8h" startline="164" endline="193">skewness</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a2b9a9772352ff85db5af94511638114f" compoundref="d7/d06/ratios_8h" startline="62" endline="111">pyfolio::performance::sortino_ratio</referencedby>
        <referencedby refid="d0/dfb/classpyfolio_1_1analytics_1_1RegimeDetector_1a774beb5ef6d09f2a32210cda918d25e7" compoundref="d2/dfc/regime__detection_8h" startline="491" endline="574">pyfolio::analytics::RegimeDetector::structural_break_detection</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1ae0eb073ae0b6cba1b6f6ed684179da8c" compoundref="d7/d06/ratios_8h" startline="256" endline="325">pyfolio::performance::treynor_ratio</referencedby>
        <referencedby refid="d6/ddc/namespacepyfolio_1_1stats_1afae76bfc655b39b929869957f17e2406" compoundref="d3/dbe/math_2statistics_8h" startline="125" endline="145">variance</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/ddc/namespacepyfolio_1_1stats_1afae76bfc655b39b929869957f17e2406" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Numeric</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::stats::variance</definition>
        <argsstring>(std::span&lt; const T &gt; data, bool sample=true)</argsstring>
        <name>variance</name>
        <qualifiedname>pyfolio::stats::variance</qualifiedname>
        <param>
          <type>std::span&lt; const T &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sample</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Calculate variance of a data series. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" line="125" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" bodystart="125" bodyend="145"/>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1a0ded7b265023215831bffb8b799ba59a" compoundref="d3/dbe/math_2statistics_8h" startline="112" endline="119">mean</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <referencedby refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a23872e94eff2db6230bdd21ab0793a12" compoundref="d6/dfe/bayesian_8h" startline="383" endline="437">pyfolio::analytics::BayesianAnalyzer::bayesian_var</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a280b239f05564bffadd2ab759aa7b668" compoundref="d3/d7e/rolling__metrics_8h" startline="140" endline="196">pyfolio::performance::calculate_rolling_beta</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a048c0615bdec480c0e1574fe8c7c1129" compoundref="d3/d7e/rolling__metrics_8h" startline="25" endline="64">pyfolio::performance::calculate_rolling_volatility</referencedby>
        <referencedby refid="dc/d21/namespacepyfolio_1_1analytics_1_1statistics_1a03d3ac2bfd1691d61e27da8e7d951c22" compoundref="d5/db2/analytics_2statistics_8h" startline="42" endline="104">pyfolio::analytics::statistics::calculate_summary</referencedby>
        <referencedby refid="d0/dfb/classpyfolio_1_1analytics_1_1RegimeDetector_1a2233d9e06edde686d5b6620a2830130a" compoundref="d2/dfc/regime__detection_8h" startline="382" endline="478">pyfolio::analytics::RegimeDetector::markov_switching_detection</referencedby>
        <referencedby refid="d6/ddc/namespacepyfolio_1_1stats_1ae9a69383818faf0de2b2e0a99d4179d9" compoundref="d3/dbe/math_2statistics_8h" startline="151" endline="158">standard_deviation</referencedby>
        <referencedby refid="d0/dfb/classpyfolio_1_1analytics_1_1RegimeDetector_1a774beb5ef6d09f2a32210cda918d25e7" compoundref="d2/dfc/regime__detection_8h" startline="491" endline="574">pyfolio::analytics::RegimeDetector::structural_break_detection</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/ddc/namespacepyfolio_1_1stats_1ae9a69383818faf0de2b2e0a99d4179d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Numeric</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::stats::standard_deviation</definition>
        <argsstring>(std::span&lt; const T &gt; data, bool sample=true)</argsstring>
        <name>standard_deviation</name>
        <qualifiedname>pyfolio::stats::standard_deviation</qualifiedname>
        <param>
          <type>std::span&lt; const T &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sample</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Calculate standard deviation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" line="151" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" bodystart="151" bodyend="158"/>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1afae76bfc655b39b929869957f17e2406" compoundref="d3/dbe/math_2statistics_8h" startline="125" endline="145">variance</references>
        <referencedby refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a0b79ac7ee0ea18fbb4280bdd518040f4" compoundref="d6/dfe/bayesian_8h" startline="228" endline="295">pyfolio::analytics::BayesianAnalyzer::analyze_performance</referencedby>
        <referencedby refid="d9/dc2/classpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1aa1a010f21d746f4b5ca020320a4ad529" compoundref="da/dd4/attribution_8h" startline="417" endline="484">pyfolio::attribution::AlphaBetaAnalysis::calculate</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1ac3157a75ae2536e6e77a7561917be03e" compoundref="df/d46/var_8h" startline="252" endline="302">pyfolio::risk::VaRCalculator::calculate_cornish_fisher_var</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a5355f08aadc5dc96a9bc0443d70eb93b" compoundref="df/d46/var_8h" startline="144" endline="199">pyfolio::risk::VaRCalculator::calculate_historical_var</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a297d2eb32efafc48a09197a2cd0dd2ab" compoundref="df/d46/var_8h" startline="307" endline="363">pyfolio::risk::VaRCalculator::calculate_monte_carlo_var</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a1c475db5eee0c7ae9a7472688f7bb8fc" compoundref="df/d46/var_8h" startline="204" endline="247">pyfolio::risk::VaRCalculator::calculate_parametric_var</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a77cf1b59bc8f7770d2f1e7df6df96c86" compoundref="d3/d7e/rolling__metrics_8h" startline="76" endline="127">pyfolio::performance::calculate_rolling_sharpe</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a187ff948556631bd1ebbe0c3c87bdb76" compoundref="d4/d73/returns_8h" startline="202" endline="220">pyfolio::performance::calculate_volatility</referencedby>
        <referencedby refid="d0/dfb/classpyfolio_1_1analytics_1_1RegimeDetector_1a1d615e210259da83d7953790e4d5c992" compoundref="d2/dfc/regime__detection_8h" startline="277" endline="325">pyfolio::analytics::RegimeDetector::classify_current_regime</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a72a6639531f459b9963884e4d4ac571e" compoundref="d7/d06/ratios_8h" startline="164" endline="212">pyfolio::performance::information_ratio</referencedby>
        <referencedby refid="d6/ddc/namespacepyfolio_1_1stats_1ae51a470f87ae34ae1f58305531f9dcf8" compoundref="d3/dbe/math_2statistics_8h" startline="199" endline="230">kurtosis</referencedby>
        <referencedby refid="d6/ddc/namespacepyfolio_1_1stats_1a372692231466b8d4d68c8682ed3f7c4c" compoundref="d3/dbe/math_2statistics_8h" startline="466" endline="468">rolling_std</referencedby>
        <referencedby refid="d6/ddc/namespacepyfolio_1_1stats_1a5df7d33f99e4ea05ccf659ac88173b4e" compoundref="d3/dbe/math_2statistics_8h" startline="164" endline="193">skewness</referencedby>
        <referencedby refid="d0/dfb/classpyfolio_1_1analytics_1_1RegimeDetector_1ab8f25fc631e3be5209e6375a9777d9d5" compoundref="d2/dfc/regime__detection_8h" startline="579" endline="647">pyfolio::analytics::RegimeDetector::volatility_regime_detection</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/ddc/namespacepyfolio_1_1stats_1a5df7d33f99e4ea05ccf659ac88173b4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Numeric</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::stats::skewness</definition>
        <argsstring>(std::span&lt; const T &gt; data)</argsstring>
        <name>skewness</name>
        <qualifiedname>pyfolio::stats::skewness</qualifiedname>
        <param>
          <type>std::span&lt; const T &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Calculate skewness. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" line="164" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" bodystart="164" bodyend="193"/>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a34e540e6594987eef203290f0a593bd2" compoundref="d3/d11/error__handling_8h" startline="19">pyfolio::DivisionByZero</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1a0ded7b265023215831bffb8b799ba59a" compoundref="d3/dbe/math_2statistics_8h" startline="112" endline="119">mean</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1ae9a69383818faf0de2b2e0a99d4179d9" compoundref="d3/dbe/math_2statistics_8h" startline="151" endline="158">standard_deviation</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1ac3157a75ae2536e6e77a7561917be03e" compoundref="df/d46/var_8h" startline="252" endline="302">pyfolio::risk::VaRCalculator::calculate_cornish_fisher_var</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a5355f08aadc5dc96a9bc0443d70eb93b" compoundref="df/d46/var_8h" startline="144" endline="199">pyfolio::risk::VaRCalculator::calculate_historical_var</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a297d2eb32efafc48a09197a2cd0dd2ab" compoundref="df/d46/var_8h" startline="307" endline="363">pyfolio::risk::VaRCalculator::calculate_monte_carlo_var</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a1c475db5eee0c7ae9a7472688f7bb8fc" compoundref="df/d46/var_8h" startline="204" endline="247">pyfolio::risk::VaRCalculator::calculate_parametric_var</referencedby>
        <referencedby refid="dc/d21/namespacepyfolio_1_1analytics_1_1statistics_1a03d3ac2bfd1691d61e27da8e7d951c22" compoundref="d5/db2/analytics_2statistics_8h" startline="42" endline="104">pyfolio::analytics::statistics::calculate_summary</referencedby>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1ad472ba19872dc8bba0dbe864dc65d0f9" compoundref="d5/db2/analytics_2statistics_8h" startline="601" endline="604">pyfolio::Statistics::skewness</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/ddc/namespacepyfolio_1_1stats_1ae51a470f87ae34ae1f58305531f9dcf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Numeric</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::stats::kurtosis</definition>
        <argsstring>(std::span&lt; const T &gt; data, bool excess=true)</argsstring>
        <name>kurtosis</name>
        <qualifiedname>pyfolio::stats::kurtosis</qualifiedname>
        <param>
          <type>std::span&lt; const T &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>excess</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Calculate kurtosis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" line="199" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" bodystart="199" bodyend="230"/>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a34e540e6594987eef203290f0a593bd2" compoundref="d3/d11/error__handling_8h" startline="19">pyfolio::DivisionByZero</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1a0ded7b265023215831bffb8b799ba59a" compoundref="d3/dbe/math_2statistics_8h" startline="112" endline="119">mean</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1ae9a69383818faf0de2b2e0a99d4179d9" compoundref="d3/dbe/math_2statistics_8h" startline="151" endline="158">standard_deviation</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1ac3157a75ae2536e6e77a7561917be03e" compoundref="df/d46/var_8h" startline="252" endline="302">pyfolio::risk::VaRCalculator::calculate_cornish_fisher_var</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a5355f08aadc5dc96a9bc0443d70eb93b" compoundref="df/d46/var_8h" startline="144" endline="199">pyfolio::risk::VaRCalculator::calculate_historical_var</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a297d2eb32efafc48a09197a2cd0dd2ab" compoundref="df/d46/var_8h" startline="307" endline="363">pyfolio::risk::VaRCalculator::calculate_monte_carlo_var</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a1c475db5eee0c7ae9a7472688f7bb8fc" compoundref="df/d46/var_8h" startline="204" endline="247">pyfolio::risk::VaRCalculator::calculate_parametric_var</referencedby>
        <referencedby refid="dc/d21/namespacepyfolio_1_1analytics_1_1statistics_1a03d3ac2bfd1691d61e27da8e7d951c22" compoundref="d5/db2/analytics_2statistics_8h" startline="42" endline="104">pyfolio::analytics::statistics::calculate_summary</referencedby>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1a2984e04c4fd9c5c0686ebc586e8499b5" compoundref="d5/db2/analytics_2statistics_8h" startline="607" endline="610">pyfolio::Statistics::kurtosis</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/ddc/namespacepyfolio_1_1stats_1ae62df134ebe0d79d73c16894c3dc364d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Numeric</type>
            <declname>T1</declname>
            <defname>T1</defname>
          </param>
          <param>
            <type>Numeric</type>
            <declname>T2</declname>
            <defname>T2</defname>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::stats::correlation</definition>
        <argsstring>(std::span&lt; const T1 &gt; x, std::span&lt; const T2 &gt; y)</argsstring>
        <name>correlation</name>
        <qualifiedname>pyfolio::stats::correlation</qualifiedname>
        <param>
          <type>std::span&lt; const T1 &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::span&lt; const T2 &gt;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Calculate correlation coefficient between two series. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" line="236" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" bodystart="236" bodyend="278"/>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a34e540e6594987eef203290f0a593bd2" compoundref="d3/d11/error__handling_8h" startline="19">pyfolio::DivisionByZero</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1a0ded7b265023215831bffb8b799ba59a" compoundref="d3/dbe/math_2statistics_8h" startline="112" endline="119">mean</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <referencedby refid="dc/d21/namespacepyfolio_1_1analytics_1_1statistics_1a8ebe063865d4f8a44de34903ced7fabc" compoundref="d5/db2/analytics_2statistics_8h" startline="187" endline="236">pyfolio::analytics::statistics::analyze_correlation</referencedby>
        <referencedby refid="d3/d3c/classpyfolio_1_1analytics_1_1MarketIndicatorsAnalyzer_1acaab80ec9422b4295fa59061cfba1f9e" compoundref="d4/d7b/market__indicators_8h" startline="364" endline="408">pyfolio::analytics::MarketIndicatorsAnalyzer::calculate_indicator_correlations</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aa7d52fa28e4c97c9de78af729f8cc761" compoundref="d3/d7e/rolling__metrics_8h" startline="207" endline="255">pyfolio::performance::calculate_rolling_correlation</referencedby>
        <referencedby refid="d6/ddc/namespacepyfolio_1_1stats_1a7dcca677ba8223bb6554f1b717bfb6f0" compoundref="d3/dbe/math_2statistics_8h" startline="474" endline="501">rolling_correlation</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1ae0eb073ae0b6cba1b6f6ed684179da8c" compoundref="d7/d06/ratios_8h" startline="256" endline="325">pyfolio::performance::treynor_ratio</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/ddc/namespacepyfolio_1_1stats_1af8d120442d5971c10a506129f562be2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Numeric</type>
            <declname>T1</declname>
            <defname>T1</defname>
          </param>
          <param>
            <type>Numeric</type>
            <declname>T2</declname>
            <defname>T2</defname>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::stats::covariance</definition>
        <argsstring>(std::span&lt; const T1 &gt; x, std::span&lt; const T2 &gt; y, bool sample=true)</argsstring>
        <name>covariance</name>
        <qualifiedname>pyfolio::stats::covariance</qualifiedname>
        <param>
          <type>std::span&lt; const T1 &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::span&lt; const T2 &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sample</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Calculate covariance between two series. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" line="284" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" bodystart="284" bodyend="314"/>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1a0ded7b265023215831bffb8b799ba59a" compoundref="d3/dbe/math_2statistics_8h" startline="112" endline="119">mean</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a280b239f05564bffadd2ab759aa7b668" compoundref="d3/d7e/rolling__metrics_8h" startline="140" endline="196">pyfolio::performance::calculate_rolling_beta</referencedby>
        <referencedby refid="d2/da5/namespacepyfolio_1_1risk_1a0fbdfe0d8229ca14ca8adb34b32f53fd" compoundref="d4/da5/factor__exposure_8h" startline="352" endline="402">pyfolio::risk::create_factor_model_from_returns</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/ddc/namespacepyfolio_1_1stats_1aea9b2c25523d93f5afb06c51f77c6f47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Numeric</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::stats::percentile</definition>
        <argsstring>(std::span&lt; const T &gt; data, double p)</argsstring>
        <name>percentile</name>
        <qualifiedname>pyfolio::stats::percentile</qualifiedname>
        <param>
          <type>std::span&lt; const T &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Calculate percentile of a data series. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" line="320" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" bodystart="320" bodyend="350"/>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <referencedby refid="d6/ddc/namespacepyfolio_1_1stats_1aaeb9f5bbec8f929f08cc73c211803257" compoundref="d3/dbe/math_2statistics_8h" startline="356" endline="358">median</referencedby>
        <referencedby refid="d6/ddc/namespacepyfolio_1_1stats_1aa0e53cbd1e3be9ff3caf6608bac7960d" compoundref="d3/dbe/math_2statistics_8h" startline="364" endline="370">quantile</referencedby>
        <referencedby refid="d6/ddc/namespacepyfolio_1_1stats_1a1f80321b9a21528dec7e6978131ee2e7" compoundref="d3/dbe/math_2statistics_8h" startline="376" endline="391">value_at_risk</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/ddc/namespacepyfolio_1_1stats_1aaeb9f5bbec8f929f08cc73c211803257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Numeric</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::stats::median</definition>
        <argsstring>(std::span&lt; const T &gt; data)</argsstring>
        <name>median</name>
        <qualifiedname>pyfolio::stats::median</qualifiedname>
        <param>
          <type>std::span&lt; const T &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Calculate median. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" line="356" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" bodystart="356" bodyend="358"/>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1aea9b2c25523d93f5afb06c51f77c6f47" compoundref="d3/dbe/math_2statistics_8h" startline="320" endline="350">percentile</references>
        <referencedby refid="d0/dfb/classpyfolio_1_1analytics_1_1RegimeDetector_1ab8f25fc631e3be5209e6375a9777d9d5" compoundref="d2/dfc/regime__detection_8h" startline="579" endline="647">pyfolio::analytics::RegimeDetector::volatility_regime_detection</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/ddc/namespacepyfolio_1_1stats_1aa0e53cbd1e3be9ff3caf6608bac7960d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Numeric</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::stats::quantile</definition>
        <argsstring>(std::span&lt; const T &gt; data, double q)</argsstring>
        <name>quantile</name>
        <qualifiedname>pyfolio::stats::quantile</qualifiedname>
        <param>
          <type>std::span&lt; const T &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>double</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Calculate quantile. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" line="364" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" bodystart="364" bodyend="370"/>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1aea9b2c25523d93f5afb06c51f77c6f47" compoundref="d3/dbe/math_2statistics_8h" startline="320" endline="350">percentile</references>
      </memberdef>
      <memberdef kind="function" id="d6/ddc/namespacepyfolio_1_1stats_1a1f80321b9a21528dec7e6978131ee2e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Numeric</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::stats::value_at_risk</definition>
        <argsstring>(std::span&lt; const T &gt; returns, double confidence_level=0.95)</argsstring>
        <name>value_at_risk</name>
        <qualifiedname>pyfolio::stats::value_at_risk</qualifiedname>
        <param>
          <type>std::span&lt; const T &gt;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>double</type>
          <declname>confidence_level</declname>
          <defval>0.95</defval>
        </param>
        <briefdescription>
<para>Calculate Value at Risk (VaR) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" line="376" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" bodystart="376" bodyend="391"/>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1aea9b2c25523d93f5afb06c51f77c6f47" compoundref="d3/dbe/math_2statistics_8h" startline="320" endline="350">percentile</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a5355f08aadc5dc96a9bc0443d70eb93b" compoundref="df/d46/var_8h" startline="144" endline="199">pyfolio::risk::VaRCalculator::calculate_historical_var</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a297d2eb32efafc48a09197a2cd0dd2ab" compoundref="df/d46/var_8h" startline="307" endline="363">pyfolio::risk::VaRCalculator::calculate_monte_carlo_var</referencedby>
        <referencedby refid="d6/ddc/namespacepyfolio_1_1stats_1a1aca034860dac7ddacbac6f9dd0b930c" compoundref="d3/dbe/math_2statistics_8h" startline="397" endline="424">conditional_value_at_risk</referencedby>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1a9ede57ac57b34082eaf024beabbc5304" compoundref="d5/db2/analytics_2statistics_8h" startline="613" endline="618">pyfolio::Statistics::value_at_risk_historical</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/ddc/namespacepyfolio_1_1stats_1a1aca034860dac7ddacbac6f9dd0b930c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Numeric</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::stats::conditional_value_at_risk</definition>
        <argsstring>(std::span&lt; const T &gt; returns, double confidence_level=0.95)</argsstring>
        <name>conditional_value_at_risk</name>
        <qualifiedname>pyfolio::stats::conditional_value_at_risk</qualifiedname>
        <param>
          <type>std::span&lt; const T &gt;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>double</type>
          <declname>confidence_level</declname>
          <defval>0.95</defval>
        </param>
        <briefdescription>
<para>Calculate Conditional Value at Risk (CVaR) / Expected Shortfall. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" line="397" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" bodystart="397" bodyend="424"/>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1a0ded7b265023215831bffb8b799ba59a" compoundref="d3/dbe/math_2statistics_8h" startline="112" endline="119">mean</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1a1f80321b9a21528dec7e6978131ee2e7" compoundref="d3/dbe/math_2statistics_8h" startline="376" endline="391">value_at_risk</references>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a5355f08aadc5dc96a9bc0443d70eb93b" compoundref="df/d46/var_8h" startline="144" endline="199">pyfolio::risk::VaRCalculator::calculate_historical_var</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a297d2eb32efafc48a09197a2cd0dd2ab" compoundref="df/d46/var_8h" startline="307" endline="363">pyfolio::risk::VaRCalculator::calculate_monte_carlo_var</referencedby>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1a9aa2d1314ebd348e3cabf7c294d4b6a3" compoundref="d5/db2/analytics_2statistics_8h" startline="621" endline="626">pyfolio::Statistics::conditional_value_at_risk</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/ddc/namespacepyfolio_1_1stats_1a2594de0b320048a4032be5bcd6965c97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>Result&lt; std::vector&lt; double &gt; &gt; pyfolio::stats::rolling_statistic</definition>
        <argsstring>(std::span&lt; const T &gt; data, size_t window_size, F &amp;&amp;func)</argsstring>
        <name>rolling_statistic</name>
        <qualifiedname>pyfolio::stats::rolling_statistic</qualifiedname>
        <param>
          <type>std::span&lt; const T &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window_size</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Calculate rolling statistics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" line="430" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" bodystart="430" bodyend="452"/>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <referencedby refid="d6/ddc/namespacepyfolio_1_1stats_1afc56cb39c9c5a71f7637bb583057c342" compoundref="d3/dbe/math_2statistics_8h" startline="458" endline="460">rolling_mean</referencedby>
        <referencedby refid="d6/ddc/namespacepyfolio_1_1stats_1a372692231466b8d4d68c8682ed3f7c4c" compoundref="d3/dbe/math_2statistics_8h" startline="466" endline="468">rolling_std</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/ddc/namespacepyfolio_1_1stats_1afc56cb39c9c5a71f7637bb583057c342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Numeric</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>Result&lt; std::vector&lt; double &gt; &gt; pyfolio::stats::rolling_mean</definition>
        <argsstring>(std::span&lt; const T &gt; data, size_t window_size)</argsstring>
        <name>rolling_mean</name>
        <qualifiedname>pyfolio::stats::rolling_mean</qualifiedname>
        <param>
          <type>std::span&lt; const T &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window_size</declname>
        </param>
        <briefdescription>
<para>Calculate rolling mean. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" line="458" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" bodystart="458" bodyend="460"/>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1a0ded7b265023215831bffb8b799ba59a" compoundref="d3/dbe/math_2statistics_8h" startline="112" endline="119">mean</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1a2594de0b320048a4032be5bcd6965c97" compoundref="d3/dbe/math_2statistics_8h" startline="430" endline="452">rolling_statistic</references>
      </memberdef>
      <memberdef kind="function" id="d6/ddc/namespacepyfolio_1_1stats_1a372692231466b8d4d68c8682ed3f7c4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Numeric</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>Result&lt; std::vector&lt; double &gt; &gt; pyfolio::stats::rolling_std</definition>
        <argsstring>(std::span&lt; const T &gt; data, size_t window_size)</argsstring>
        <name>rolling_std</name>
        <qualifiedname>pyfolio::stats::rolling_std</qualifiedname>
        <param>
          <type>std::span&lt; const T &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window_size</declname>
        </param>
        <briefdescription>
<para>Calculate rolling standard deviation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" line="466" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" bodystart="466" bodyend="468"/>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1a2594de0b320048a4032be5bcd6965c97" compoundref="d3/dbe/math_2statistics_8h" startline="430" endline="452">rolling_statistic</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1ae9a69383818faf0de2b2e0a99d4179d9" compoundref="d3/dbe/math_2statistics_8h" startline="151" endline="158">standard_deviation</references>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a8a0797d8f8603e3757181fb825c960b8" compoundref="d4/d73/returns_8h" startline="225" endline="254">pyfolio::performance::rolling_volatility</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/ddc/namespacepyfolio_1_1stats_1a7dcca677ba8223bb6554f1b717bfb6f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>Numeric</type>
            <declname>T1</declname>
            <defname>T1</defname>
          </param>
          <param>
            <type>Numeric</type>
            <declname>T2</declname>
            <defname>T2</defname>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>Result&lt; std::vector&lt; double &gt; &gt; pyfolio::stats::rolling_correlation</definition>
        <argsstring>(std::span&lt; const T1 &gt; x, std::span&lt; const T2 &gt; y, size_t window_size)</argsstring>
        <name>rolling_correlation</name>
        <qualifiedname>pyfolio::stats::rolling_correlation</qualifiedname>
        <param>
          <type>std::span&lt; const T1 &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::span&lt; const T2 &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window_size</declname>
        </param>
        <briefdescription>
<para>Calculate rolling correlation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" line="474" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" bodystart="474" bodyend="501"/>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1ae62df134ebe0d79d73c16894c3dc364d" compoundref="d3/dbe/math_2statistics_8h" startline="236" endline="278">correlation</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
      </memberdef>
      <memberdef kind="function" id="d6/ddc/namespacepyfolio_1_1stats_1a82d07561f01fdc6cb35fd5acda668960" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double pyfolio::stats::normal_cdf</definition>
        <argsstring>(double x)</argsstring>
        <name>normal_cdf</name>
        <qualifiedname>pyfolio::stats::normal_cdf</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Standard normal cumulative distribution function (CDF) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" line="506" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" bodystart="506" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="d6/ddc/namespacepyfolio_1_1stats_1a9877731394f7a80eba2f0e97a5d2a9a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double pyfolio::stats::normal_pdf</definition>
        <argsstring>(double x)</argsstring>
        <name>normal_pdf</name>
        <qualifiedname>pyfolio::stats::normal_pdf</qualifiedname>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Standard normal probability density function (PDF) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" line="513" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" bodystart="513" bodyend="516"/>
        <references refid="d3/dbe/math_2statistics_8h_1ae71449b1cc6e6250b91f539153a7a0d3" compoundref="d3/dbe/math_2statistics_8h" startline="12">M_PI</references>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1ac3157a75ae2536e6e77a7561917be03e" compoundref="df/d46/var_8h" startline="252" endline="302">pyfolio::risk::VaRCalculator::calculate_cornish_fisher_var</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a1c475db5eee0c7ae9a7472688f7bb8fc" compoundref="df/d46/var_8h" startline="204" endline="247">pyfolio::risk::VaRCalculator::calculate_parametric_var</referencedby>
      </memberdef>
      <memberdef kind="function" id="d6/ddc/namespacepyfolio_1_1stats_1a2cc3b474187a9bd3989c41a8d88c79dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double pyfolio::stats::normal_ppf</definition>
        <argsstring>(double p)</argsstring>
        <name>normal_ppf</name>
        <qualifiedname>pyfolio::stats::normal_ppf</qualifiedname>
        <param>
          <type>double</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Standard normal percent point function (inverse CDF) Using Beasley-Springer-Moro algorithm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" line="522" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" bodystart="522" bodyend="565"/>
        <referencedby refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a23872e94eff2db6230bdd21ab0793a12" compoundref="d6/dfe/bayesian_8h" startline="383" endline="437">pyfolio::analytics::BayesianAnalyzer::bayesian_var</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1ac3157a75ae2536e6e77a7561917be03e" compoundref="df/d46/var_8h" startline="252" endline="302">pyfolio::risk::VaRCalculator::calculate_cornish_fisher_var</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a1c475db5eee0c7ae9a7472688f7bb8fc" compoundref="df/d46/var_8h" startline="204" endline="247">pyfolio::risk::VaRCalculator::calculate_parametric_var</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/statistics.h" line="15" column="1"/>
  </compounddef>
</doxygen>
