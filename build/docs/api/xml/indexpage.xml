<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>Pyfolio C++ - High-Performance Financial Analysis Library</title>
    <tableofcontents>
      <tocsect>
        <name>Overview</name>
        <reference>indexpage_1autotoc_md139</reference>
        <tableofcontents>
          <tocsect>
            <name>Key Features</name>
            <reference>indexpage_1autotoc_md140</reference>
          </tocsect>
        </tableofcontents>
      </tocsect>
      <tocsect>
        <name>Quick Start</name>
        <reference>indexpage_1autotoc_md141</reference>
        <tableofcontents>
          <tocsect>
            <name>Installation</name>
            <reference>indexpage_1autotoc_md142</reference>
          </tocsect>
          <tocsect>
            <name>Basic Usage</name>
            <reference>indexpage_1autotoc_md143</reference>
          </tocsect>
        </tableofcontents>
      </tocsect>
      <tocsect>
        <name>Architecture Overview</name>
        <reference>indexpage_1autotoc_md144</reference>
        <tableofcontents>
          <tocsect>
            <name>Core Components</name>
            <reference>indexpage_1autotoc_md145</reference>
          </tocsect>
          <tocsect>
            <name>Design Philosophy</name>
            <reference>indexpage_1autotoc_md146</reference>
          </tocsect>
        </tableofcontents>
      </tocsect>
      <tocsect>
        <name>Performance Benchmarks</name>
        <reference>indexpage_1autotoc_md147</reference>
        <tableofcontents>
          <tocsect>
            <name>Speed Comparisons (vs Python pyfolio)</name>
            <reference>indexpage_1autotoc_md148</reference>
          </tocsect>
          <tocsect>
            <name>Memory Efficiency</name>
            <reference>indexpage_1autotoc_md149</reference>
          </tocsect>
        </tableofcontents>
      </tocsect>
      <tocsect>
        <name>API Documentation</name>
        <reference>indexpage_1autotoc_md150</reference>
        <tableofcontents>
          <tocsect>
            <name>Core Modules</name>
            <reference>indexpage_1autotoc_md151</reference>
            <tableofcontents>
              <tocsect>
                <name>@ref pyfolio::core &quot;Core Types and Utilities&quot;</name>
                <reference>indexpage_1autotoc_md152</reference>
              </tocsect>
              <tocsect>
                <name>@ref pyfolio::performance &quot;Performance Analysis&quot;</name>
                <reference>indexpage_1autotoc_md153</reference>
              </tocsect>
              <tocsect>
                <name>@ref pyfolio::risk &quot;Risk Analysis&quot;</name>
                <reference>indexpage_1autotoc_md154</reference>
              </tocsect>
              <tocsect>
                <name>@ref pyfolio::attribution &quot;Performance Attribution&quot;</name>
                <reference>indexpage_1autotoc_md155</reference>
              </tocsect>
              <tocsect>
                <name>@ref pyfolio::visualization &quot;Visualization&quot;</name>
                <reference>indexpage_1autotoc_md156</reference>
              </tocsect>
            </tableofcontents>
          </tocsect>
          <tocsect>
            <name>Advanced Features</name>
            <reference>indexpage_1autotoc_md157</reference>
            <tableofcontents>
              <tocsect>
                <name>@ref pyfolio::parallel &quot;Parallel Processing&quot;</name>
                <reference>indexpage_1autotoc_md158</reference>
              </tocsect>
              <tocsect>
                <name>@ref pyfolio::simd &quot;SIMD Optimization&quot;</name>
                <reference>indexpage_1autotoc_md159</reference>
              </tocsect>
              <tocsect>
                <name>@ref pyfolio::memory &quot;Memory Management&quot;</name>
                <reference>indexpage_1autotoc_md160</reference>
              </tocsect>
            </tableofcontents>
          </tocsect>
        </tableofcontents>
      </tocsect>
      <tocsect>
        <name>Examples and Tutorials</name>
        <reference>indexpage_1autotoc_md161</reference>
        <tableofcontents>
          <tocsect>
            <name>Basic Portfolio Analysis</name>
            <reference>indexpage_1autotoc_md162</reference>
          </tocsect>
          <tocsect>
            <name>Advanced Analysis</name>
            <reference>indexpage_1autotoc_md163</reference>
          </tocsect>
          <tocsect>
            <name>Integration Examples</name>
            <reference>indexpage_1autotoc_md164</reference>
          </tocsect>
        </tableofcontents>
      </tocsect>
      <tocsect>
        <name>Best Practices</name>
        <reference>indexpage_1autotoc_md165</reference>
        <tableofcontents>
          <tocsect>
            <name>Performance Optimization</name>
            <reference>indexpage_1autotoc_md166</reference>
          </tocsect>
          <tocsect>
            <name>Error Handling</name>
            <reference>indexpage_1autotoc_md167</reference>
          </tocsect>
          <tocsect>
            <name>Memory Management</name>
            <reference>indexpage_1autotoc_md168</reference>
          </tocsect>
        </tableofcontents>
      </tocsect>
      <tocsect>
        <name>Building and Testing</name>
        <reference>indexpage_1autotoc_md169</reference>
        <tableofcontents>
          <tocsect>
            <name>Build Options</name>
            <reference>indexpage_1autotoc_md170</reference>
          </tocsect>
          <tocsect>
            <name>Running Tests</name>
            <reference>indexpage_1autotoc_md171</reference>
          </tocsect>
        </tableofcontents>
      </tocsect>
      <tocsect>
        <name>Integration Guide</name>
        <reference>indexpage_1autotoc_md172</reference>
        <tableofcontents>
          <tocsect>
            <name>CMake Integration</name>
            <reference>indexpage_1autotoc_md173</reference>
          </tocsect>
          <tocsect>
            <name>Python Bindings</name>
            <reference>indexpage_1autotoc_md174</reference>
          </tocsect>
        </tableofcontents>
      </tocsect>
      <tocsect>
        <name>Contributing</name>
        <reference>indexpage_1autotoc_md175</reference>
        <tableofcontents>
          <tocsect>
            <name>Development Setup</name>
            <reference>indexpage_1autotoc_md176</reference>
          </tocsect>
        </tableofcontents>
      </tocsect>
      <tocsect>
        <name>License</name>
        <reference>indexpage_1autotoc_md177</reference>
      </tocsect>
      <tocsect>
        <name>Support</name>
        <reference>indexpage_1autotoc_md178</reference>
      </tocsect>
    </tableofcontents>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="index_1mainpage"/></para>
<sect1 id="index_1autotoc_md139">
<title>Overview</title><para><bold>Pyfolio C++</bold> is a modern, high-performance C++20 financial portfolio analysis library designed for quantitative finance applications. It provides a comprehensive suite of tools for analyzing portfolio performance, risk metrics, and market behavior with enterprise-grade performance and reliability.</para>
<sect2 id="index_1autotoc_md140">
<title>Key Features</title><para><itemizedlist>
<listitem><para>üöÄ <bold>High Performance</bold>: 10-100x faster than Python equivalents with SIMD optimization</para>
</listitem><listitem><para>üîí <bold>Type Safety</bold>: Modern C++20 with concepts, strong types, and robust error handling</para>
</listitem><listitem><para>üìä <bold>Comprehensive Analytics</bold>: Complete suite of financial metrics and analysis tools</para>
</listitem><listitem><para>üßµ <bold>Parallel Processing</bold>: Multi-threaded computations for large datasets</para>
</listitem><listitem><para>üîÑ <bold>Real-time Capable</bold>: Optimized for high-frequency trading applications</para>
</listitem><listitem><para>üìà <bold>Advanced Visualization</bold>: Interactive charts with Plotly.js integration</para>
</listitem><listitem><para>üåê <bold>REST API</bold>: Built-in web server for remote access and integration</para>
</listitem></itemizedlist>
</para>
</sect2>
</sect1>
<sect1 id="index_1autotoc_md141">
<title>Quick Start</title><sect2 id="index_1autotoc_md142">
<title>Installation</title><para><programlisting filename=".bash"><codeline><highlight class="normal">git<sp/>clone<sp/>https://github.com/your-org/pyfolio_cpp.git</highlight></codeline>
<codeline><highlight class="normal">cd<sp/>pyfolio_cpp</highlight></codeline>
<codeline><highlight class="normal">mkdir<sp/>build<sp/>&amp;&amp;<sp/>cd<sp/>build</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>-DCMAKE_BUILD_TYPE=Release<sp/>..</highlight></codeline>
<codeline><highlight class="normal">make<sp/>-j$(nproc)</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="index_1autotoc_md143">
<title>Basic Usage</title><para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="d3/d30/pyfolio_8h" kindref="compound">pyfolio/pyfolio.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="d7/df8/namespacepyfolio" kindref="compound">pyfolio</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>time<sp/>series<sp/>of<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;DateTime&gt;<sp/>dates<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d6/d4f/classpyfolio_1_1DateTime_1adfc972d8ea84c03f9a6d9eb9e661b6cd" kindref="member">DateTime::parse</ref>(</highlight><highlight class="stringliteral">&quot;2024-01-01&quot;</highlight><highlight class="normal">).value(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d6/d4f/classpyfolio_1_1DateTime_1adfc972d8ea84c03f9a6d9eb9e661b6cd" kindref="member">DateTime::parse</ref>(</highlight><highlight class="stringliteral">&quot;2024-01-02&quot;</highlight><highlight class="normal">).value(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d6/d4f/classpyfolio_1_1DateTime_1adfc972d8ea84c03f9a6d9eb9e661b6cd" kindref="member">DateTime::parse</ref>(</highlight><highlight class="stringliteral">&quot;2024-01-03&quot;</highlight><highlight class="normal">).value()</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;double&gt;<sp/>returns<sp/>=<sp/>{0.01,<sp/>-0.02,<sp/>0.015};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries&lt;Return&gt;</ref><sp/>return_series(dates,<sp/>returns);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calculate<sp/>performance<sp/>metrics</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sharpe<sp/>=<sp/><ref refid="d8/dd9/namespacepyfolio_1_1performance_1aa8dd6ffc556adc3f76dc32645ec6b57c" kindref="member">performance::sharpe_ratio</ref>(return_series).value();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>max_dd<sp/>=<sp/><ref refid="d8/dd9/namespacepyfolio_1_1performance_1a919af12e2600a7e77163a20bf6f98609" kindref="member">performance::max_drawdown</ref>(return_series).value();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>volatility<sp/>=<sp/>performance::volatility(return_series).value();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Sharpe<sp/>Ratio:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sharpe<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Max<sp/>Drawdown:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>max_dd<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Volatility:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>volatility<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="index_1autotoc_md144">
<title>Architecture Overview</title><sect2 id="index_1autotoc_md145">
<title>Core Components</title><para><table rows="7" cols="3"><row>
<entry thead="yes"><para>Module   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Performance    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">pyfolio::TimeSeries</ref>   </para>
</entry><entry thead="no"><para>High-performance time series container   </para>
</entry><entry thead="no"><para>SIMD-optimized    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="d8/dd9/namespacepyfolio_1_1performance" kindref="compound">pyfolio::performance</ref>   </para>
</entry><entry thead="no"><para>Portfolio performance metrics   </para>
</entry><entry thead="no"><para>Cached calculations    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="d2/da5/namespacepyfolio_1_1risk" kindref="compound">pyfolio::risk</ref>   </para>
</entry><entry thead="no"><para>Risk analysis and VaR calculations   </para>
</entry><entry thead="no"><para>Parallel processing    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="dc/dc6/namespacepyfolio_1_1attribution" kindref="compound">pyfolio::attribution</ref>   </para>
</entry><entry thead="no"><para>Performance attribution analysis   </para>
</entry><entry thead="no"><para>Multi-threaded    </para>
</entry></row>
<row>
<entry thead="no"><para>pyfolio::regime   </para>
</entry><entry thead="no"><para>Market regime detection   </para>
</entry><entry thead="no"><para>ML algorithms    </para>
</entry></row>
<row>
<entry thead="no"><para><ref refid="da/d6c/namespacepyfolio_1_1visualization" kindref="compound">pyfolio::visualization</ref>   </para>
</entry><entry thead="no"><para>Interactive chart generation   </para>
</entry><entry thead="no"><para>Web-based   </para>
</entry></row>
</table>
</para>
</sect2>
<sect2 id="index_1autotoc_md146">
<title>Design Philosophy</title><para><orderedlist>
<listitem><para><bold>Performance First</bold>: Every component is optimized for speed</para>
</listitem><listitem><para><bold>Type Safety</bold>: Leverages C++20 concepts and strong types</para>
</listitem><listitem><para><bold>Error Handling</bold>: Uses <computeroutput>Result&lt;T&gt;</computeroutput> monad pattern for robust error management</para>
</listitem><listitem><para><bold>Memory Efficiency</bold>: Custom allocators for high-frequency operations</para>
</listitem><listitem><para><bold>Scalability</bold>: Designed for both small portfolios and institutional-scale data</para>
</listitem></orderedlist>
</para>
</sect2>
</sect1>
<sect1 id="index_1autotoc_md147">
<title>Performance Benchmarks</title><sect2 id="index_1autotoc_md148">
<title>Speed Comparisons (vs Python pyfolio)</title><para><table rows="6" cols="4"><row>
<entry thead="yes"><para>Operation   </para>
</entry><entry thead="yes"><para>Python pyfolio   </para>
</entry><entry thead="yes"><para>Pyfolio C++   </para>
</entry><entry thead="yes"><para>Speedup    </para>
</entry></row>
<row>
<entry thead="no"><para>Sharpe Ratio (1M points)   </para>
</entry><entry thead="no"><para>245ms   </para>
</entry><entry thead="no"><para>2.1ms   </para>
</entry><entry thead="no"><para><bold>117x</bold>    </para>
</entry></row>
<row>
<entry thead="no"><para>Max Drawdown (1M points)   </para>
</entry><entry thead="no"><para>890ms   </para>
</entry><entry thead="no"><para>8.3ms   </para>
</entry><entry thead="no"><para><bold>107x</bold>    </para>
</entry></row>
<row>
<entry thead="no"><para>Rolling Volatility   </para>
</entry><entry thead="no"><para>1.2s   </para>
</entry><entry thead="no"><para>15ms   </para>
</entry><entry thead="no"><para><bold>80x</bold>    </para>
</entry></row>
<row>
<entry thead="no"><para>Portfolio Attribution   </para>
</entry><entry thead="no"><para>2.1s   </para>
</entry><entry thead="no"><para>45ms   </para>
</entry><entry thead="no"><para><bold>47x</bold>    </para>
</entry></row>
<row>
<entry thead="no"><para>Risk Decomposition   </para>
</entry><entry thead="no"><para>3.4s   </para>
</entry><entry thead="no"><para>78ms   </para>
</entry><entry thead="no"><para><bold>44x</bold>   </para>
</entry></row>
</table>
</para>
</sect2>
<sect2 id="index_1autotoc_md149">
<title>Memory Efficiency</title><para><itemizedlist>
<listitem><para><bold>50% less memory</bold> usage compared to equivalent Python operations</para>
</listitem><listitem><para><bold>Zero-copy operations</bold> where possible</para>
</listitem><listitem><para><bold>Memory pool allocators</bold> for high-frequency trading scenarios</para>
</listitem></itemizedlist>
</para>
</sect2>
</sect1>
<sect1 id="index_1autotoc_md150">
<title>API Documentation</title><sect2 id="index_1autotoc_md151">
<title>Core Modules</title><sect3 id="index_1autotoc_md152">
<title>Core Types and Utilities</title><para><itemizedlist>
<listitem><para><bold>TimeSeries</bold>: High-performance time series container</para>
</listitem><listitem><para><bold>DateTime</bold>: Financial calendar and date handling</para>
</listitem><listitem><para><bold>Types</bold>: Strong types for financial values (Price, Return, Volume)</para>
</listitem><listitem><para><bold>Error Handling</bold>: Robust <computeroutput>Result&lt;T&gt;</computeroutput> error management</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="index_1autotoc_md153">
<title><ref refid="d8/dd9/namespacepyfolio_1_1performance" kindref="compound">Performance Analysis</ref></title><para><itemizedlist>
<listitem><para><bold>Metrics</bold>: Sharpe ratio, Sortino ratio, Information ratio</para>
</listitem><listitem><para><bold>Returns</bold>: Simple, logarithmic, and excess returns</para>
</listitem><listitem><para><bold>Drawdown</bold>: Maximum drawdown, underwater plots</para>
</listitem><listitem><para><bold>Rolling</bold>: Rolling metrics with O(n) complexity</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="index_1autotoc_md154">
<title><ref refid="d2/da5/namespacepyfolio_1_1risk" kindref="compound">Risk Analysis</ref></title><para><itemizedlist>
<listitem><para><bold>VaR/CVaR</bold>: Value at Risk and Conditional VaR</para>
</listitem><listitem><para><bold>Risk Decomposition</bold>: Factor-based risk attribution</para>
</listitem><listitem><para><bold>Stress Testing</bold>: Monte Carlo and historical scenarios</para>
</listitem><listitem><para><bold>Regime Detection</bold>: Market regime identification</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="index_1autotoc_md155">
<title><ref refid="dc/dc6/namespacepyfolio_1_1attribution" kindref="compound">Performance Attribution</ref></title><para><itemizedlist>
<listitem><para><bold>Brinson Attribution</bold>: Sector and security selection effects</para>
</listitem><listitem><para><bold>Factor Attribution</bold>: Multi-factor performance decomposition</para>
</listitem><listitem><para><bold>Transaction Costs</bold>: Impact analysis and attribution</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="index_1autotoc_md156">
<title><ref refid="da/d6c/namespacepyfolio_1_1visualization" kindref="compound">Visualization</ref></title><para><itemizedlist>
<listitem><para><bold>Interactive Charts</bold>: Plotly.js integration</para>
</listitem><listitem><para><bold>Tear Sheets</bold>: Comprehensive performance reports</para>
</listitem><listitem><para><bold>Real-time Dashboards</bold>: Live performance monitoring</para>
</listitem></itemizedlist>
</para>
</sect3>
</sect2>
<sect2 id="index_1autotoc_md157">
<title>Advanced Features</title><sect3 id="index_1autotoc_md158">
<title><ref refid="d9/d20/namespacepyfolio_1_1parallel" kindref="compound">Parallel Processing</ref></title><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>Enable<sp/>parallel<sp/>processing<sp/>for<sp/>large<sp/>datasets</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>results<sp/>=<sp/>pyfolio::parallel::compute_metrics(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>large_portfolio,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::thread::hardware_concurrency()</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="index_1autotoc_md159">
<title><ref refid="d0/d60/namespacepyfolio_1_1simd" kindref="compound">SIMD Optimization</ref></title><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>Automatic<sp/>SIMD<sp/>acceleration<sp/>for<sp/>supported<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1adf282fb835cd51a3c8e1258b2137f0bf" kindref="member">correlation</ref><sp/>=<sp/>series1.correlation(series2).value();<sp/></highlight><highlight class="comment">//<sp/>Uses<sp/>AVX2<sp/>if<sp/>available</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="index_1autotoc_md160">
<title><ref refid="da/db2/namespacepyfolio_1_1memory" kindref="compound">Memory Management</ref></title><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>Custom<sp/>allocators<sp/>for<sp/>high-frequency<sp/>scenarios</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">pyfolio::PoolAllocator&lt;Transaction&gt;<sp/>allocator(1000000);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="dc/d4e/namespacepyfolio_1_1transactions" kindref="compound">transactions</ref><sp/>=<sp/>allocator.allocate_vector&lt;<ref refid="d5/d11/structpyfolio_1_1Transaction" kindref="compound">Transaction</ref>&gt;();</highlight></codeline>
</programlisting></para>
</sect3>
</sect2>
</sect1>
<sect1 id="index_1autotoc_md161">
<title>Examples and Tutorials</title><sect2 id="index_1autotoc_md162">
<title>Basic Portfolio Analysis</title><para><itemizedlist>
<listitem><para><ref refid="d3/d6a/basic__example_8cpp" kindref="compound">Basic Example</ref> - Getting started with portfolio analysis</para>
</listitem><listitem><para>Performance Metrics - Calculate key performance indicators</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="index_1autotoc_md163">
<title>Advanced Analysis</title><para><itemizedlist>
<listitem><para><ref refid="d8/d00/attribution__example_8cpp" kindref="compound">Attribution Analysis</ref> - Performance attribution workflows</para>
</listitem><listitem><para>Risk Analysis - VaR and stress testing</para>
</listitem><listitem><para>Regime Detection - Market regime identification</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="index_1autotoc_md164">
<title>Integration Examples</title><para><itemizedlist>
<listitem><para><ref refid="d1/d43/rest__api__example_8cpp" kindref="compound">REST API</ref> - Web service integration</para>
</listitem><listitem><para>Real-time Analysis - Live data processing</para>
</listitem></itemizedlist>
</para>
</sect2>
</sect1>
<sect1 id="index_1autotoc_md165">
<title>Best Practices</title><sect2 id="index_1autotoc_md166">
<title>Performance Optimization</title><para><orderedlist>
<listitem><para><bold>Use SIMD-optimized operations</bold> for large datasets</para>
</listitem><listitem><para><bold>Enable parallel processing</bold> with <computeroutput>std::execution::par</computeroutput></para>
</listitem><listitem><para><bold>Leverage caching</bold> for repeated calculations</para>
</listitem><listitem><para><bold>Use memory pools</bold> for high-frequency operations</para>
</listitem></orderedlist>
</para>
</sect2>
<sect2 id="index_1autotoc_md167">
<title>Error Handling</title><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>Always<sp/>check<sp/>Result&lt;T&gt;<sp/>return<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>calculate_sharpe_ratio(returns);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.is_error())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>result.error().message<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sharpe<sp/>=<sp/>result.value();</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="index_1autotoc_md168">
<title>Memory Management</title><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>Reserve<sp/>capacity<sp/>for<sp/>known<sp/>data<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries&lt;Return&gt;</ref><sp/>returns;</highlight></codeline>
<codeline><highlight class="normal">returns.<ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0299648a8469a9a82dfa15f9f035a704" kindref="member">reserve</ref>(expected_size);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>move<sp/>semantics<sp/>for<sp/>large<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>processed<sp/>=<sp/>std::move(raw_data).process();</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="index_1autotoc_md169">
<title>Building and Testing</title><sect2 id="index_1autotoc_md170">
<title>Build Options</title><para><programlisting filename=".bash"><codeline><highlight class="normal">#<sp/>Release<sp/>build<sp/>with<sp/>optimizations</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>-DCMAKE_BUILD_TYPE=Release<sp/>-DENABLE_SIMD=ON<sp/>..</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Debug<sp/>build<sp/>with<sp/>coverage</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>-DCMAKE_BUILD_TYPE=Debug<sp/>-DENABLE_COVERAGE=ON<sp/>..</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Build<sp/>with<sp/>static<sp/>analysis</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>-DENABLE_CLANG_TIDY=ON<sp/>-DENABLE_CPPCHECK=ON<sp/>..</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="index_1autotoc_md171">
<title>Running Tests</title><para><programlisting filename=".bash"><codeline><highlight class="normal">#<sp/>Run<sp/>all<sp/>tests</highlight></codeline>
<codeline><highlight class="normal">make<sp/>test</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Run<sp/>specific<sp/>test<sp/>suite</highlight></codeline>
<codeline><highlight class="normal">./tests/performance_tests</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Generate<sp/>coverage<sp/>report</highlight></codeline>
<codeline><highlight class="normal">make<sp/>coverage</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="index_1autotoc_md172">
<title>Integration Guide</title><sect2 id="index_1autotoc_md173">
<title>CMake Integration</title><para><programlisting filename=".cmake"><codeline><highlight class="normal">find_package(pyfolio_cpp<sp/>REQUIRED)</highlight></codeline>
<codeline><highlight class="normal">target_link_libraries(your_target<sp/>PRIVATE<sp/>pyfolio_cpp::pyfolio_cpp)</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="index_1autotoc_md174">
<title>Python Bindings</title><para><programlisting filename=".py"><codeline><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pyfolio_cpp</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>Use<sp/>C++<sp/>performance<sp/>with<sp/>Python<sp/>convenience</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">portfolio<sp/>=<sp/>pyfolio_cpp.Portfolio(returns,<sp/>positions)</highlight></codeline>
<codeline><highlight class="normal">metrics<sp/>=<sp/>portfolio.calculate_metrics()</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="index_1autotoc_md175">
<title>Contributing</title><para>We welcome contributions! Please see our Contributing Guide for details.</para>
<sect2 id="index_1autotoc_md176">
<title>Development Setup</title><para><orderedlist>
<listitem><para>Fork the repository</para>
</listitem><listitem><para>Create a feature branch</para>
</listitem><listitem><para>Make your changes with tests</para>
</listitem><listitem><para>Run static analysis: <computeroutput>make static-analysis</computeroutput></para>
</listitem><listitem><para>Submit a pull request</para>
</listitem></orderedlist>
</para>
</sect2>
</sect1>
<sect1 id="index_1autotoc_md177">
<title>License</title><para>This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.</para>
</sect1>
<sect1 id="index_1autotoc_md178">
<title>Support</title><para><itemizedlist>
<listitem><para><bold>Documentation</bold>: <ulink url="https://pyfolio-cpp.readthedocs.io">https://pyfolio-cpp.readthedocs.io</ulink></para>
</listitem><listitem><para><bold>Issues</bold>: <ulink url="https://github.com/your-org/pyfolio_cpp/issues">https://github.com/your-org/pyfolio_cpp/issues</ulink></para>
</listitem><listitem><para><bold>Discussions</bold>: <ulink url="https://github.com/your-org/pyfolio_cpp/discussions">https://github.com/your-org/pyfolio_cpp/discussions</ulink></para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<para><emphasis>Pyfolio C++ - Bringing institutional-grade performance to quantitative finance.</emphasis> </para>
</sect1>
    </detaileddescription>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/docs/mainpage.md"/>
  </compounddef>
</doxygen>
