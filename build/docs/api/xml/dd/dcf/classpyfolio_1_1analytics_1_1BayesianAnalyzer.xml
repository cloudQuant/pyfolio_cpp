<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer" kind="class" language="C++" prot="public">
    <compoundname>pyfolio::analytics::BayesianAnalyzer</compoundname>
    <includes refid="d6/dfe/bayesian_8h" local="no">bayesian.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a2546cc389de50dc103d21ebd2989b72b" prot="private" static="no" mutable="yes">
        <type>std::mt19937</type>
        <definition>std::mt19937 pyfolio::analytics::BayesianAnalyzer::rng_</definition>
        <argsstring></argsstring>
        <name>rng_</name>
        <qualifiedname>pyfolio::analytics::BayesianAnalyzer::rng_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" line="208" column="26" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a7a528be29922586a30d19bbca358dd0a" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t pyfolio::analytics::BayesianAnalyzer::num_samples_</definition>
        <argsstring></argsstring>
        <name>num_samples_</name>
        <qualifiedname>pyfolio::analytics::BayesianAnalyzer::num_samples_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" line="209" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1add92012997083edb88b59643f874cdcf" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t pyfolio::analytics::BayesianAnalyzer::burn_in_</definition>
        <argsstring></argsstring>
        <name>burn_in_</name>
        <qualifiedname>pyfolio::analytics::BayesianAnalyzer::burn_in_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" line="210" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" bodystart="210" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1aaa9423345a6434ab0ebb29b745fb9a5c" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pyfolio::analytics::BayesianAnalyzer::BayesianAnalyzer</definition>
        <argsstring>(size_t num_samples=10000, size_t burn_in=1000)</argsstring>
        <name>BayesianAnalyzer</name>
        <qualifiedname>pyfolio::analytics::BayesianAnalyzer::BayesianAnalyzer</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>num_samples</declname>
          <defval>10000</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>burn_in</declname>
          <defval>1000</defval>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" line="216" column="14" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" bodystart="216" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a3f0a989d9b257534f1ee77f454f66823" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pyfolio::analytics::BayesianAnalyzer::BayesianAnalyzer</definition>
        <argsstring>(uint32_t seed, size_t num_samples=10000, size_t burn_in=1000)</argsstring>
        <name>BayesianAnalyzer</name>
        <qualifiedname>pyfolio::analytics::BayesianAnalyzer::BayesianAnalyzer</qualifiedname>
        <param>
          <type>uint32_t</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_samples</declname>
          <defval>10000</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>burn_in</declname>
          <defval>1000</defval>
        </param>
        <briefdescription>
<para>Constructor with fixed seed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" line="222" column="5" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" bodystart="222" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a0b79ac7ee0ea18fbb4280bdd518040f4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="de/d6d/structpyfolio_1_1analytics_1_1BayesianPerformanceResult" kindref="compound">BayesianPerformanceResult</ref> &gt;</type>
        <definition>Result&lt; BayesianPerformanceResult &gt; pyfolio::analytics::BayesianAnalyzer::analyze_performance</definition>
        <argsstring>(const ReturnSeries &amp;portfolio_returns, const ReturnSeries &amp;benchmark_returns, const PriorDistribution &amp;alpha_prior=PriorDistribution::normal(0.0, 0.01), const PriorDistribution &amp;beta_prior=PriorDistribution::normal(1.0, 0.25), double risk_free_rate=0.02) const</argsstring>
        <name>analyze_performance</name>
        <qualifiedname>pyfolio::analytics::BayesianAnalyzer::analyze_performance</qualifiedname>
        <param>
          <type>const <ref refid="d2/d10/namespacepyfolio_1_1analytics_1abb18ff1f67db5a5ced7beb8e9873092d" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>portfolio_returns</declname>
        </param>
        <param>
          <type>const <ref refid="d2/d10/namespacepyfolio_1_1analytics_1abb18ff1f67db5a5ced7beb8e9873092d" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>benchmark_returns</declname>
        </param>
        <param>
          <type>const <ref refid="da/d0f/structpyfolio_1_1analytics_1_1PriorDistribution" kindref="compound">PriorDistribution</ref> &amp;</type>
          <declname>alpha_prior</declname>
          <defval><ref refid="da/d0f/structpyfolio_1_1analytics_1_1PriorDistribution_1aa6427e598ec8848c1e993569667eeece" kindref="member">PriorDistribution::normal</ref>(0.0, 0.01)</defval>
        </param>
        <param>
          <type>const <ref refid="da/d0f/structpyfolio_1_1analytics_1_1PriorDistribution" kindref="compound">PriorDistribution</ref> &amp;</type>
          <declname>beta_prior</declname>
          <defval><ref refid="da/d0f/structpyfolio_1_1analytics_1_1PriorDistribution_1aa6427e598ec8848c1e993569667eeece" kindref="member">PriorDistribution::normal</ref>(1.0, 0.25)</defval>
        </param>
        <param>
          <type>double</type>
          <declname>risk_free_rate</declname>
          <defval>0.02</defval>
        </param>
        <briefdescription>
<para>Bayesian alpha and beta analysis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" line="228" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" bodystart="228" bodyend="295"/>
        <references refid="de/d6d/structpyfolio_1_1analytics_1_1BayesianPerformanceResult_1a6d2a1b01e691d748325800171dc04ca4" compoundref="d6/dfe/bayesian_8h" startline="75">pyfolio::analytics::BayesianPerformanceResult::alpha_samples</references>
        <references refid="de/d6d/structpyfolio_1_1analytics_1_1BayesianPerformanceResult_1a2f3c2875b4014030847e47ec777a4eba" compoundref="d6/dfe/bayesian_8h" startline="76">pyfolio::analytics::BayesianPerformanceResult::beta_samples</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1a0ded7b265023215831bffb8b799ba59a" compoundref="d3/dbe/math_2statistics_8h" startline="112" endline="119">pyfolio::stats::mean</references>
        <references refid="da/d0f/structpyfolio_1_1analytics_1_1PriorDistribution_1aa6427e598ec8848c1e993569667eeece" compoundref="d6/dfe/bayesian_8h" startline="49" endline="55">pyfolio::analytics::PriorDistribution::normal</references>
        <references refid="de/d6d/structpyfolio_1_1analytics_1_1BayesianPerformanceResult_1a0ef07e65c4a890e81168d48a337c323e" compoundref="d6/dfe/bayesian_8h" startline="77">pyfolio::analytics::BayesianPerformanceResult::sharpe_samples</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1ae9a69383818faf0de2b2e0a99d4179d9" compoundref="d3/dbe/math_2statistics_8h" startline="151" endline="158">pyfolio::stats::standard_deviation</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" compoundref="d8/d51/time__series_8h" startline="125" endline="125">pyfolio::TimeSeries&lt; T &gt;::values</references>
        <references refid="de/d6d/structpyfolio_1_1analytics_1_1BayesianPerformanceResult_1ad89afadf6dae3ceb2aa5a7496b4f06b0" compoundref="d6/dfe/bayesian_8h" startline="78">pyfolio::analytics::BayesianPerformanceResult::volatility_samples</references>
        <referencedby refid="da/d7c/bayesian__analysis__example_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="da/d7c/bayesian__analysis__example_8cpp" startline="8" endline="457">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a20ed44cf22769cfb68ec394a8f95d47d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d4/d98/structpyfolio_1_1analytics_1_1BayesianRegimeResult" kindref="compound">BayesianRegimeResult</ref> &gt;</type>
        <definition>Result&lt; BayesianRegimeResult &gt; pyfolio::analytics::BayesianAnalyzer::detect_regimes</definition>
        <argsstring>(const ReturnSeries &amp;returns, size_t num_regimes=2) const</argsstring>
        <name>detect_regimes</name>
        <qualifiedname>pyfolio::analytics::BayesianAnalyzer::detect_regimes</qualifiedname>
        <param>
          <type>const <ref refid="d2/d10/namespacepyfolio_1_1analytics_1abb18ff1f67db5a5ced7beb8e9873092d" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_regimes</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
<para>Bayesian regime detection using Hidden Markov Model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" line="300" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" bodystart="300" bodyend="330"/>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="d4/d98/structpyfolio_1_1analytics_1_1BayesianRegimeResult_1a2e0d3fc8867b921ffd13a111557f0e87" compoundref="d6/dfe/bayesian_8h" startline="144">pyfolio::analytics::BayesianRegimeResult::num_regimes</references>
        <references refid="d4/d98/structpyfolio_1_1analytics_1_1BayesianRegimeResult_1aa0d076850e452f5d91d14984efdb63d4" compoundref="d6/dfe/bayesian_8h" startline="142">pyfolio::analytics::BayesianRegimeResult::regime_means</references>
        <references refid="d4/d98/structpyfolio_1_1analytics_1_1BayesianRegimeResult_1a14149cf83190f1266a33aa5a2576252c" compoundref="d6/dfe/bayesian_8h" startline="140">pyfolio::analytics::BayesianRegimeResult::regime_probabilities</references>
        <references refid="d4/d98/structpyfolio_1_1analytics_1_1BayesianRegimeResult_1a9746b9cbaeb4205dd034bcf6750ea68a" compoundref="d6/dfe/bayesian_8h" startline="139">pyfolio::analytics::BayesianRegimeResult::regime_sequence</references>
        <references refid="d4/d98/structpyfolio_1_1analytics_1_1BayesianRegimeResult_1a6a23dc8b3c15c3b0b237500556f80155" compoundref="d6/dfe/bayesian_8h" startline="143">pyfolio::analytics::BayesianRegimeResult::regime_volatilities</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d4/d98/structpyfolio_1_1analytics_1_1BayesianRegimeResult_1acf22327d3828db461c8a2e795cd8a4ac" compoundref="d6/dfe/bayesian_8h" startline="141">pyfolio::analytics::BayesianRegimeResult::transition_probabilities</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" compoundref="d8/d51/time__series_8h" startline="125" endline="125">pyfolio::TimeSeries&lt; T &gt;::values</references>
      </memberdef>
      <memberdef kind="function" id="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a7eceaad081c1c0baebefd3ffa8762459" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d3/db4/structpyfolio_1_1analytics_1_1BayesianForecastResult" kindref="compound">BayesianForecastResult</ref> &gt;</type>
        <definition>Result&lt; BayesianForecastResult &gt; pyfolio::analytics::BayesianAnalyzer::forecast_returns</definition>
        <argsstring>(const ReturnSeries &amp;returns, size_t forecast_horizon=21, const PriorDistribution &amp;volatility_prior=PriorDistribution::normal(0.15, 0.05)) const</argsstring>
        <name>forecast_returns</name>
        <qualifiedname>pyfolio::analytics::BayesianAnalyzer::forecast_returns</qualifiedname>
        <param>
          <type>const <ref refid="d2/d10/namespacepyfolio_1_1analytics_1abb18ff1f67db5a5ced7beb8e9873092d" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>forecast_horizon</declname>
          <defval>21</defval>
        </param>
        <param>
          <type>const <ref refid="da/d0f/structpyfolio_1_1analytics_1_1PriorDistribution" kindref="compound">PriorDistribution</ref> &amp;</type>
          <declname>volatility_prior</declname>
          <defval><ref refid="da/d0f/structpyfolio_1_1analytics_1_1PriorDistribution_1aa6427e598ec8848c1e993569667eeece" kindref="member">PriorDistribution::normal</ref>(0.15, 0.05)</defval>
        </param>
        <briefdescription>
<para>Bayesian forecasting with uncertainty quantification. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" line="335" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" bodystart="335" bodyend="378"/>
        <references refid="d6/d4f/classpyfolio_1_1DateTime_1a42e5f9cb95823fcd9470be79a65fe8a6" compoundref="de/d1b/datetime_8h" startline="244" endline="244">pyfolio::DateTime::add_days</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d3/db4/structpyfolio_1_1analytics_1_1BayesianForecastResult_1a3697364717be63ed3b22f732e8b504b4" compoundref="d6/dfe/bayesian_8h" startline="179">pyfolio::analytics::BayesianForecastResult::forecast_dates</references>
        <references refid="d3/db4/structpyfolio_1_1analytics_1_1BayesianForecastResult_1a6cb0f7c032bb9b3e76f14d9cafe644e6" compoundref="d6/dfe/bayesian_8h" startline="176">pyfolio::analytics::BayesianForecastResult::forecast_lower_95</references>
        <references refid="d3/db4/structpyfolio_1_1analytics_1_1BayesianForecastResult_1ae239293d24a4bc0e28280b1b8f5af38c" compoundref="d6/dfe/bayesian_8h" startline="177">pyfolio::analytics::BayesianForecastResult::forecast_upper_95</references>
        <references refid="d3/db4/structpyfolio_1_1analytics_1_1BayesianForecastResult_1acd17dfe20da84b5851be996eef5fbed3" compoundref="d6/dfe/bayesian_8h" startline="178">pyfolio::analytics::BayesianForecastResult::forecast_volatility</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="d3/db4/structpyfolio_1_1analytics_1_1BayesianForecastResult_1ae9a509f0b06543adba5cbeba3f01febd" compoundref="d6/dfe/bayesian_8h" startline="181">pyfolio::analytics::BayesianForecastResult::model_confidence</references>
        <references refid="da/d0f/structpyfolio_1_1analytics_1_1PriorDistribution_1aa6427e598ec8848c1e993569667eeece" compoundref="d6/dfe/bayesian_8h" startline="49" endline="55">pyfolio::analytics::PriorDistribution::normal</references>
        <references refid="d3/db4/structpyfolio_1_1analytics_1_1BayesianForecastResult_1a4322d955b4fc4637632b7adafd52842a" compoundref="d6/dfe/bayesian_8h" startline="175">pyfolio::analytics::BayesianForecastResult::return_forecasts</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0374bbc62bd808749ac476b3af4b0ead" compoundref="d8/d51/time__series_8h" startline="124" endline="124">pyfolio::TimeSeries&lt; T &gt;::timestamps</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" compoundref="d8/d51/time__series_8h" startline="125" endline="125">pyfolio::TimeSeries&lt; T &gt;::values</references>
        <referencedby refid="da/d7c/bayesian__analysis__example_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="da/d7c/bayesian__analysis__example_8cpp" startline="8" endline="457">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a23872e94eff2db6230bdd21ab0793a12" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; std::pair&lt; double, double &gt; &gt;</type>
        <definition>Result&lt; std::pair&lt; double, double &gt; &gt; pyfolio::analytics::BayesianAnalyzer::bayesian_var</definition>
        <argsstring>(const ReturnSeries &amp;returns, double confidence_level=0.95) const</argsstring>
        <name>bayesian_var</name>
        <qualifiedname>pyfolio::analytics::BayesianAnalyzer::bayesian_var</qualifiedname>
        <param>
          <type>const <ref refid="d2/d10/namespacepyfolio_1_1analytics_1abb18ff1f67db5a5ced7beb8e9873092d" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>double</type>
          <declname>confidence_level</declname>
          <defval>0.95</defval>
        </param>
        <briefdescription>
<para>Calculate Value at Risk with Bayesian uncertainty. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" line="383" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" bodystart="383" bodyend="437"/>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9aacbb30bd92a04a43bc1ea560dac5c241" compoundref="d3/d11/error__handling_8h" startline="26">pyfolio::CalculationError</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1a0ded7b265023215831bffb8b799ba59a" compoundref="d3/dbe/math_2statistics_8h" startline="112" endline="119">pyfolio::stats::mean</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1a2cc3b474187a9bd3989c41a8d88c79dc" compoundref="d3/dbe/math_2statistics_8h" startline="522" endline="565">pyfolio::stats::normal_ppf</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" compoundref="d8/d51/time__series_8h" startline="125" endline="125">pyfolio::TimeSeries&lt; T &gt;::values</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1afae76bfc655b39b929869957f17e2406" compoundref="d3/dbe/math_2statistics_8h" startline="125" endline="145">pyfolio::stats::variance</references>
        <referencedby refid="da/d7c/bayesian__analysis__example_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="da/d7c/bayesian__analysis__example_8cpp" startline="8" endline="457">main</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a91cbececf4dc0f0634336bd46545758a" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="de/d6d/structpyfolio_1_1analytics_1_1BayesianPerformanceResult" kindref="compound">BayesianPerformanceResult</ref> &gt;</type>
        <definition>Result&lt; BayesianPerformanceResult &gt; pyfolio::analytics::BayesianAnalyzer::mcmc_alpha_beta_sampling</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;portfolio_returns, const std::vector&lt; double &gt; &amp;benchmark_returns, const PriorDistribution &amp;alpha_prior, const PriorDistribution &amp;beta_prior) const</argsstring>
        <name>mcmc_alpha_beta_sampling</name>
        <qualifiedname>pyfolio::analytics::BayesianAnalyzer::mcmc_alpha_beta_sampling</qualifiedname>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>portfolio_returns</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>benchmark_returns</declname>
        </param>
        <param>
          <type>const <ref refid="da/d0f/structpyfolio_1_1analytics_1_1PriorDistribution" kindref="compound">PriorDistribution</ref> &amp;</type>
          <declname>alpha_prior</declname>
        </param>
        <param>
          <type>const <ref refid="da/d0f/structpyfolio_1_1analytics_1_1PriorDistribution" kindref="compound">PriorDistribution</ref> &amp;</type>
          <declname>beta_prior</declname>
        </param>
        <briefdescription>
<para>MCMC sampling for alpha and beta parameters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" line="443" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" bodystart="443" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a6a5a106c963ddf18df4c465d9fc27dc7" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d4/d98/structpyfolio_1_1analytics_1_1BayesianRegimeResult" kindref="compound">BayesianRegimeResult</ref> &gt;</type>
        <definition>Result&lt; BayesianRegimeResult &gt; pyfolio::analytics::BayesianAnalyzer::estimate_hmm_parameters</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;returns, size_t num_regimes) const</argsstring>
        <name>estimate_hmm_parameters</name>
        <qualifiedname>pyfolio::analytics::BayesianAnalyzer::estimate_hmm_parameters</qualifiedname>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_regimes</declname>
        </param>
        <briefdescription>
<para>Estimate HMM parameters using EM algorithm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" line="528" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" bodystart="528" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a174c89c50ffdccfbcdf3d59ece401b15" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d3/db4/structpyfolio_1_1analytics_1_1BayesianForecastResult" kindref="compound">BayesianForecastResult</ref> &gt;</type>
        <definition>Result&lt; BayesianForecastResult &gt; pyfolio::analytics::BayesianAnalyzer::bayesian_ar_forecast</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;returns, size_t forecast_horizon, const PriorDistribution &amp;volatility_prior) const</argsstring>
        <name>bayesian_ar_forecast</name>
        <qualifiedname>pyfolio::analytics::BayesianAnalyzer::bayesian_ar_forecast</qualifiedname>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>forecast_horizon</declname>
        </param>
        <param>
          <type>const <ref refid="da/d0f/structpyfolio_1_1analytics_1_1PriorDistribution" kindref="compound">PriorDistribution</ref> &amp;</type>
          <declname>volatility_prior</declname>
        </param>
        <briefdescription>
<para>Bayesian AR(1) forecasting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" line="597" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" bodystart="597" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a49fe0f34beb135c564e05b0b3060ec20" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::analytics::BayesianAnalyzer::calculate_summary_statistics</definition>
        <argsstring>(BayesianPerformanceResult &amp;result) const</argsstring>
        <name>calculate_summary_statistics</name>
        <qualifiedname>pyfolio::analytics::BayesianAnalyzer::calculate_summary_statistics</qualifiedname>
        <param>
          <type><ref refid="de/d6d/structpyfolio_1_1analytics_1_1BayesianPerformanceResult" kindref="compound">BayesianPerformanceResult</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Calculate summary statistics from MCMC samples. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" line="668" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" bodystart="668" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a222f14048afd77d7036d9add5f5f2dd4" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double pyfolio::analytics::BayesianAnalyzer::estimate_ar_coefficient</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;x, const std::vector&lt; double &gt; &amp;y) const</argsstring>
        <name>estimate_ar_coefficient</name>
        <qualifiedname>pyfolio::analytics::BayesianAnalyzer::estimate_ar_coefficient</qualifiedname>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Estimate AR(1) coefficient using Bayesian regression. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" line="734" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" bodystart="734" bodyend="748"/>
      </memberdef>
      <memberdef kind="function" id="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1ab9832bfda5e22448ec2b7db9fc8c5a18" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double pyfolio::analytics::BayesianAnalyzer::estimate_residual_volatility</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;x, const std::vector&lt; double &gt; &amp;y, double phi) const</argsstring>
        <name>estimate_residual_volatility</name>
        <qualifiedname>pyfolio::analytics::BayesianAnalyzer::estimate_residual_volatility</qualifiedname>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <briefdescription>
<para>Estimate residual volatility. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" line="753" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" bodystart="753" bodyend="764"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Bayesian performance analyzer. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" line="206" column="1" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" bodystart="206" bodyend="765"/>
    <listofallmembers>
      <member refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a0b79ac7ee0ea18fbb4280bdd518040f4" prot="public" virt="non-virtual"><scope>pyfolio::analytics::BayesianAnalyzer</scope><name>analyze_performance</name></member>
      <member refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a174c89c50ffdccfbcdf3d59ece401b15" prot="private" virt="non-virtual"><scope>pyfolio::analytics::BayesianAnalyzer</scope><name>bayesian_ar_forecast</name></member>
      <member refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a23872e94eff2db6230bdd21ab0793a12" prot="public" virt="non-virtual"><scope>pyfolio::analytics::BayesianAnalyzer</scope><name>bayesian_var</name></member>
      <member refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1aaa9423345a6434ab0ebb29b745fb9a5c" prot="public" virt="non-virtual"><scope>pyfolio::analytics::BayesianAnalyzer</scope><name>BayesianAnalyzer</name></member>
      <member refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a3f0a989d9b257534f1ee77f454f66823" prot="public" virt="non-virtual"><scope>pyfolio::analytics::BayesianAnalyzer</scope><name>BayesianAnalyzer</name></member>
      <member refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1add92012997083edb88b59643f874cdcf" prot="private" virt="non-virtual"><scope>pyfolio::analytics::BayesianAnalyzer</scope><name>burn_in_</name></member>
      <member refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a49fe0f34beb135c564e05b0b3060ec20" prot="private" virt="non-virtual"><scope>pyfolio::analytics::BayesianAnalyzer</scope><name>calculate_summary_statistics</name></member>
      <member refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a20ed44cf22769cfb68ec394a8f95d47d" prot="public" virt="non-virtual"><scope>pyfolio::analytics::BayesianAnalyzer</scope><name>detect_regimes</name></member>
      <member refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a222f14048afd77d7036d9add5f5f2dd4" prot="private" virt="non-virtual"><scope>pyfolio::analytics::BayesianAnalyzer</scope><name>estimate_ar_coefficient</name></member>
      <member refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a6a5a106c963ddf18df4c465d9fc27dc7" prot="private" virt="non-virtual"><scope>pyfolio::analytics::BayesianAnalyzer</scope><name>estimate_hmm_parameters</name></member>
      <member refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1ab9832bfda5e22448ec2b7db9fc8c5a18" prot="private" virt="non-virtual"><scope>pyfolio::analytics::BayesianAnalyzer</scope><name>estimate_residual_volatility</name></member>
      <member refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a7eceaad081c1c0baebefd3ffa8762459" prot="public" virt="non-virtual"><scope>pyfolio::analytics::BayesianAnalyzer</scope><name>forecast_returns</name></member>
      <member refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a91cbececf4dc0f0634336bd46545758a" prot="private" virt="non-virtual"><scope>pyfolio::analytics::BayesianAnalyzer</scope><name>mcmc_alpha_beta_sampling</name></member>
      <member refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a7a528be29922586a30d19bbca358dd0a" prot="private" virt="non-virtual"><scope>pyfolio::analytics::BayesianAnalyzer</scope><name>num_samples_</name></member>
      <member refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a2546cc389de50dc103d21ebd2989b72b" prot="private" virt="non-virtual"><scope>pyfolio::analytics::BayesianAnalyzer</scope><name>rng_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
