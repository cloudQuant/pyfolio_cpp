<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite" kind="class" language="C++" prot="public">
    <compoundname>pyfolio::analytics::ParallelPerformanceAnalysisSuite</compoundname>
    <basecompoundref refid="dd/d26/classpyfolio_1_1analytics_1_1PerformanceAnalysisSuite" prot="public" virt="non-virtual">pyfolio::analytics::PerformanceAnalysisSuite</basecompoundref>
    <includes refid="dd/d71/parallel__performance__suite_8h" local="no">parallel_performance_suite.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite_1ac22076f0f34ad1ac11833e60c480fe4a" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms" kindref="compound">parallel::ParallelAlgorithms</ref> &gt;</type>
        <definition>std::unique_ptr&lt;parallel::ParallelAlgorithms&gt; pyfolio::analytics::ParallelPerformanceAnalysisSuite::parallel_algo_</definition>
        <argsstring></argsstring>
        <name>parallel_algo_</name>
        <qualifiedname>pyfolio::analytics::ParallelPerformanceAnalysisSuite::parallel_algo_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/parallel_performance_suite.h" line="26" column="21" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/parallel_performance_suite.h" bodystart="26" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite_1a256e3da16fbe1502c0fd7c87a06dee61" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; void &gt;</type>
        <definition>Result&lt; void &gt; pyfolio::analytics::ParallelPerformanceAnalysisSuite::calculate_risk_metrics_parallel</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns, AnalysisReport &amp;report) const</argsstring>
        <name>calculate_risk_metrics_parallel</name>
        <qualifiedname>pyfolio::analytics::ParallelPerformanceAnalysisSuite::calculate_risk_metrics_parallel</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type><ref refid="d4/dd2/structpyfolio_1_1analytics_1_1AnalysisReport" kindref="compound">AnalysisReport</ref> &amp;</type>
          <declname>report</declname>
        </param>
        <briefdescription>
<para>Calculate risk metrics using parallel processing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/parallel_performance_suite.h" line="32" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/parallel_performance_suite.h" bodystart="32" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite_1a1232e7865222475edf8ed85354ecc46f" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; void &gt;</type>
        <definition>Result&lt; void &gt; pyfolio::analytics::ParallelPerformanceAnalysisSuite::calculate_rolling_metrics_parallel</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns, AnalysisReport &amp;report) const</argsstring>
        <name>calculate_rolling_metrics_parallel</name>
        <qualifiedname>pyfolio::analytics::ParallelPerformanceAnalysisSuite::calculate_rolling_metrics_parallel</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type><ref refid="d4/dd2/structpyfolio_1_1analytics_1_1AnalysisReport" kindref="compound">AnalysisReport</ref> &amp;</type>
          <declname>report</declname>
        </param>
        <briefdescription>
<para>Calculate rolling metrics using parallel processing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/parallel_performance_suite.h" line="92" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/parallel_performance_suite.h" bodystart="92" bodyend="147"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite_1aafe8a53960915841b45d38261a2c71a1" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pyfolio::analytics::ParallelPerformanceAnalysisSuite::ParallelPerformanceAnalysisSuite</definition>
        <argsstring>(AnalysisConfig config={})</argsstring>
        <name>ParallelPerformanceAnalysisSuite</name>
        <qualifiedname>pyfolio::analytics::ParallelPerformanceAnalysisSuite::ParallelPerformanceAnalysisSuite</qualifiedname>
        <param>
          <type><ref refid="de/d28/structpyfolio_1_1analytics_1_1AnalysisConfig" kindref="compound">AnalysisConfig</ref></type>
          <declname>config</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/parallel_performance_suite.h" line="150" column="14" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/parallel_performance_suite.h" bodystart="150" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite_1a7c39e9da13b225d9186ed324da6514d5" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d4/dd2/structpyfolio_1_1analytics_1_1AnalysisReport" kindref="compound">AnalysisReport</ref> &gt;</type>
        <definition>Result&lt; AnalysisReport &gt; pyfolio::analytics::ParallelPerformanceAnalysisSuite::analyze_performance_parallel</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns, const std::optional&lt; TimeSeries&lt; T &gt; &gt; &amp;benchmark=std::nullopt) const</argsstring>
        <name>analyze_performance_parallel</name>
        <qualifiedname>pyfolio::analytics::ParallelPerformanceAnalysisSuite::analyze_performance_parallel</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>const std::optional&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt; &amp;</type>
          <declname>benchmark</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
<para>Perform comprehensive performance analysis with parallel processing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/parallel_performance_suite.h" line="158" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/parallel_performance_suite.h" bodystart="158" bodyend="334"/>
        <references refid="d4/dd2/structpyfolio_1_1analytics_1_1AnalysisReport_1a589288c7e12f07f9f3867fa281cd9c20" compoundref="df/de7/performance__analysis__suite_8h" startline="75">pyfolio::analytics::AnalysisReport::alpha</references>
        <references refid="d4/dd2/structpyfolio_1_1analytics_1_1AnalysisReport_1a38e681a3c837376a89f3a7ffa37760f6" compoundref="df/de7/performance__analysis__suite_8h" startline="85">pyfolio::analytics::AnalysisReport::analysis_timestamp</references>
        <references refid="dd/d26/classpyfolio_1_1analytics_1_1PerformanceAnalysisSuite_1a2a89a113f35927f33af40fa23ed44a70" compoundref="df/de7/performance__analysis__suite_8h" startline="255" endline="403">pyfolio::analytics::PerformanceAnalysisSuite::analyze_performance</references>
        <references refid="d4/dd2/structpyfolio_1_1analytics_1_1AnalysisReport_1a057108c0f1de79cfc11d1fce00a10bbc" compoundref="df/de7/performance__analysis__suite_8h" startline="55">pyfolio::analytics::AnalysisReport::annual_return</references>
        <references refid="d4/dd2/structpyfolio_1_1analytics_1_1AnalysisReport_1ace446e8c5677012b2678dca187af9063" compoundref="df/de7/performance__analysis__suite_8h" startline="56">pyfolio::analytics::AnalysisReport::annual_volatility</references>
        <references refid="d4/dd2/structpyfolio_1_1analytics_1_1AnalysisReport_1a2fa5e7ed544be1661d558ad1edcd4da5" compoundref="df/de7/performance__analysis__suite_8h" startline="76">pyfolio::analytics::AnalysisReport::beta</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9aacbb30bd92a04a43bc1ea560dac5c241" compoundref="d3/d11/error__handling_8h" startline="26">pyfolio::CalculationError</references>
        <references refid="d4/dd2/structpyfolio_1_1analytics_1_1AnalysisReport_1a1793e83fd50dd8746042ea5ba00d5080" compoundref="df/de7/performance__analysis__suite_8h" startline="60">pyfolio::analytics::AnalysisReport::calmar_ratio</references>
        <references refid="d4/dd2/structpyfolio_1_1analytics_1_1AnalysisReport_1aea6e909bb3b3a4eec443c64b9df0efe3" compoundref="df/de7/performance__analysis__suite_8h" startline="84">pyfolio::analytics::AnalysisReport::computation_time</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1aabcf1a46e463e3a482632eacb0265394" compoundref="d8/d51/time__series_8h" startline="499" endline="510">pyfolio::TimeSeries&lt; T &gt;::cumsum</references>
        <references refid="d4/dd2/structpyfolio_1_1analytics_1_1AnalysisReport_1a60b8f792068fea150e521f59ae5c2ef4" compoundref="df/de7/performance__analysis__suite_8h" startline="65">pyfolio::analytics::AnalysisReport::downside_deviation</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="dd/d26/classpyfolio_1_1analytics_1_1PerformanceAnalysisSuite_1a9198fb2924ab75dae4386bab25d050a0" compoundref="df/de7/performance__analysis__suite_8h" startline="444" endline="444">pyfolio::analytics::PerformanceAnalysisSuite::get_config</references>
        <references refid="d4/dd2/structpyfolio_1_1analytics_1_1AnalysisReport_1a51e8da4f046598e3a1782461458592fb" compoundref="df/de7/performance__analysis__suite_8h" startline="77">pyfolio::analytics::AnalysisReport::information_ratio</references>
        <references refid="d4/dd2/structpyfolio_1_1analytics_1_1AnalysisReport_1af034819dd16f0dfa7f6f893a489ae4b6" compoundref="df/de7/performance__analysis__suite_8h" startline="67">pyfolio::analytics::AnalysisReport::kurtosis</references>
        <references refid="d4/dd2/structpyfolio_1_1analytics_1_1AnalysisReport_1ac4146ae68810aea2e6cf56ee444065bd" compoundref="df/de7/performance__analysis__suite_8h" startline="59">pyfolio::analytics::AnalysisReport::max_drawdown</references>
        <references refid="de/d28/structpyfolio_1_1analytics_1_1AnalysisConfig_1a75cbc2db9abac72761a7ae676afe855e" compoundref="df/de7/performance__analysis__suite_8h" startline="35">pyfolio::analytics::AnalysisConfig::periods_per_year</references>
        <references refid="de/d28/structpyfolio_1_1analytics_1_1AnalysisConfig_1ac0ad7d8dbdc4d399145de3c57a44f7ee" compoundref="df/de7/performance__analysis__suite_8h" startline="34">pyfolio::analytics::AnalysisConfig::risk_free_rate</references>
        <references refid="d4/dd2/structpyfolio_1_1analytics_1_1AnalysisReport_1a2a5d413c1c804eb72b4be7d22c520cbd" compoundref="df/de7/performance__analysis__suite_8h" startline="57">pyfolio::analytics::AnalysisReport::sharpe_ratio</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="d4/dd2/structpyfolio_1_1analytics_1_1AnalysisReport_1a1b30866872455b4c679ec6a363766a60" compoundref="df/de7/performance__analysis__suite_8h" startline="66">pyfolio::analytics::AnalysisReport::skewness</references>
        <references refid="d4/dd2/structpyfolio_1_1analytics_1_1AnalysisReport_1a4a5a77ef63033f3419685398489e8b5a" compoundref="df/de7/performance__analysis__suite_8h" startline="58">pyfolio::analytics::AnalysisReport::sortino_ratio</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0374bbc62bd808749ac476b3af4b0ead" compoundref="d8/d51/time__series_8h" startline="124" endline="124">pyfolio::TimeSeries&lt; T &gt;::timestamps</references>
        <references refid="d4/dd2/structpyfolio_1_1analytics_1_1AnalysisReport_1a015c2dffe6e3ed1db704f3115ca1fcd3" compoundref="df/de7/performance__analysis__suite_8h" startline="54">pyfolio::analytics::AnalysisReport::total_return</references>
        <references refid="d4/dd2/structpyfolio_1_1analytics_1_1AnalysisReport_1ac408b3c65b0e589794b742200d5532cb" compoundref="df/de7/performance__analysis__suite_8h" startline="78">pyfolio::analytics::AnalysisReport::tracking_error</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" compoundref="d8/d51/time__series_8h" startline="125" endline="125">pyfolio::TimeSeries&lt; T &gt;::values</references>
        <referencedby refid="d2/d10/namespacepyfolio_1_1analytics_1accf2e8a2179a292346940eef67adfa3c" compoundref="dd/d71/parallel__performance__suite_8h" startline="361" endline="364">pyfolio::analytics::analyze_portfolio_performance_parallel</referencedby>
      </memberdef>
      <memberdef kind="function" id="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite_1aca25081e97592337b65af38c858e1a03" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d7/dd3/structpyfolio_1_1parallel_1_1ParallelAlgorithms_1_1PerformanceStats" kindref="compound">parallel::ParallelAlgorithms::PerformanceStats</ref></type>
        <definition>parallel::ParallelAlgorithms::PerformanceStats pyfolio::analytics::ParallelPerformanceAnalysisSuite::get_parallel_stats</definition>
        <argsstring>() const</argsstring>
        <name>get_parallel_stats</name>
        <qualifiedname>pyfolio::analytics::ParallelPerformanceAnalysisSuite::get_parallel_stats</qualifiedname>
        <briefdescription>
<para>Get parallel processing statistics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/parallel_performance_suite.h" line="339" column="52" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/parallel_performance_suite.h" bodystart="339" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite_1abb2304530ba3490f6ce5bb6f6e56353f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::analytics::ParallelPerformanceAnalysisSuite::update_parallel_config</definition>
        <argsstring>(const parallel::ParallelConfig &amp;config)</argsstring>
        <name>update_parallel_config</name>
        <qualifiedname>pyfolio::analytics::ParallelPerformanceAnalysisSuite::update_parallel_config</qualifiedname>
        <param>
          <type>const <ref refid="d3/de7/structpyfolio_1_1parallel_1_1ParallelConfig" kindref="compound">parallel::ParallelConfig</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Update parallel processing configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/parallel_performance_suite.h" line="346" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/parallel_performance_suite.h" bodystart="346" bodyend="346"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Enhanced performance analysis suite with parallel processing. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>pyfolio::analytics::ParallelPerformanceAnalysisSuite</label>
        <link refid="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>pyfolio::analytics::PerformanceAnalysisSuite</label>
        <link refid="dd/d26/classpyfolio_1_1analytics_1_1PerformanceAnalysisSuite"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>pyfolio::analytics::ParallelPerformanceAnalysisSuite</label>
        <link refid="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>pyfolio::analytics::PerformanceAnalysisSuite</label>
        <link refid="dd/d26/classpyfolio_1_1analytics_1_1PerformanceAnalysisSuite"/>
      </node>
    </collaborationgraph>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/parallel_performance_suite.h" line="24" column="1" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/parallel_performance_suite.h" bodystart="24" bodyend="347"/>
    <listofallmembers>
      <member refid="dd/d26/classpyfolio_1_1analytics_1_1PerformanceAnalysisSuite_1a2a89a113f35927f33af40fa23ed44a70" prot="public" virt="non-virtual"><scope>pyfolio::analytics::ParallelPerformanceAnalysisSuite</scope><name>analyze_performance</name></member>
      <member refid="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite_1a7c39e9da13b225d9186ed324da6514d5" prot="public" virt="non-virtual"><scope>pyfolio::analytics::ParallelPerformanceAnalysisSuite</scope><name>analyze_performance_parallel</name></member>
      <member refid="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite_1a256e3da16fbe1502c0fd7c87a06dee61" prot="private" virt="non-virtual"><scope>pyfolio::analytics::ParallelPerformanceAnalysisSuite</scope><name>calculate_risk_metrics_parallel</name></member>
      <member refid="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite_1a1232e7865222475edf8ed85354ecc46f" prot="private" virt="non-virtual"><scope>pyfolio::analytics::ParallelPerformanceAnalysisSuite</scope><name>calculate_rolling_metrics_parallel</name></member>
      <member refid="dd/d26/classpyfolio_1_1analytics_1_1PerformanceAnalysisSuite_1a5eafaa5c5624cb9b40b16bbe944489a6" prot="public" virt="non-virtual"><scope>pyfolio::analytics::ParallelPerformanceAnalysisSuite</scope><name>clear_cache</name></member>
      <member refid="dd/d26/classpyfolio_1_1analytics_1_1PerformanceAnalysisSuite_1a9198fb2924ab75dae4386bab25d050a0" prot="public" virt="non-virtual"><scope>pyfolio::analytics::ParallelPerformanceAnalysisSuite</scope><name>get_config</name></member>
      <member refid="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite_1aca25081e97592337b65af38c858e1a03" prot="public" virt="non-virtual"><scope>pyfolio::analytics::ParallelPerformanceAnalysisSuite</scope><name>get_parallel_stats</name></member>
      <member refid="dd/d26/classpyfolio_1_1analytics_1_1PerformanceAnalysisSuite_1a6b9722354403aaccf8862317429bb32a" prot="public" virt="non-virtual"><scope>pyfolio::analytics::ParallelPerformanceAnalysisSuite</scope><name>get_performance_stats</name></member>
      <member refid="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite_1ac22076f0f34ad1ac11833e60c480fe4a" prot="private" virt="non-virtual"><scope>pyfolio::analytics::ParallelPerformanceAnalysisSuite</scope><name>parallel_algo_</name></member>
      <member refid="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite_1aafe8a53960915841b45d38261a2c71a1" prot="public" virt="non-virtual"><scope>pyfolio::analytics::ParallelPerformanceAnalysisSuite</scope><name>ParallelPerformanceAnalysisSuite</name></member>
      <member refid="dd/d26/classpyfolio_1_1analytics_1_1PerformanceAnalysisSuite_1ac5e98814fe2f4a8f987a8c300f09e495" prot="public" virt="non-virtual"><scope>pyfolio::analytics::ParallelPerformanceAnalysisSuite</scope><name>PerformanceAnalysisSuite</name></member>
      <member refid="dd/d26/classpyfolio_1_1analytics_1_1PerformanceAnalysisSuite_1ab34d166961357e7173775299f6994bcf" prot="public" virt="non-virtual"><scope>pyfolio::analytics::ParallelPerformanceAnalysisSuite</scope><name>update_config</name></member>
      <member refid="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite_1abb2304530ba3490f6ce5bb6f6e56353f" prot="public" virt="non-virtual"><scope>pyfolio::analytics::ParallelPerformanceAnalysisSuite</scope><name>update_parallel_config</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
