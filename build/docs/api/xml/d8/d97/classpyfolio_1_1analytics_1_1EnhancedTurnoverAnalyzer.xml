<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer" kind="class" language="C++" prot="public">
    <compoundname>pyfolio::analytics::EnhancedTurnoverAnalyzer</compoundname>
    <includes refid="d2/d40/turnover__enhanced_8h" local="no">turnover_enhanced.h</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1afdd574756c49ab5f3f55f6a52e77d8b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d0/d81/structpyfolio_1_1analytics_1_1TurnoverResult" kindref="compound">TurnoverResult</ref> &gt;</type>
        <definition>Result&lt; TurnoverResult &gt; pyfolio::analytics::EnhancedTurnoverAnalyzer::calculate_enhanced_turnover</definition>
        <argsstring>(const PositionSeries &amp;positions, const TransactionSeries &amp;transactions={}, TurnoverDenominator denominator=TurnoverDenominator::AGB)</argsstring>
        <name>calculate_enhanced_turnover</name>
        <qualifiedname>pyfolio::analytics::EnhancedTurnoverAnalyzer::calculate_enhanced_turnover</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a8b225a867ab95979be89a7d9e8519eb1" kindref="member">PositionSeries</ref> &amp;</type>
          <declname>positions</declname>
        </param>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a4b722d754217aac2549ef3ef5fa23fff" kindref="member">TransactionSeries</ref> &amp;</type>
          <declname>transactions</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type><ref refid="d2/d10/namespacepyfolio_1_1analytics_1a2b5238b2314b78cf335d70a61f483623" kindref="member">TurnoverDenominator</ref></type>
          <declname>denominator</declname>
          <defval><ref refid="d2/d10/namespacepyfolio_1_1analytics_1a2b5238b2314b78cf335d70a61f483623ac4ae8cdfc66973e53c8a1970545a3e2b" kindref="member">TurnoverDenominator::AGB</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate enhanced turnover with multiple denominator options Replicates and extends Python pyfolio.txn.get_turnover()</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>positions</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d6/df6/structpyfolio_1_1Position" kindref="compound">Position</ref> series over time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transactions</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d5/d11/structpyfolio_1_1Transaction" kindref="compound">Transaction</ref> series (optional for validation) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>denominator</parametername>
</parameternamelist>
<parameterdescription>
<para>Method for calculating turnover denominator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Comprehensive turnover analysis result </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/turnover_enhanced.h" line="69" column="12"/>
      </memberdef>
      <memberdef kind="function" id="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1a456bf14aeddaeeff3b9d5624b6ae6210" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d2/d63/structpyfolio_1_1analytics_1_1AdvancedTurnoverMetrics" kindref="compound">AdvancedTurnoverMetrics</ref> &gt;</type>
        <definition>Result&lt; AdvancedTurnoverMetrics &gt; pyfolio::analytics::EnhancedTurnoverAnalyzer::calculate_comprehensive_turnover_metrics</definition>
        <argsstring>(const PositionSeries &amp;positions, const TransactionSeries &amp;transactions, const TimeSeries&lt; Return &gt; &amp;returns={})</argsstring>
        <name>calculate_comprehensive_turnover_metrics</name>
        <qualifiedname>pyfolio::analytics::EnhancedTurnoverAnalyzer::calculate_comprehensive_turnover_metrics</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a8b225a867ab95979be89a7d9e8519eb1" kindref="member">PositionSeries</ref> &amp;</type>
          <declname>positions</declname>
        </param>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a4b722d754217aac2549ef3ef5fa23fff" kindref="member">TransactionSeries</ref> &amp;</type>
          <declname>transactions</declname>
        </param>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> &gt; &amp;</type>
          <declname>returns</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate comprehensive turnover metrics including decomposition</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>positions</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d6/df6/structpyfolio_1_1Position" kindref="compound">Position</ref> series </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transactions</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d5/d11/structpyfolio_1_1Transaction" kindref="compound">Transaction</ref> series </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>returns</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> series for correlation analysis </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Advanced turnover metrics </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/turnover_enhanced.h" line="81" column="12"/>
      </memberdef>
      <memberdef kind="function" id="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1afec255239ef5e1d2e1ef5d3cbbaee3d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>Result&lt; std::vector&lt; double &gt; &gt; pyfolio::analytics::EnhancedTurnoverAnalyzer::calculate_rolling_agb</definition>
        <argsstring>(const PositionSeries &amp;positions, int window=2)</argsstring>
        <name>calculate_rolling_agb</name>
        <qualifiedname>pyfolio::analytics::EnhancedTurnoverAnalyzer::calculate_rolling_agb</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a8b225a867ab95979be89a7d9e8519eb1" kindref="member">PositionSeries</ref> &amp;</type>
          <declname>positions</declname>
        </param>
        <param>
          <type>int</type>
          <declname>window</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate Average Gross Book (AGB) using rolling window Core calculation for Python pyfolio compatibility</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>positions</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d6/df6/structpyfolio_1_1Position" kindref="compound">Position</ref> series </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>window</parametername>
</parameternamelist>
<parameterdescription>
<para>Rolling window size (default 2 as in Python) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Rolling AGB values </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/turnover_enhanced.h" line="93" column="12"/>
      </memberdef>
      <memberdef kind="function" id="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1a93470345dde025d280e0a58bb98bba53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>Result&lt; std::vector&lt; double &gt; &gt; pyfolio::analytics::EnhancedTurnoverAnalyzer::calculate_net_position_changes</definition>
        <argsstring>(const PositionSeries &amp;positions)</argsstring>
        <name>calculate_net_position_changes</name>
        <qualifiedname>pyfolio::analytics::EnhancedTurnoverAnalyzer::calculate_net_position_changes</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a8b225a867ab95979be89a7d9e8519eb1" kindref="member">PositionSeries</ref> &amp;</type>
          <declname>positions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate net position changes between periods</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>positions</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d6/df6/structpyfolio_1_1Position" kindref="compound">Position</ref> series </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Daily position changes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/turnover_enhanced.h" line="101" column="12"/>
      </memberdef>
      <memberdef kind="function" id="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1a2698ae3aadc008c809d8ed452e1a5be7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; std::map&lt; std::string, double &gt; &gt;</type>
        <definition>Result&lt; std::map&lt; std::string, double &gt; &gt; pyfolio::analytics::EnhancedTurnoverAnalyzer::decompose_turnover</definition>
        <argsstring>(const PositionSeries &amp;positions, const TransactionSeries &amp;transactions)</argsstring>
        <name>decompose_turnover</name>
        <qualifiedname>pyfolio::analytics::EnhancedTurnoverAnalyzer::decompose_turnover</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a8b225a867ab95979be89a7d9e8519eb1" kindref="member">PositionSeries</ref> &amp;</type>
          <declname>positions</declname>
        </param>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a4b722d754217aac2549ef3ef5fa23fff" kindref="member">TransactionSeries</ref> &amp;</type>
          <declname>transactions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decompose turnover into different components</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>positions</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d6/df6/structpyfolio_1_1Position" kindref="compound">Position</ref> series </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transactions</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="d5/d11/structpyfolio_1_1Transaction" kindref="compound">Transaction</ref> series </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Turnover decomposition by type </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/turnover_enhanced.h" line="110" column="12"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1ae40f3f4ca2d8be9e1711162081231ddb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pyfolio::analytics::EnhancedTurnoverAnalyzer::calculate_agb_for_date</definition>
        <argsstring>(const Position &amp;snapshot)</argsstring>
        <name>calculate_agb_for_date</name>
        <qualifiedname>pyfolio::analytics::EnhancedTurnoverAnalyzer::calculate_agb_for_date</qualifiedname>
        <param>
          <type>const <ref refid="d6/df6/structpyfolio_1_1Position" kindref="compound">Position</ref> &amp;</type>
          <declname>snapshot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate AGB for a single position snapshot </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/turnover_enhanced.h" line="117" column="12"/>
      </memberdef>
      <memberdef kind="function" id="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1a6aa9b4840d55c45a65038607b1024182" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; pyfolio::analytics::EnhancedTurnoverAnalyzer::rolling_mean</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;values, int window)</argsstring>
        <name>rolling_mean</name>
        <qualifiedname>pyfolio::analytics::EnhancedTurnoverAnalyzer::rolling_mean</qualifiedname>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>int</type>
          <declname>window</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate rolling mean with proper handling of edge cases </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/turnover_enhanced.h" line="122" column="17"/>
      </memberdef>
      <memberdef kind="function" id="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1a2e42b07fc918fa7b1bb2ea5a131dbe99" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>Result&lt; std::vector&lt; double &gt; &gt; pyfolio::analytics::EnhancedTurnoverAnalyzer::calculate_turnover_with_denominator</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;position_changes, const std::vector&lt; double &gt; &amp;denominator_values)</argsstring>
        <name>calculate_turnover_with_denominator</name>
        <qualifiedname>pyfolio::analytics::EnhancedTurnoverAnalyzer::calculate_turnover_with_denominator</qualifiedname>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>position_changes</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>denominator_values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate turnover using different denominators </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/turnover_enhanced.h" line="127" column="12"/>
      </memberdef>
      <memberdef kind="function" id="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1aa7c6e9ce5e8072f7b8e802940151c8d4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; std::string, std::vector&lt; double &gt; &gt;</type>
        <definition>std::map&lt; std::string, std::vector&lt; double &gt; &gt; pyfolio::analytics::EnhancedTurnoverAnalyzer::calculate_symbol_position_changes</definition>
        <argsstring>(const PositionSeries &amp;positions)</argsstring>
        <name>calculate_symbol_position_changes</name>
        <qualifiedname>pyfolio::analytics::EnhancedTurnoverAnalyzer::calculate_symbol_position_changes</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a8b225a867ab95979be89a7d9e8519eb1" kindref="member">PositionSeries</ref> &amp;</type>
          <declname>positions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract symbol-level position changes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/turnover_enhanced.h" line="133" column="14"/>
      </memberdef>
      <memberdef kind="function" id="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1a19eaeef9f566b5a37991625ca750149d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; pyfolio::analytics::EnhancedTurnoverAnalyzer::aggregate_monthly_turnover</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;daily_turnover, const std::vector&lt; DateTime &gt; &amp;dates)</argsstring>
        <name>aggregate_monthly_turnover</name>
        <qualifiedname>pyfolio::analytics::EnhancedTurnoverAnalyzer::aggregate_monthly_turnover</qualifiedname>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>daily_turnover</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> &gt; &amp;</type>
          <declname>dates</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate monthly aggregated turnover </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/turnover_enhanced.h" line="138" column="17"/>
      </memberdef>
      <memberdef kind="function" id="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1a59eb955400bef48d30d622cfeb4b327a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pyfolio::analytics::EnhancedTurnoverAnalyzer::calculate_correlation</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;series1, const std::vector&lt; double &gt; &amp;series2)</argsstring>
        <name>calculate_correlation</name>
        <qualifiedname>pyfolio::analytics::EnhancedTurnoverAnalyzer::calculate_correlation</qualifiedname>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>series1</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>series2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate correlation between turnover and other metrics </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/turnover_enhanced.h" line="144" column="12"/>
      </memberdef>
      <memberdef kind="function" id="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1a7c8e675bf91f5fed726bf4af7380257b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pyfolio::analytics::EnhancedTurnoverAnalyzer::validate_turnover_inputs</definition>
        <argsstring>(const PositionSeries &amp;positions, const TransactionSeries &amp;transactions)</argsstring>
        <name>validate_turnover_inputs</name>
        <qualifiedname>pyfolio::analytics::EnhancedTurnoverAnalyzer::validate_turnover_inputs</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a8b225a867ab95979be89a7d9e8519eb1" kindref="member">PositionSeries</ref> &amp;</type>
          <declname>positions</declname>
        </param>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a4b722d754217aac2549ef3ef5fa23fff" kindref="member">TransactionSeries</ref> &amp;</type>
          <declname>transactions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Validate inputs for turnover calculation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/turnover_enhanced.h" line="149" column="10"/>
      </memberdef>
      <memberdef kind="function" id="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1aa63e837ba0a629030dc7e608d713f359" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; pyfolio::analytics::EnhancedTurnoverAnalyzer::handle_turnover_edge_cases</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;raw_turnover)</argsstring>
        <name>handle_turnover_edge_cases</name>
        <qualifiedname>pyfolio::analytics::EnhancedTurnoverAnalyzer::handle_turnover_edge_cases</qualifiedname>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>raw_turnover</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Handle edge cases in turnover calculation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/turnover_enhanced.h" line="154" column="17"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/turnover_enhanced.h" line="58" column="1" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/turnover_enhanced.h" bodystart="58" bodyend="155"/>
    <listofallmembers>
      <member refid="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1a19eaeef9f566b5a37991625ca750149d" prot="private" virt="non-virtual"><scope>pyfolio::analytics::EnhancedTurnoverAnalyzer</scope><name>aggregate_monthly_turnover</name></member>
      <member refid="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1ae40f3f4ca2d8be9e1711162081231ddb" prot="private" virt="non-virtual"><scope>pyfolio::analytics::EnhancedTurnoverAnalyzer</scope><name>calculate_agb_for_date</name></member>
      <member refid="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1a456bf14aeddaeeff3b9d5624b6ae6210" prot="public" virt="non-virtual"><scope>pyfolio::analytics::EnhancedTurnoverAnalyzer</scope><name>calculate_comprehensive_turnover_metrics</name></member>
      <member refid="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1a59eb955400bef48d30d622cfeb4b327a" prot="private" virt="non-virtual"><scope>pyfolio::analytics::EnhancedTurnoverAnalyzer</scope><name>calculate_correlation</name></member>
      <member refid="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1afdd574756c49ab5f3f55f6a52e77d8b6" prot="public" virt="non-virtual"><scope>pyfolio::analytics::EnhancedTurnoverAnalyzer</scope><name>calculate_enhanced_turnover</name></member>
      <member refid="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1a93470345dde025d280e0a58bb98bba53" prot="public" virt="non-virtual"><scope>pyfolio::analytics::EnhancedTurnoverAnalyzer</scope><name>calculate_net_position_changes</name></member>
      <member refid="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1afec255239ef5e1d2e1ef5d3cbbaee3d2" prot="public" virt="non-virtual"><scope>pyfolio::analytics::EnhancedTurnoverAnalyzer</scope><name>calculate_rolling_agb</name></member>
      <member refid="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1aa7c6e9ce5e8072f7b8e802940151c8d4" prot="private" virt="non-virtual"><scope>pyfolio::analytics::EnhancedTurnoverAnalyzer</scope><name>calculate_symbol_position_changes</name></member>
      <member refid="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1a2e42b07fc918fa7b1bb2ea5a131dbe99" prot="private" virt="non-virtual"><scope>pyfolio::analytics::EnhancedTurnoverAnalyzer</scope><name>calculate_turnover_with_denominator</name></member>
      <member refid="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1a2698ae3aadc008c809d8ed452e1a5be7" prot="public" virt="non-virtual"><scope>pyfolio::analytics::EnhancedTurnoverAnalyzer</scope><name>decompose_turnover</name></member>
      <member refid="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1aa63e837ba0a629030dc7e608d713f359" prot="private" virt="non-virtual"><scope>pyfolio::analytics::EnhancedTurnoverAnalyzer</scope><name>handle_turnover_edge_cases</name></member>
      <member refid="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1a6aa9b4840d55c45a65038607b1024182" prot="private" virt="non-virtual"><scope>pyfolio::analytics::EnhancedTurnoverAnalyzer</scope><name>rolling_mean</name></member>
      <member refid="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer_1a7c8e675bf91f5fed726bf4af7380257b" prot="private" virt="non-virtual"><scope>pyfolio::analytics::EnhancedTurnoverAnalyzer</scope><name>validate_turnover_inputs</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
