<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d8/dd9/namespacepyfolio_1_1performance" kind="namespace" language="C++">
    <compoundname>pyfolio::performance</compoundname>
    <innerclass refid="d4/d65/structpyfolio_1_1performance_1_1DrawdownInfo" prot="public">pyfolio::performance::DrawdownInfo</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1a485b4a7f1c9f3090402383fda316c8f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &gt;</type>
        <definition>Result&lt; ReturnSeries &gt; pyfolio::performance::calculate_drawdowns</definition>
        <argsstring>(const ReturnSeries &amp;returns)</argsstring>
        <name>calculate_drawdowns</name>
        <qualifiedname>pyfolio::performance::calculate_drawdowns</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <briefdescription>
<para>Calculate drawdown series from returns. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/drawdown.h" line="28" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/drawdown.h" bodystart="28" bodyend="61"/>
        <references refid="d8/dd9/namespacepyfolio_1_1performance_1a0643c69995dcd3f223563def5f3efb99" compoundref="d4/d73/returns_8h" startline="102" endline="120">calculate_cumulative_returns</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a14dc0c14e60203348e7a7a474f086a49" compoundref="d8/d51/time__series_8h" startline="137" endline="137">pyfolio::TimeSeries&lt; T &gt;::name</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aa2afb12cd873b86de28fef77344ad2b2" compoundref="d8/de8/drawdown_8h" startline="286" endline="314">average_drawdown</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a919af12e2600a7e77163a20bf6f98609" compoundref="d8/de8/drawdown_8h" startline="66" endline="81">max_drawdown</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1a919af12e2600a7e77163a20bf6f98609" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::performance::max_drawdown</definition>
        <argsstring>(const ReturnSeries &amp;returns)</argsstring>
        <name>max_drawdown</name>
        <qualifiedname>pyfolio::performance::max_drawdown</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <briefdescription>
<para>Calculate maximum drawdown. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/drawdown.h" line="66" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/drawdown.h" bodystart="66" bodyend="81"/>
        <references refid="d8/dd9/namespacepyfolio_1_1performance_1a485b4a7f1c9f3090402383fda316c8f6" compoundref="d8/de8/drawdown_8h" startline="28" endline="61">calculate_drawdowns</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a9bb5c04c5c7d86d34a5867ebcbc2ec9c" compoundref="d7/d06/ratios_8h" startline="116" endline="159">calmar_ratio</referencedby>
        <referencedby refid="d3/d6a/basic__example_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="d3/d6a/basic__example_8cpp" startline="5" endline="86">main</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a07f089ab270bd9a2daf14c4802966942" compoundref="d8/de8/drawdown_8h" startline="319" endline="354">rolling_max_drawdown</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1aff3558ae3dd3ed4381a805f730d47b53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d4/d65/structpyfolio_1_1performance_1_1DrawdownInfo" kindref="compound">DrawdownInfo</ref> &gt;</type>
        <definition>Result&lt; DrawdownInfo &gt; pyfolio::performance::max_drawdown_info</definition>
        <argsstring>(const ReturnSeries &amp;returns)</argsstring>
        <name>max_drawdown_info</name>
        <qualifiedname>pyfolio::performance::max_drawdown_info</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <briefdescription>
<para>Calculate detailed drawdown information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/drawdown.h" line="86" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/drawdown.h" bodystart="86" bodyend="161"/>
        <references refid="d8/dd9/namespacepyfolio_1_1performance_1a0643c69995dcd3f223563def5f3efb99" compoundref="d4/d73/returns_8h" startline="102" endline="120">calculate_cumulative_returns</references>
        <references refid="d4/d65/structpyfolio_1_1performance_1_1DrawdownInfo_1a510999b336c0c1be5780517eb1fc96ca" compoundref="d8/de8/drawdown_8h" startline="20">pyfolio::performance::DrawdownInfo::duration_days</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="d4/d65/structpyfolio_1_1performance_1_1DrawdownInfo_1a171131dddfae58f164b513435ddf2c26" compoundref="d8/de8/drawdown_8h" startline="18">pyfolio::performance::DrawdownInfo::end_date</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d4/d65/structpyfolio_1_1performance_1_1DrawdownInfo_1a4acd89d9458206e5bda7a029df0a502b" compoundref="d8/de8/drawdown_8h" startline="16">pyfolio::performance::DrawdownInfo::max_drawdown</references>
        <references refid="d6/d4f/classpyfolio_1_1DateTime_1af74c490a9d8ce99c6a18bdbe608d1111" compoundref="de/d1b/datetime_8h" startline="178" endline="178">pyfolio::DateTime::now</references>
        <references refid="d4/d65/structpyfolio_1_1performance_1_1DrawdownInfo_1a6da3d2f51f2a7c4a9622944f341f8d7f" compoundref="d8/de8/drawdown_8h" startline="22">pyfolio::performance::DrawdownInfo::recovered</references>
        <references refid="d4/d65/structpyfolio_1_1performance_1_1DrawdownInfo_1a8e8670f62f7852e69238e2e6e3e312dc" compoundref="d8/de8/drawdown_8h" startline="19">pyfolio::performance::DrawdownInfo::recovery_date</references>
        <references refid="d4/d65/structpyfolio_1_1performance_1_1DrawdownInfo_1a0dff274bb20dfb1c3b4b35dccf2c02bd" compoundref="d8/de8/drawdown_8h" startline="21">pyfolio::performance::DrawdownInfo::recovery_days</references>
        <references refid="d4/d65/structpyfolio_1_1performance_1_1DrawdownInfo_1abee8991659c8de98cbad0d8ee5059f7f" compoundref="d8/de8/drawdown_8h" startline="17">pyfolio::performance::DrawdownInfo::start_date</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a119004323be19c9490f882830f2e8de5" compoundref="d8/d51/time__series_8h" startline="123" endline="123">pyfolio::TimeSeries&lt; T &gt;::timestamp</references>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1a95ab1789aea3818a1e9e07c746280c53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &gt;</type>
        <definition>Result&lt; ReturnSeries &gt; pyfolio::performance::drawdown_duration</definition>
        <argsstring>(const ReturnSeries &amp;returns)</argsstring>
        <name>drawdown_duration</name>
        <qualifiedname>pyfolio::performance::drawdown_duration</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <briefdescription>
<para>Calculate drawdown duration (underwater periods) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/drawdown.h" line="166" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/drawdown.h" bodystart="166" bodyend="200"/>
        <references refid="d8/dd9/namespacepyfolio_1_1performance_1a0643c69995dcd3f223563def5f3efb99" compoundref="d4/d73/returns_8h" startline="102" endline="120">calculate_cumulative_returns</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a14dc0c14e60203348e7a7a474f086a49" compoundref="d8/d51/time__series_8h" startline="137" endline="137">pyfolio::TimeSeries&lt; T &gt;::name</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1ae62f81fa57da6d511eea88d11e4128ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; std::vector&lt; <ref refid="d4/d65/structpyfolio_1_1performance_1_1DrawdownInfo" kindref="compound">DrawdownInfo</ref> &gt; &gt;</type>
        <definition>Result&lt; std::vector&lt; DrawdownInfo &gt; &gt; pyfolio::performance::find_drawdown_periods</definition>
        <argsstring>(const ReturnSeries &amp;returns, double min_drawdown=0.01)</argsstring>
        <name>find_drawdown_periods</name>
        <qualifiedname>pyfolio::performance::find_drawdown_periods</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min_drawdown</declname>
          <defval>0.01</defval>
        </param>
        <briefdescription>
<para>Find all drawdown periods. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/drawdown.h" line="205" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/drawdown.h" bodystart="205" bodyend="281"/>
        <references refid="d8/dd9/namespacepyfolio_1_1performance_1a0643c69995dcd3f223563def5f3efb99" compoundref="d4/d73/returns_8h" startline="102" endline="120">calculate_cumulative_returns</references>
        <references refid="d4/d65/structpyfolio_1_1performance_1_1DrawdownInfo_1a510999b336c0c1be5780517eb1fc96ca" compoundref="d8/de8/drawdown_8h" startline="20">pyfolio::performance::DrawdownInfo::duration_days</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="d4/d65/structpyfolio_1_1performance_1_1DrawdownInfo_1a171131dddfae58f164b513435ddf2c26" compoundref="d8/de8/drawdown_8h" startline="18">pyfolio::performance::DrawdownInfo::end_date</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d4/d65/structpyfolio_1_1performance_1_1DrawdownInfo_1a4acd89d9458206e5bda7a029df0a502b" compoundref="d8/de8/drawdown_8h" startline="16">pyfolio::performance::DrawdownInfo::max_drawdown</references>
        <references refid="d6/d4f/classpyfolio_1_1DateTime_1af74c490a9d8ce99c6a18bdbe608d1111" compoundref="de/d1b/datetime_8h" startline="178" endline="178">pyfolio::DateTime::now</references>
        <references refid="d4/d65/structpyfolio_1_1performance_1_1DrawdownInfo_1a6da3d2f51f2a7c4a9622944f341f8d7f" compoundref="d8/de8/drawdown_8h" startline="22">pyfolio::performance::DrawdownInfo::recovered</references>
        <references refid="d4/d65/structpyfolio_1_1performance_1_1DrawdownInfo_1a8e8670f62f7852e69238e2e6e3e312dc" compoundref="d8/de8/drawdown_8h" startline="19">pyfolio::performance::DrawdownInfo::recovery_date</references>
        <references refid="d4/d65/structpyfolio_1_1performance_1_1DrawdownInfo_1a0dff274bb20dfb1c3b4b35dccf2c02bd" compoundref="d8/de8/drawdown_8h" startline="21">pyfolio::performance::DrawdownInfo::recovery_days</references>
        <references refid="d4/d65/structpyfolio_1_1performance_1_1DrawdownInfo_1abee8991659c8de98cbad0d8ee5059f7f" compoundref="d8/de8/drawdown_8h" startline="17">pyfolio::performance::DrawdownInfo::start_date</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a119004323be19c9490f882830f2e8de5" compoundref="d8/d51/time__series_8h" startline="123" endline="123">pyfolio::TimeSeries&lt; T &gt;::timestamp</references>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1ac7636a30bc37db92e05e85e19917a00b" compoundref="d8/de8/drawdown_8h" startline="359" endline="386">average_recovery_time</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1aa2afb12cd873b86de28fef77344ad2b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::performance::average_drawdown</definition>
        <argsstring>(const ReturnSeries &amp;returns)</argsstring>
        <name>average_drawdown</name>
        <qualifiedname>pyfolio::performance::average_drawdown</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <briefdescription>
<para>Calculate average drawdown. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/drawdown.h" line="286" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/drawdown.h" bodystart="286" bodyend="314"/>
        <references refid="d8/dd9/namespacepyfolio_1_1performance_1a485b4a7f1c9f3090402383fda316c8f6" compoundref="d8/de8/drawdown_8h" startline="28" endline="61">calculate_drawdowns</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1a07f089ab270bd9a2daf14c4802966942" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &gt;</type>
        <definition>Result&lt; ReturnSeries &gt; pyfolio::performance::rolling_max_drawdown</definition>
        <argsstring>(const ReturnSeries &amp;returns, size_t window_size)</argsstring>
        <name>rolling_max_drawdown</name>
        <qualifiedname>pyfolio::performance::rolling_max_drawdown</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window_size</declname>
        </param>
        <briefdescription>
<para>Calculate rolling maximum drawdown. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/drawdown.h" line="319" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/drawdown.h" bodystart="319" bodyend="354"/>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="d8/dd9/namespacepyfolio_1_1performance_1a919af12e2600a7e77163a20bf6f98609" compoundref="d8/de8/drawdown_8h" startline="66" endline="81">max_drawdown</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a14dc0c14e60203348e7a7a474f086a49" compoundref="d8/d51/time__series_8h" startline="137" endline="137">pyfolio::TimeSeries&lt; T &gt;::name</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a119004323be19c9490f882830f2e8de5" compoundref="d8/d51/time__series_8h" startline="123" endline="123">pyfolio::TimeSeries&lt; T &gt;::timestamp</references>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1ac7636a30bc37db92e05e85e19917a00b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::performance::average_recovery_time</definition>
        <argsstring>(const ReturnSeries &amp;returns, double min_drawdown=0.01)</argsstring>
        <name>average_recovery_time</name>
        <qualifiedname>pyfolio::performance::average_recovery_time</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>double</type>
          <declname>min_drawdown</declname>
          <defval>0.01</defval>
        </param>
        <briefdescription>
<para>Calculate time to recovery from drawdowns. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/drawdown.h" line="359" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/drawdown.h" bodystart="359" bodyend="386"/>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d8/dd9/namespacepyfolio_1_1performance_1ae62f81fa57da6d511eea88d11e4128ae" compoundref="d8/de8/drawdown_8h" startline="205" endline="281">find_drawdown_periods</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1aa8dd6ffc556adc3f76dc32645ec6b57c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::performance::sharpe_ratio</definition>
        <argsstring>(const ReturnSeries &amp;returns, double risk_free_rate=constants::DEFAULT_RISK_FREE_RATE, Frequency frequency=Frequency::Daily)</argsstring>
        <name>sharpe_ratio</name>
        <qualifiedname>pyfolio::performance::sharpe_ratio</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>double</type>
          <declname>risk_free_rate</declname>
          <defval><ref refid="db/d9c/namespacepyfolio_1_1constants_1a6b629b058e12e9c8e6b1c39036389ddf" kindref="member">constants::DEFAULT_RISK_FREE_RATE</ref></defval>
        </param>
        <param>
          <type><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92e" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
          <defval><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eac512b685438f41daa7386329a3b8f8d3" kindref="member">Frequency::Daily</ref></defval>
        </param>
        <briefdescription>
<para>Calculate Sharpe ratio. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/ratios.h" line="15" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/ratios.h" bodystart="15" bodyend="57"/>
        <references refid="d8/dd9/namespacepyfolio_1_1performance_1a0b36bd99af8d88af1dc5578ef684c6e8" compoundref="d4/d73/returns_8h" startline="83" endline="97">calculate_excess_returns</references>
        <references refid="d8/dd9/namespacepyfolio_1_1performance_1a187ff948556631bd1ebbe0c3c87bdb76" compoundref="d4/d73/returns_8h" startline="202" endline="220">calculate_volatility</references>
        <references refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eac512b685438f41daa7386329a3b8f8d3" compoundref="d9/d49/types_8h" startline="74">pyfolio::Daily</references>
        <references refid="db/d9c/namespacepyfolio_1_1constants_1a6b629b058e12e9c8e6b1c39036389ddf" compoundref="d9/d49/types_8h" startline="65">pyfolio::constants::DEFAULT_RISK_FREE_RATE</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a34e540e6594987eef203290f0a593bd2" compoundref="d3/d11/error__handling_8h" startline="19">pyfolio::DivisionByZero</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1a0ded7b265023215831bffb8b799ba59a" compoundref="d3/dbe/math_2statistics_8h" startline="112" endline="119">pyfolio::stats::mean</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d9/d9c/namespacepyfolio_1_1frequency_1a74fa147efbd62bd66d74854830c8a124" compoundref="de/d1b/datetime_8h" startline="444" endline="459">pyfolio::frequency::to_annual_factor</references>
        <referencedby refid="d3/d6a/basic__example_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="d3/d6a/basic__example_8cpp" startline="5" endline="86">main</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a65aa70a47c152e3dbb1e73ea2dd1f0c4" compoundref="d7/d06/ratios_8h" startline="330" endline="368">rolling_sharpe_ratio</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1a2b9a9772352ff85db5af94511638114f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::performance::sortino_ratio</definition>
        <argsstring>(const ReturnSeries &amp;returns, double target_return=0.0, Frequency frequency=Frequency::Daily)</argsstring>
        <name>sortino_ratio</name>
        <qualifiedname>pyfolio::performance::sortino_ratio</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>double</type>
          <declname>target_return</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92e" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
          <defval><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eac512b685438f41daa7386329a3b8f8d3" kindref="member">Frequency::Daily</ref></defval>
        </param>
        <briefdescription>
<para>Calculate Sortino ratio (downside risk-adjusted return) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/ratios.h" line="62" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/ratios.h" bodystart="62" bodyend="111"/>
        <references refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eac512b685438f41daa7386329a3b8f8d3" compoundref="d9/d49/types_8h" startline="74">pyfolio::Daily</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a34e540e6594987eef203290f0a593bd2" compoundref="d3/d11/error__handling_8h" startline="19">pyfolio::DivisionByZero</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1a0ded7b265023215831bffb8b799ba59a" compoundref="d3/dbe/math_2statistics_8h" startline="112" endline="119">pyfolio::stats::mean</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d9/d9c/namespacepyfolio_1_1frequency_1a74fa147efbd62bd66d74854830c8a124" compoundref="de/d1b/datetime_8h" startline="444" endline="459">pyfolio::frequency::to_annual_factor</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" compoundref="d8/d51/time__series_8h" startline="125" endline="125">pyfolio::TimeSeries&lt; T &gt;::values</references>
        <referencedby refid="d3/d6a/basic__example_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="d3/d6a/basic__example_8cpp" startline="5" endline="86">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1a9bb5c04c5c7d86d34a5867ebcbc2ec9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::performance::calmar_ratio</definition>
        <argsstring>(const ReturnSeries &amp;returns, Frequency frequency=Frequency::Daily)</argsstring>
        <name>calmar_ratio</name>
        <qualifiedname>pyfolio::performance::calmar_ratio</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92e" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
          <defval><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eac512b685438f41daa7386329a3b8f8d3" kindref="member">Frequency::Daily</ref></defval>
        </param>
        <briefdescription>
<para>Calculate Calmar ratio (return over maximum drawdown) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/ratios.h" line="116" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/ratios.h" bodystart="116" bodyend="159"/>
        <references refid="d8/dd9/namespacepyfolio_1_1performance_1a570a25f1233fa82e4d5c237cca260e59" compoundref="d4/d73/returns_8h" startline="125" endline="142">annualize_returns</references>
        <references refid="d8/dd9/namespacepyfolio_1_1performance_1a0643c69995dcd3f223563def5f3efb99" compoundref="d4/d73/returns_8h" startline="102" endline="120">calculate_cumulative_returns</references>
        <references refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eac512b685438f41daa7386329a3b8f8d3" compoundref="d9/d49/types_8h" startline="74">pyfolio::Daily</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a34e540e6594987eef203290f0a593bd2" compoundref="d3/d11/error__handling_8h" startline="19">pyfolio::DivisionByZero</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d8/dd9/namespacepyfolio_1_1performance_1a919af12e2600a7e77163a20bf6f98609" compoundref="d8/de8/drawdown_8h" startline="66" endline="81">max_drawdown</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1a72a6639531f459b9963884e4d4ac571e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::performance::information_ratio</definition>
        <argsstring>(const ReturnSeries &amp;portfolio_returns, const ReturnSeries &amp;benchmark_returns, Frequency frequency=Frequency::Daily)</argsstring>
        <name>information_ratio</name>
        <qualifiedname>pyfolio::performance::information_ratio</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>portfolio_returns</declname>
        </param>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>benchmark_returns</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92e" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
          <defval><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eac512b685438f41daa7386329a3b8f8d3" kindref="member">Frequency::Daily</ref></defval>
        </param>
        <briefdescription>
<para>Calculate Information ratio (active return over tracking error) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/ratios.h" line="164" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/ratios.h" bodystart="164" bodyend="212"/>
        <references refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eac512b685438f41daa7386329a3b8f8d3" compoundref="d9/d49/types_8h" startline="74">pyfolio::Daily</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a34e540e6594987eef203290f0a593bd2" compoundref="d3/d11/error__handling_8h" startline="19">pyfolio::DivisionByZero</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1a0ded7b265023215831bffb8b799ba59a" compoundref="d3/dbe/math_2statistics_8h" startline="112" endline="119">pyfolio::stats::mean</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1ae9a69383818faf0de2b2e0a99d4179d9" compoundref="d3/dbe/math_2statistics_8h" startline="151" endline="158">pyfolio::stats::standard_deviation</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d9/d9c/namespacepyfolio_1_1frequency_1a74fa147efbd62bd66d74854830c8a124" compoundref="de/d1b/datetime_8h" startline="444" endline="459">pyfolio::frequency::to_annual_factor</references>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1a376eed0b5df19f13f64b76230fdf6718" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::performance::omega_ratio</definition>
        <argsstring>(const ReturnSeries &amp;returns, double threshold=0.0, Frequency frequency=Frequency::Daily)</argsstring>
        <name>omega_ratio</name>
        <qualifiedname>pyfolio::performance::omega_ratio</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92e" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
          <defval><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eac512b685438f41daa7386329a3b8f8d3" kindref="member">Frequency::Daily</ref></defval>
        </param>
        <briefdescription>
<para>Calculate Omega ratio (probability weighted ratio) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/ratios.h" line="217" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/ratios.h" bodystart="217" bodyend="251"/>
        <references refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eac512b685438f41daa7386329a3b8f8d3" compoundref="d9/d49/types_8h" startline="74">pyfolio::Daily</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a34e540e6594987eef203290f0a593bd2" compoundref="d3/d11/error__handling_8h" startline="19">pyfolio::DivisionByZero</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d9/d9c/namespacepyfolio_1_1frequency_1a74fa147efbd62bd66d74854830c8a124" compoundref="de/d1b/datetime_8h" startline="444" endline="459">pyfolio::frequency::to_annual_factor</references>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1ae0eb073ae0b6cba1b6f6ed684179da8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::performance::treynor_ratio</definition>
        <argsstring>(const ReturnSeries &amp;portfolio_returns, const ReturnSeries &amp;benchmark_returns, double risk_free_rate=constants::DEFAULT_RISK_FREE_RATE, Frequency frequency=Frequency::Daily)</argsstring>
        <name>treynor_ratio</name>
        <qualifiedname>pyfolio::performance::treynor_ratio</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>portfolio_returns</declname>
        </param>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>benchmark_returns</declname>
        </param>
        <param>
          <type>double</type>
          <declname>risk_free_rate</declname>
          <defval><ref refid="db/d9c/namespacepyfolio_1_1constants_1a6b629b058e12e9c8e6b1c39036389ddf" kindref="member">constants::DEFAULT_RISK_FREE_RATE</ref></defval>
        </param>
        <param>
          <type><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92e" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
          <defval><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eac512b685438f41daa7386329a3b8f8d3" kindref="member">Frequency::Daily</ref></defval>
        </param>
        <briefdescription>
<para>Calculate Treynor ratio (return per unit of systematic risk) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/ratios.h" line="256" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/ratios.h" bodystart="256" bodyend="325"/>
        <references refid="d8/dd9/namespacepyfolio_1_1performance_1a0b36bd99af8d88af1dc5578ef684c6e8" compoundref="d4/d73/returns_8h" startline="83" endline="97">calculate_excess_returns</references>
        <references refid="d8/dd9/namespacepyfolio_1_1performance_1a187ff948556631bd1ebbe0c3c87bdb76" compoundref="d4/d73/returns_8h" startline="202" endline="220">calculate_volatility</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9aacbb30bd92a04a43bc1ea560dac5c241" compoundref="d3/d11/error__handling_8h" startline="26">pyfolio::CalculationError</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1ae62df134ebe0d79d73c16894c3dc364d" compoundref="d3/dbe/math_2statistics_8h" startline="236" endline="278">pyfolio::stats::correlation</references>
        <references refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eac512b685438f41daa7386329a3b8f8d3" compoundref="d9/d49/types_8h" startline="74">pyfolio::Daily</references>
        <references refid="db/d9c/namespacepyfolio_1_1constants_1a6b629b058e12e9c8e6b1c39036389ddf" compoundref="d9/d49/types_8h" startline="65">pyfolio::constants::DEFAULT_RISK_FREE_RATE</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a34e540e6594987eef203290f0a593bd2" compoundref="d3/d11/error__handling_8h" startline="19">pyfolio::DivisionByZero</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1a0ded7b265023215831bffb8b799ba59a" compoundref="d3/dbe/math_2statistics_8h" startline="112" endline="119">pyfolio::stats::mean</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d9/d9c/namespacepyfolio_1_1frequency_1a74fa147efbd62bd66d74854830c8a124" compoundref="de/d1b/datetime_8h" startline="444" endline="459">pyfolio::frequency::to_annual_factor</references>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1a65aa70a47c152e3dbb1e73ea2dd1f0c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &gt;</type>
        <definition>Result&lt; ReturnSeries &gt; pyfolio::performance::rolling_sharpe_ratio</definition>
        <argsstring>(const ReturnSeries &amp;returns, size_t window_size, double risk_free_rate=constants::DEFAULT_RISK_FREE_RATE, Frequency frequency=Frequency::Daily)</argsstring>
        <name>rolling_sharpe_ratio</name>
        <qualifiedname>pyfolio::performance::rolling_sharpe_ratio</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window_size</declname>
        </param>
        <param>
          <type>double</type>
          <declname>risk_free_rate</declname>
          <defval><ref refid="db/d9c/namespacepyfolio_1_1constants_1a6b629b058e12e9c8e6b1c39036389ddf" kindref="member">constants::DEFAULT_RISK_FREE_RATE</ref></defval>
        </param>
        <param>
          <type><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92e" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
          <defval><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eac512b685438f41daa7386329a3b8f8d3" kindref="member">Frequency::Daily</ref></defval>
        </param>
        <briefdescription>
<para>Calculate rolling Sharpe ratio. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/ratios.h" line="330" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/ratios.h" bodystart="330" bodyend="368"/>
        <references refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eac512b685438f41daa7386329a3b8f8d3" compoundref="d9/d49/types_8h" startline="74">pyfolio::Daily</references>
        <references refid="db/d9c/namespacepyfolio_1_1constants_1a6b629b058e12e9c8e6b1c39036389ddf" compoundref="d9/d49/types_8h" startline="65">pyfolio::constants::DEFAULT_RISK_FREE_RATE</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a14dc0c14e60203348e7a7a474f086a49" compoundref="d8/d51/time__series_8h" startline="137" endline="137">pyfolio::TimeSeries&lt; T &gt;::name</references>
        <references refid="d8/dd9/namespacepyfolio_1_1performance_1aa8dd6ffc556adc3f76dc32645ec6b57c" compoundref="d7/d06/ratios_8h" startline="15" endline="57">sharpe_ratio</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a119004323be19c9490f882830f2e8de5" compoundref="d8/d51/time__series_8h" startline="123" endline="123">pyfolio::TimeSeries&lt; T &gt;::timestamp</references>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1aba556ae09a3dbbdad98c878c5b84be4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &gt;</type>
        <definition>Result&lt; ReturnSeries &gt; pyfolio::performance::calculate_returns</definition>
        <argsstring>(const PriceSeries &amp;prices)</argsstring>
        <name>calculate_returns</name>
        <qualifiedname>pyfolio::performance::calculate_returns</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1ae16d3b363148718e3144bbe31e9d4a83" kindref="member">PriceSeries</ref> &amp;</type>
          <declname>prices</declname>
        </param>
        <briefdescription>
<para>Calculate simple returns from prices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" line="15" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" bodystart="15" bodyend="44"/>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a14dc0c14e60203348e7a7a474f086a49" compoundref="d8/d51/time__series_8h" startline="137" endline="137">pyfolio::TimeSeries&lt; T &gt;::name</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a119004323be19c9490f882830f2e8de5" compoundref="d8/d51/time__series_8h" startline="123" endline="123">pyfolio::TimeSeries&lt; T &gt;::timestamp</references>
        <referencedby refid="d3/d6a/basic__example_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="d3/d6a/basic__example_8cpp" startline="5" endline="86">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1aa845ba07f3b5467f5cac8d9fc83e2368" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &gt;</type>
        <definition>Result&lt; ReturnSeries &gt; pyfolio::performance::calculate_log_returns</definition>
        <argsstring>(const PriceSeries &amp;prices)</argsstring>
        <name>calculate_log_returns</name>
        <qualifiedname>pyfolio::performance::calculate_log_returns</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1ae16d3b363148718e3144bbe31e9d4a83" kindref="member">PriceSeries</ref> &amp;</type>
          <declname>prices</declname>
        </param>
        <briefdescription>
<para>Calculate log returns from prices. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" line="49" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" bodystart="49" bodyend="78"/>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a14dc0c14e60203348e7a7a474f086a49" compoundref="d8/d51/time__series_8h" startline="137" endline="137">pyfolio::TimeSeries&lt; T &gt;::name</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a119004323be19c9490f882830f2e8de5" compoundref="d8/d51/time__series_8h" startline="123" endline="123">pyfolio::TimeSeries&lt; T &gt;::timestamp</references>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1a0b36bd99af8d88af1dc5578ef684c6e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &gt;</type>
        <definition>Result&lt; ReturnSeries &gt; pyfolio::performance::calculate_excess_returns</definition>
        <argsstring>(const ReturnSeries &amp;returns, double risk_free_rate=constants::DEFAULT_RISK_FREE_RATE)</argsstring>
        <name>calculate_excess_returns</name>
        <qualifiedname>pyfolio::performance::calculate_excess_returns</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>double</type>
          <declname>risk_free_rate</declname>
          <defval><ref refid="db/d9c/namespacepyfolio_1_1constants_1a6b629b058e12e9c8e6b1c39036389ddf" kindref="member">constants::DEFAULT_RISK_FREE_RATE</ref></defval>
        </param>
        <briefdescription>
<para>Calculate excess returns over risk-free rate. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" line="83" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" bodystart="83" bodyend="97"/>
        <references refid="db/d9c/namespacepyfolio_1_1constants_1a6b629b058e12e9c8e6b1c39036389ddf" compoundref="d9/d49/types_8h" startline="65">pyfolio::constants::DEFAULT_RISK_FREE_RATE</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a14dc0c14e60203348e7a7a474f086a49" compoundref="d8/d51/time__series_8h" startline="137" endline="137">pyfolio::TimeSeries&lt; T &gt;::name</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0374bbc62bd808749ac476b3af4b0ead" compoundref="d8/d51/time__series_8h" startline="124" endline="124">pyfolio::TimeSeries&lt; T &gt;::timestamps</references>
        <references refid="db/d9c/namespacepyfolio_1_1constants_1accf4b9e8a1c9179437b61a3f9a0e2e53" compoundref="d9/d49/types_8h" startline="59">pyfolio::constants::TRADING_DAYS_PER_YEAR</references>
        <referencedby refid="d9/dc2/classpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1aa1a010f21d746f4b5ca020320a4ad529" compoundref="da/dd4/attribution_8h" startline="417" endline="484">pyfolio::attribution::AlphaBetaAnalysis::calculate</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aa8dd6ffc556adc3f76dc32645ec6b57c" compoundref="d7/d06/ratios_8h" startline="15" endline="57">sharpe_ratio</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1ae0eb073ae0b6cba1b6f6ed684179da8c" compoundref="d7/d06/ratios_8h" startline="256" endline="325">treynor_ratio</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1a0643c69995dcd3f223563def5f3efb99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &gt;</type>
        <definition>Result&lt; ReturnSeries &gt; pyfolio::performance::calculate_cumulative_returns</definition>
        <argsstring>(const ReturnSeries &amp;returns, double starting_value=1.0)</argsstring>
        <name>calculate_cumulative_returns</name>
        <qualifiedname>pyfolio::performance::calculate_cumulative_returns</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>double</type>
          <declname>starting_value</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>Calculate cumulative returns. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" line="102" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" bodystart="102" bodyend="120"/>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a14dc0c14e60203348e7a7a474f086a49" compoundref="d8/d51/time__series_8h" startline="137" endline="137">pyfolio::TimeSeries&lt; T &gt;::name</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0374bbc62bd808749ac476b3af4b0ead" compoundref="d8/d51/time__series_8h" startline="124" endline="124">pyfolio::TimeSeries&lt; T &gt;::timestamps</references>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a485b4a7f1c9f3090402383fda316c8f6" compoundref="d8/de8/drawdown_8h" startline="28" endline="61">calculate_drawdowns</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a9bb5c04c5c7d86d34a5867ebcbc2ec9c" compoundref="d7/d06/ratios_8h" startline="116" endline="159">calmar_ratio</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a95ab1789aea3818a1e9e07c746280c53" compoundref="d8/de8/drawdown_8h" startline="166" endline="200">drawdown_duration</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1ae62f81fa57da6d511eea88d11e4128ae" compoundref="d8/de8/drawdown_8h" startline="205" endline="281">find_drawdown_periods</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aff3558ae3dd3ed4381a805f730d47b53" compoundref="d8/de8/drawdown_8h" startline="86" endline="161">max_drawdown_info</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1a570a25f1233fa82e4d5c237cca260e59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::performance::annualize_returns</definition>
        <argsstring>(const ReturnSeries &amp;returns, Frequency frequency=Frequency::Daily)</argsstring>
        <name>annualize_returns</name>
        <qualifiedname>pyfolio::performance::annualize_returns</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92e" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
          <defval><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eac512b685438f41daa7386329a3b8f8d3" kindref="member">Frequency::Daily</ref></defval>
        </param>
        <briefdescription>
<para>Annualize returns. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" line="125" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" bodystart="125" bodyend="142"/>
        <references refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eac512b685438f41daa7386329a3b8f8d3" compoundref="d9/d49/types_8h" startline="74">pyfolio::Daily</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1a0ded7b265023215831bffb8b799ba59a" compoundref="d3/dbe/math_2statistics_8h" startline="112" endline="119">pyfolio::stats::mean</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d9/d9c/namespacepyfolio_1_1frequency_1a74fa147efbd62bd66d74854830c8a124" compoundref="de/d1b/datetime_8h" startline="444" endline="459">pyfolio::frequency::to_annual_factor</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a563d8e0024bb6b067dc3ca00ac1b241b" compoundref="d3/d11/error__handling_8h" startline="95" endline="101">pyfolio::Result&lt; T &gt;::value</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" compoundref="d8/d51/time__series_8h" startline="125" endline="125">pyfolio::TimeSeries&lt; T &gt;::values</references>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a9bb5c04c5c7d86d34a5867ebcbc2ec9c" compoundref="d7/d06/ratios_8h" startline="116" endline="159">calmar_ratio</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1acabfd3a56cd8250c87a2f50b76d4ed4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &gt;</type>
        <definition>Result&lt; ReturnSeries &gt; pyfolio::performance::aggregate_returns</definition>
        <argsstring>(const ReturnSeries &amp;returns, Frequency target_frequency)</argsstring>
        <name>aggregate_returns</name>
        <qualifiedname>pyfolio::performance::aggregate_returns</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92e" kindref="member">Frequency</ref></type>
          <declname>target_frequency</declname>
        </param>
        <briefdescription>
<para>Aggregate returns to different frequency. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" line="147" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" bodystart="147" bodyend="170"/>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a14dc0c14e60203348e7a7a474f086a49" compoundref="d8/d51/time__series_8h" startline="137" endline="137">pyfolio::TimeSeries&lt; T &gt;::name</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1aa11c11bab5196315aebc59e03ff7ae24" compoundref="d8/d51/time__series_8h" startline="349" endline="363">pyfolio::TimeSeries&lt; T &gt;::resample</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1a5e53c9105f237045953172393a34c5c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &gt;</type>
        <definition>Result&lt; ReturnSeries &gt; pyfolio::performance::rolling_returns</definition>
        <argsstring>(const ReturnSeries &amp;returns, size_t window_size)</argsstring>
        <name>rolling_returns</name>
        <qualifiedname>pyfolio::performance::rolling_returns</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window_size</declname>
        </param>
        <briefdescription>
<para>Calculate rolling returns. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" line="175" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" bodystart="175" bodyend="197"/>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a14dc0c14e60203348e7a7a474f086a49" compoundref="d8/d51/time__series_8h" startline="137" endline="137">pyfolio::TimeSeries&lt; T &gt;::name</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a4d4c9d331becbed701eacccc2b29ae15" compoundref="d8/d51/time__series_8h" startline="398" endline="431">pyfolio::TimeSeries&lt; T &gt;::rolling</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1a187ff948556631bd1ebbe0c3c87bdb76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::performance::calculate_volatility</definition>
        <argsstring>(const ReturnSeries &amp;returns, Frequency frequency=Frequency::Daily)</argsstring>
        <name>calculate_volatility</name>
        <qualifiedname>pyfolio::performance::calculate_volatility</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92e" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
          <defval><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eac512b685438f41daa7386329a3b8f8d3" kindref="member">Frequency::Daily</ref></defval>
        </param>
        <briefdescription>
<para>Calculate return volatility (annualized standard deviation) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" line="202" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" bodystart="202" bodyend="220"/>
        <references refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eac512b685438f41daa7386329a3b8f8d3" compoundref="d9/d49/types_8h" startline="74">pyfolio::Daily</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1ae9a69383818faf0de2b2e0a99d4179d9" compoundref="d3/dbe/math_2statistics_8h" startline="151" endline="158">pyfolio::stats::standard_deviation</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d9/d9c/namespacepyfolio_1_1frequency_1a74fa147efbd62bd66d74854830c8a124" compoundref="de/d1b/datetime_8h" startline="444" endline="459">pyfolio::frequency::to_annual_factor</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a563d8e0024bb6b067dc3ca00ac1b241b" compoundref="d3/d11/error__handling_8h" startline="95" endline="101">pyfolio::Result&lt; T &gt;::value</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" compoundref="d8/d51/time__series_8h" startline="125" endline="125">pyfolio::TimeSeries&lt; T &gt;::values</references>
        <referencedby refid="d3/d6a/basic__example_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="d3/d6a/basic__example_8cpp" startline="5" endline="86">main</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aa8dd6ffc556adc3f76dc32645ec6b57c" compoundref="d7/d06/ratios_8h" startline="15" endline="57">sharpe_ratio</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1ae0eb073ae0b6cba1b6f6ed684179da8c" compoundref="d7/d06/ratios_8h" startline="256" endline="325">treynor_ratio</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1a8a0797d8f8603e3757181fb825c960b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &gt;</type>
        <definition>Result&lt; ReturnSeries &gt; pyfolio::performance::rolling_volatility</definition>
        <argsstring>(const ReturnSeries &amp;returns, size_t window_size, Frequency frequency=Frequency::Daily)</argsstring>
        <name>rolling_volatility</name>
        <qualifiedname>pyfolio::performance::rolling_volatility</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window_size</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92e" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
          <defval><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eac512b685438f41daa7386329a3b8f8d3" kindref="member">Frequency::Daily</ref></defval>
        </param>
        <briefdescription>
<para>Calculate rolling volatility. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" line="225" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" bodystart="225" bodyend="254"/>
        <references refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eac512b685438f41daa7386329a3b8f8d3" compoundref="d9/d49/types_8h" startline="74">pyfolio::Daily</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a14dc0c14e60203348e7a7a474f086a49" compoundref="d8/d51/time__series_8h" startline="137" endline="137">pyfolio::TimeSeries&lt; T &gt;::name</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1a372692231466b8d4d68c8682ed3f7c4c" compoundref="d3/dbe/math_2statistics_8h" startline="466" endline="468">pyfolio::stats::rolling_std</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a119004323be19c9490f882830f2e8de5" compoundref="d8/d51/time__series_8h" startline="123" endline="123">pyfolio::TimeSeries&lt; T &gt;::timestamp</references>
        <references refid="d9/d9c/namespacepyfolio_1_1frequency_1a74fa147efbd62bd66d74854830c8a124" compoundref="de/d1b/datetime_8h" startline="444" endline="459">pyfolio::frequency::to_annual_factor</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" compoundref="d8/d51/time__series_8h" startline="125" endline="125">pyfolio::TimeSeries&lt; T &gt;::values</references>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1a6bc9f0c706b2d89a0eb6c539eddef077" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::performance::total_return</definition>
        <argsstring>(const ReturnSeries &amp;returns)</argsstring>
        <name>total_return</name>
        <qualifiedname>pyfolio::performance::total_return</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <briefdescription>
<para>Calculate total return over period. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" line="259" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" bodystart="259" bodyend="270"/>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aee9b783d9de6756d4fd9c98c86274b05" compoundref="d4/d73/returns_8h" startline="275" endline="296">calculate_cagr</referencedby>
        <referencedby refid="d3/d6a/basic__example_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="d3/d6a/basic__example_8cpp" startline="5" endline="86">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1aee9b783d9de6756d4fd9c98c86274b05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::performance::calculate_cagr</definition>
        <argsstring>(const ReturnSeries &amp;returns, Frequency frequency=Frequency::Daily)</argsstring>
        <name>calculate_cagr</name>
        <qualifiedname>pyfolio::performance::calculate_cagr</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92e" kindref="member">Frequency</ref></type>
          <declname>frequency</declname>
          <defval><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eac512b685438f41daa7386329a3b8f8d3" kindref="member">Frequency::Daily</ref></defval>
        </param>
        <briefdescription>
<para>Calculate compound annual growth rate (CAGR) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" line="275" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" bodystart="275" bodyend="296"/>
        <references refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eac512b685438f41daa7386329a3b8f8d3" compoundref="d9/d49/types_8h" startline="74">pyfolio::Daily</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d9/d9c/namespacepyfolio_1_1frequency_1a74fa147efbd62bd66d74854830c8a124" compoundref="de/d1b/datetime_8h" startline="444" endline="459">pyfolio::frequency::to_annual_factor</references>
        <references refid="d8/dd9/namespacepyfolio_1_1performance_1a6bc9f0c706b2d89a0eb6c539eddef077" compoundref="d4/d73/returns_8h" startline="259" endline="270">total_return</references>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1aea9501b23c640378f687a97c51874232" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &gt;</type>
        <definition>Result&lt; ReturnSeries &gt; pyfolio::performance::convert_returns</definition>
        <argsstring>(const ReturnSeries &amp;returns, double multiplier=100.0)</argsstring>
        <name>convert_returns</name>
        <qualifiedname>pyfolio::performance::convert_returns</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a3376bad8167ed5bb04f22ab12dda9446" kindref="member">ReturnSeries</ref> &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>double</type>
          <declname>multiplier</declname>
          <defval>100.0</defval>
        </param>
        <briefdescription>
<para>Convert returns to different base (e.g., percentage) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" line="301" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/returns.h" bodystart="301" bodyend="311"/>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a14dc0c14e60203348e7a7a474f086a49" compoundref="d8/d51/time__series_8h" startline="137" endline="137">pyfolio::TimeSeries&lt; T &gt;::name</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0374bbc62bd808749ac476b3af4b0ead" compoundref="d8/d51/time__series_8h" startline="124" endline="124">pyfolio::TimeSeries&lt; T &gt;::timestamps</references>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1a048c0615bdec480c0e1574fe8c7c1129" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; double &gt;</type>
        <definition>TimeSeries&lt; double &gt; pyfolio::performance::calculate_rolling_volatility</definition>
        <argsstring>(const TimeSeries&lt; Return &gt; &amp;returns, size_t window, size_t min_periods=1, double annualization_factor=252.0)</argsstring>
        <name>calculate_rolling_volatility</name>
        <qualifiedname>pyfolio::performance::calculate_rolling_volatility</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>min_periods</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>double</type>
          <declname>annualization_factor</declname>
          <defval>252.0</defval>
        </param>
        <briefdescription>
<para>Calculate rolling volatility. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>returns</parametername>
</parameternamelist>
<parameterdescription>
<para>Time series of returns </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>window</parametername>
</parameternamelist>
<parameterdescription>
<para>Window size for rolling calculation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_periods</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum number of observations required </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>annualization_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Factor to annualize volatility (default: 252 for daily) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Time series of rolling volatility </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/rolling_metrics.h" line="25" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/rolling_metrics.h" bodystart="25" bodyend="64"/>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1a0ded7b265023215831bffb8b799ba59a" compoundref="d3/dbe/math_2statistics_8h" startline="112" endline="119">pyfolio::stats::mean</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a165f6a4758d61017bdcfb78f2457ba24" compoundref="d8/d51/time__series_8h" startline="143" endline="146">pyfolio::TimeSeries&lt; T &gt;::push_back</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0374bbc62bd808749ac476b3af4b0ead" compoundref="d8/d51/time__series_8h" startline="124" endline="124">pyfolio::TimeSeries&lt; T &gt;::timestamps</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" compoundref="d8/d51/time__series_8h" startline="125" endline="125">pyfolio::TimeSeries&lt; T &gt;::values</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1afae76bfc655b39b929869957f17e2406" compoundref="d3/dbe/math_2statistics_8h" startline="125" endline="145">pyfolio::stats::variance</references>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1a77cf1b59bc8f7770d2f1e7df6df96c86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; double &gt;</type>
        <definition>TimeSeries&lt; double &gt; pyfolio::performance::calculate_rolling_sharpe</definition>
        <argsstring>(const TimeSeries&lt; Return &gt; &amp;returns, size_t window, double risk_free_rate=0.0, int periods_per_year=252, size_t min_periods=1)</argsstring>
        <name>calculate_rolling_sharpe</name>
        <qualifiedname>pyfolio::performance::calculate_rolling_sharpe</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window</declname>
        </param>
        <param>
          <type>double</type>
          <declname>risk_free_rate</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>periods_per_year</declname>
          <defval>252</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>min_periods</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Calculate rolling Sharpe ratio. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>returns</parametername>
</parameternamelist>
<parameterdescription>
<para>Time series of returns </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>window</parametername>
</parameternamelist>
<parameterdescription>
<para>Window size for rolling calculation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>risk_free_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Risk-free rate (annualized) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>periods_per_year</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of periods per year </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_periods</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum number of observations required </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Time series of rolling Sharpe ratios </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/rolling_metrics.h" line="76" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/rolling_metrics.h" bodystart="76" bodyend="127"/>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1a0ded7b265023215831bffb8b799ba59a" compoundref="d3/dbe/math_2statistics_8h" startline="112" endline="119">pyfolio::stats::mean</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a165f6a4758d61017bdcfb78f2457ba24" compoundref="d8/d51/time__series_8h" startline="143" endline="146">pyfolio::TimeSeries&lt; T &gt;::push_back</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1ae9a69383818faf0de2b2e0a99d4179d9" compoundref="d3/dbe/math_2statistics_8h" startline="151" endline="158">pyfolio::stats::standard_deviation</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0374bbc62bd808749ac476b3af4b0ead" compoundref="d8/d51/time__series_8h" startline="124" endline="124">pyfolio::TimeSeries&lt; T &gt;::timestamps</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" compoundref="d8/d51/time__series_8h" startline="125" endline="125">pyfolio::TimeSeries&lt; T &gt;::values</references>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1a280b239f05564bffadd2ab759aa7b668" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; double &gt;</type>
        <definition>TimeSeries&lt; double &gt; pyfolio::performance::calculate_rolling_beta</definition>
        <argsstring>(const TimeSeries&lt; Return &gt; &amp;returns, const TimeSeries&lt; Return &gt; &amp;benchmark_returns, size_t window, size_t min_periods=1)</argsstring>
        <name>calculate_rolling_beta</name>
        <qualifiedname>pyfolio::performance::calculate_rolling_beta</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> &gt; &amp;</type>
          <declname>benchmark_returns</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>min_periods</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Calculate rolling beta (simplified version without alignment) </para>
        </briefdescription>
        <detaileddescription>
<para>Assumes returns and benchmark_returns have same timestamps</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>returns</parametername>
</parameternamelist>
<parameterdescription>
<para>Time series of strategy returns </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>benchmark_returns</parametername>
</parameternamelist>
<parameterdescription>
<para>Time series of benchmark returns </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>window</parametername>
</parameternamelist>
<parameterdescription>
<para>Window size for rolling calculation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_periods</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum number of observations required </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Time series of rolling beta values </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/rolling_metrics.h" line="140" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/rolling_metrics.h" bodystart="140" bodyend="196"/>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1af8d120442d5971c10a506129f562be2c" compoundref="d3/dbe/math_2statistics_8h" startline="284" endline="314">pyfolio::stats::covariance</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a165f6a4758d61017bdcfb78f2457ba24" compoundref="d8/d51/time__series_8h" startline="143" endline="146">pyfolio::TimeSeries&lt; T &gt;::push_back</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0374bbc62bd808749ac476b3af4b0ead" compoundref="d8/d51/time__series_8h" startline="124" endline="124">pyfolio::TimeSeries&lt; T &gt;::timestamps</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" compoundref="d8/d51/time__series_8h" startline="125" endline="125">pyfolio::TimeSeries&lt; T &gt;::values</references>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1afae76bfc655b39b929869957f17e2406" compoundref="d3/dbe/math_2statistics_8h" startline="125" endline="145">pyfolio::stats::variance</references>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1aa7d52fa28e4c97c9de78af729f8cc761" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; double &gt;</type>
        <definition>TimeSeries&lt; double &gt; pyfolio::performance::calculate_rolling_correlation</definition>
        <argsstring>(const TimeSeries&lt; Return &gt; &amp;returns, const TimeSeries&lt; Return &gt; &amp;benchmark_returns, size_t window, size_t min_periods=1)</argsstring>
        <name>calculate_rolling_correlation</name>
        <qualifiedname>pyfolio::performance::calculate_rolling_correlation</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> &gt; &amp;</type>
          <declname>benchmark_returns</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>min_periods</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Calculate rolling correlation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>returns</parametername>
</parameternamelist>
<parameterdescription>
<para>Time series of strategy returns </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>benchmark_returns</parametername>
</parameternamelist>
<parameterdescription>
<para>Time series of benchmark returns </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>window</parametername>
</parameternamelist>
<parameterdescription>
<para>Window size for rolling calculation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_periods</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum number of observations required </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Time series of rolling correlation values </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/rolling_metrics.h" line="207" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/rolling_metrics.h" bodystart="207" bodyend="255"/>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1ae62df134ebe0d79d73c16894c3dc364d" compoundref="d3/dbe/math_2statistics_8h" startline="236" endline="278">pyfolio::stats::correlation</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a165f6a4758d61017bdcfb78f2457ba24" compoundref="d8/d51/time__series_8h" startline="143" endline="146">pyfolio::TimeSeries&lt; T &gt;::push_back</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0374bbc62bd808749ac476b3af4b0ead" compoundref="d8/d51/time__series_8h" startline="124" endline="124">pyfolio::TimeSeries&lt; T &gt;::timestamps</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" compoundref="d8/d51/time__series_8h" startline="125" endline="125">pyfolio::TimeSeries&lt; T &gt;::values</references>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1a5651391142d782fdb6931399027d0c98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; double &gt;</type>
        <definition>TimeSeries&lt; double &gt; pyfolio::performance::calculate_rolling_max_drawdown</definition>
        <argsstring>(const TimeSeries&lt; Return &gt; &amp;returns, size_t window, size_t min_periods=1)</argsstring>
        <name>calculate_rolling_max_drawdown</name>
        <qualifiedname>pyfolio::performance::calculate_rolling_max_drawdown</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>min_periods</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Calculate rolling maximum drawdown. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>returns</parametername>
</parameternamelist>
<parameterdescription>
<para>Time series of returns </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>window</parametername>
</parameternamelist>
<parameterdescription>
<para>Window size for rolling calculation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_periods</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum number of observations required </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Time series of rolling maximum drawdown values </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/rolling_metrics.h" line="265" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/rolling_metrics.h" bodystart="265" bodyend="310"/>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a165f6a4758d61017bdcfb78f2457ba24" compoundref="d8/d51/time__series_8h" startline="143" endline="146">pyfolio::TimeSeries&lt; T &gt;::push_back</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0374bbc62bd808749ac476b3af4b0ead" compoundref="d8/d51/time__series_8h" startline="124" endline="124">pyfolio::TimeSeries&lt; T &gt;::timestamps</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" compoundref="d8/d51/time__series_8h" startline="125" endline="125">pyfolio::TimeSeries&lt; T &gt;::values</references>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1a4e5a00565b6f3da166dbcb1a57b53fec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; double &gt;</type>
        <definition>TimeSeries&lt; double &gt; pyfolio::performance::calculate_rolling_sortino</definition>
        <argsstring>(const TimeSeries&lt; Return &gt; &amp;returns, size_t window, double risk_free_rate=0.0, int periods_per_year=252, size_t min_periods=1)</argsstring>
        <name>calculate_rolling_sortino</name>
        <qualifiedname>pyfolio::performance::calculate_rolling_sortino</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window</declname>
        </param>
        <param>
          <type>double</type>
          <declname>risk_free_rate</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>periods_per_year</declname>
          <defval>252</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>min_periods</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Calculate rolling Sortino ratio. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>returns</parametername>
</parameternamelist>
<parameterdescription>
<para>Time series of returns </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>window</parametername>
</parameternamelist>
<parameterdescription>
<para>Window size for rolling calculation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>risk_free_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Risk-free rate (annualized) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>periods_per_year</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of periods per year </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_periods</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum number of observations required </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Time series of rolling Sortino ratios </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/rolling_metrics.h" line="322" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/rolling_metrics.h" bodystart="322" bodyend="386"/>
        <references refid="d6/ddc/namespacepyfolio_1_1stats_1a0ded7b265023215831bffb8b799ba59a" compoundref="d3/dbe/math_2statistics_8h" startline="112" endline="119">pyfolio::stats::mean</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a165f6a4758d61017bdcfb78f2457ba24" compoundref="d8/d51/time__series_8h" startline="143" endline="146">pyfolio::TimeSeries&lt; T &gt;::push_back</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0374bbc62bd808749ac476b3af4b0ead" compoundref="d8/d51/time__series_8h" startline="124" endline="124">pyfolio::TimeSeries&lt; T &gt;::timestamps</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" compoundref="d8/d51/time__series_8h" startline="125" endline="125">pyfolio::TimeSeries&lt; T &gt;::values</references>
      </memberdef>
      <memberdef kind="function" id="d8/dd9/namespacepyfolio_1_1performance_1a2429f7c5cdda810bc8008f0ea6b567cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; double &gt;</type>
        <definition>TimeSeries&lt; double &gt; pyfolio::performance::calculate_rolling_downside_deviation</definition>
        <argsstring>(const TimeSeries&lt; Return &gt; &amp;returns, size_t window, double mar=0.0, int periods_per_year=252, size_t min_periods=1)</argsstring>
        <name>calculate_rolling_downside_deviation</name>
        <qualifiedname>pyfolio::performance::calculate_rolling_downside_deviation</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mar</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>periods_per_year</declname>
          <defval>252</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>min_periods</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Calculate rolling downside deviation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>returns</parametername>
</parameternamelist>
<parameterdescription>
<para>Time series of returns </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>window</parametername>
</parameternamelist>
<parameterdescription>
<para>Window size for rolling calculation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mar</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum acceptable return (default: 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>periods_per_year</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of periods per year for annualization </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_periods</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum number of observations required </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Time series of rolling downside deviation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/rolling_metrics.h" line="398" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/rolling_metrics.h" bodystart="398" bodyend="440"/>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a165f6a4758d61017bdcfb78f2457ba24" compoundref="d8/d51/time__series_8h" startline="143" endline="146">pyfolio::TimeSeries&lt; T &gt;::push_back</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0374bbc62bd808749ac476b3af4b0ead" compoundref="d8/d51/time__series_8h" startline="124" endline="124">pyfolio::TimeSeries&lt; T &gt;::timestamps</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" compoundref="d8/d51/time__series_8h" startline="125" endline="125">pyfolio::TimeSeries&lt; T &gt;::values</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/performance/drawdown.h" line="10" column="1"/>
  </compounddef>
</doxygen>
