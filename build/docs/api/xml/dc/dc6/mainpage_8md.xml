<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="dc/dc6/mainpage_8md" kind="file" language="Markdown">
    <compoundname>mainpage.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>Pyfolio<sp/>C++<sp/>-<sp/>High-Performance<sp/>Financial<sp/>Analysis<sp/>Library<sp/>{#mainpage}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">@tableofcontents</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Overview</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Pyfolio<sp/>C++**<sp/>is<sp/>a<sp/>modern,<sp/>high-performance<sp/>C++20<sp/>financial<sp/>portfolio<sp/>analysis<sp/>library<sp/>designed<sp/>for<sp/>quantitative<sp/>finance<sp/>applications.<sp/>It<sp/>provides<sp/>a<sp/>comprehensive<sp/>suite<sp/>of<sp/>tools<sp/>for<sp/>analyzing<sp/>portfolio<sp/>performance,<sp/>risk<sp/>metrics,<sp/>and<sp/>market<sp/>behavior<sp/>with<sp/>enterprise-grade<sp/>performance<sp/>and<sp/>reliability.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Key<sp/>Features</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>üöÄ<sp/>**High<sp/>Performance**:<sp/>10-100x<sp/>faster<sp/>than<sp/>Python<sp/>equivalents<sp/>with<sp/>SIMD<sp/>optimization</highlight></codeline>
<codeline><highlight class="normal">-<sp/>üîí<sp/>**Type<sp/>Safety**:<sp/>Modern<sp/>C++20<sp/>with<sp/>concepts,<sp/>strong<sp/>types,<sp/>and<sp/>robust<sp/>error<sp/>handling</highlight></codeline>
<codeline><highlight class="normal">-<sp/>üìä<sp/>**Comprehensive<sp/>Analytics**:<sp/>Complete<sp/>suite<sp/>of<sp/>financial<sp/>metrics<sp/>and<sp/>analysis<sp/>tools</highlight></codeline>
<codeline><highlight class="normal">-<sp/>üßµ<sp/>**Parallel<sp/>Processing**:<sp/>Multi-threaded<sp/>computations<sp/>for<sp/>large<sp/>datasets</highlight></codeline>
<codeline><highlight class="normal">-<sp/>üîÑ<sp/>**Real-time<sp/>Capable**:<sp/>Optimized<sp/>for<sp/>high-frequency<sp/>trading<sp/>applications</highlight></codeline>
<codeline><highlight class="normal">-<sp/>üìà<sp/>**Advanced<sp/>Visualization**:<sp/>Interactive<sp/>charts<sp/>with<sp/>Plotly.js<sp/>integration</highlight></codeline>
<codeline><highlight class="normal">-<sp/>üåê<sp/>**REST<sp/>API**:<sp/>Built-in<sp/>web<sp/>server<sp/>for<sp/>remote<sp/>access<sp/>and<sp/>integration</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Quick<sp/>Start</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Installation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">git<sp/>clone<sp/>https://github.com/your-org/pyfolio_cpp.git</highlight></codeline>
<codeline><highlight class="normal">cd<sp/>pyfolio_cpp</highlight></codeline>
<codeline><highlight class="normal">mkdir<sp/>build<sp/>&amp;&amp;<sp/>cd<sp/>build</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>-DCMAKE_BUILD_TYPE=Release<sp/>..</highlight></codeline>
<codeline><highlight class="normal">make<sp/>-j$(nproc)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Basic<sp/>Usage</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pyfolio/pyfolio.h&gt;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>pyfolio;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Create<sp/>a<sp/>time<sp/>series<sp/>of<sp/>returns</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;DateTime&gt;<sp/>dates<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DateTime::parse(&quot;2024-01-01&quot;).value(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DateTime::parse(&quot;2024-01-02&quot;).value(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DateTime::parse(&quot;2024-01-03&quot;).value()</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;double&gt;<sp/>returns<sp/>=<sp/>{0.01,<sp/>-0.02,<sp/>0.015};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">TimeSeries&lt;Return&gt;<sp/>return_series(dates,<sp/>returns);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Calculate<sp/>performance<sp/>metrics</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>sharpe<sp/>=<sp/>performance::sharpe_ratio(return_series).value();</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>max_dd<sp/>=<sp/>performance::max_drawdown(return_series).value();</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>volatility<sp/>=<sp/>performance::volatility(return_series).value();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>&quot;Sharpe<sp/>Ratio:<sp/>&quot;<sp/>&lt;&lt;<sp/>sharpe<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>&quot;Max<sp/>Drawdown:<sp/>&quot;<sp/>&lt;&lt;<sp/>max_dd<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>&quot;Volatility:<sp/>&quot;<sp/>&lt;&lt;<sp/>volatility<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Architecture<sp/>Overview</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Core<sp/>Components</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Module<sp/>|<sp/>Description<sp/>|<sp/>Performance<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|--------|-------------|-------------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>@ref<sp/>pyfolio::TimeSeries<sp/>|<sp/>High-performance<sp/>time<sp/>series<sp/>container<sp/>|<sp/>SIMD-optimized<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>@ref<sp/>pyfolio::performance<sp/>|<sp/>Portfolio<sp/>performance<sp/>metrics<sp/>|<sp/>Cached<sp/>calculations<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>@ref<sp/>pyfolio::risk<sp/>|<sp/>Risk<sp/>analysis<sp/>and<sp/>VaR<sp/>calculations<sp/>|<sp/>Parallel<sp/>processing<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>@ref<sp/>pyfolio::attribution<sp/>|<sp/>Performance<sp/>attribution<sp/>analysis<sp/>|<sp/>Multi-threaded<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>@ref<sp/>pyfolio::regime<sp/>|<sp/>Market<sp/>regime<sp/>detection<sp/>|<sp/>ML<sp/>algorithms<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>@ref<sp/>pyfolio::visualization<sp/>|<sp/>Interactive<sp/>chart<sp/>generation<sp/>|<sp/>Web-based<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Design<sp/>Philosophy</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>**Performance<sp/>First**:<sp/>Every<sp/>component<sp/>is<sp/>optimized<sp/>for<sp/>speed</highlight></codeline>
<codeline><highlight class="normal">2.<sp/>**Type<sp/>Safety**:<sp/>Leverages<sp/>C++20<sp/>concepts<sp/>and<sp/>strong<sp/>types</highlight></codeline>
<codeline><highlight class="normal">3.<sp/>**Error<sp/>Handling**:<sp/>Uses<sp/>`Result&lt;T&gt;`<sp/>monad<sp/>pattern<sp/>for<sp/>robust<sp/>error<sp/>management</highlight></codeline>
<codeline><highlight class="normal">4.<sp/>**Memory<sp/>Efficiency**:<sp/>Custom<sp/>allocators<sp/>for<sp/>high-frequency<sp/>operations</highlight></codeline>
<codeline><highlight class="normal">5.<sp/>**Scalability**:<sp/>Designed<sp/>for<sp/>both<sp/>small<sp/>portfolios<sp/>and<sp/>institutional-scale<sp/>data</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Performance<sp/>Benchmarks</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Speed<sp/>Comparisons<sp/>(vs<sp/>Python<sp/>pyfolio)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Operation<sp/>|<sp/>Python<sp/>pyfolio<sp/>|<sp/>Pyfolio<sp/>C++<sp/>|<sp/>Speedup<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|-----------|----------------|-------------|---------|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>Sharpe<sp/>Ratio<sp/>(1M<sp/>points)<sp/>|<sp/>245ms<sp/>|<sp/>2.1ms<sp/>|<sp/>**117x**<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>Max<sp/>Drawdown<sp/>(1M<sp/>points)<sp/>|<sp/>890ms<sp/>|<sp/>8.3ms<sp/>|<sp/>**107x**<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>Rolling<sp/>Volatility<sp/>|<sp/>1.2s<sp/>|<sp/>15ms<sp/>|<sp/>**80x**<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>Portfolio<sp/>Attribution<sp/>|<sp/>2.1s<sp/>|<sp/>45ms<sp/>|<sp/>**47x**<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>Risk<sp/>Decomposition<sp/>|<sp/>3.4s<sp/>|<sp/>78ms<sp/>|<sp/>**44x**<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Memory<sp/>Efficiency</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>**50%<sp/>less<sp/>memory**<sp/>usage<sp/>compared<sp/>to<sp/>equivalent<sp/>Python<sp/>operations</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Zero-copy<sp/>operations**<sp/>where<sp/>possible</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Memory<sp/>pool<sp/>allocators**<sp/>for<sp/>high-frequency<sp/>trading<sp/>scenarios</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>API<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Core<sp/>Modules</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>@ref<sp/>pyfolio::core<sp/>&quot;Core<sp/>Types<sp/>and<sp/>Utilities&quot;</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**TimeSeries**:<sp/>High-performance<sp/>time<sp/>series<sp/>container</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**DateTime**:<sp/>Financial<sp/>calendar<sp/>and<sp/>date<sp/>handling</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Types**:<sp/>Strong<sp/>types<sp/>for<sp/>financial<sp/>values<sp/>(Price,<sp/>Return,<sp/>Volume)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Error<sp/>Handling**:<sp/>Robust<sp/>`Result&lt;T&gt;`<sp/>error<sp/>management</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>@ref<sp/>pyfolio::performance<sp/>&quot;Performance<sp/>Analysis&quot;</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Metrics**:<sp/>Sharpe<sp/>ratio,<sp/>Sortino<sp/>ratio,<sp/>Information<sp/>ratio</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Returns**:<sp/>Simple,<sp/>logarithmic,<sp/>and<sp/>excess<sp/>returns</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Drawdown**:<sp/>Maximum<sp/>drawdown,<sp/>underwater<sp/>plots</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Rolling**:<sp/>Rolling<sp/>metrics<sp/>with<sp/>O(n)<sp/>complexity</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>@ref<sp/>pyfolio::risk<sp/>&quot;Risk<sp/>Analysis&quot;</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**VaR/CVaR**:<sp/>Value<sp/>at<sp/>Risk<sp/>and<sp/>Conditional<sp/>VaR</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Risk<sp/>Decomposition**:<sp/>Factor-based<sp/>risk<sp/>attribution</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Stress<sp/>Testing**:<sp/>Monte<sp/>Carlo<sp/>and<sp/>historical<sp/>scenarios</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Regime<sp/>Detection**:<sp/>Market<sp/>regime<sp/>identification</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>@ref<sp/>pyfolio::attribution<sp/>&quot;Performance<sp/>Attribution&quot;</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Brinson<sp/>Attribution**:<sp/>Sector<sp/>and<sp/>security<sp/>selection<sp/>effects</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Factor<sp/>Attribution**:<sp/>Multi-factor<sp/>performance<sp/>decomposition</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Transaction<sp/>Costs**:<sp/>Impact<sp/>analysis<sp/>and<sp/>attribution</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>@ref<sp/>pyfolio::visualization<sp/>&quot;Visualization&quot;</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Interactive<sp/>Charts**:<sp/>Plotly.js<sp/>integration</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Tear<sp/>Sheets**:<sp/>Comprehensive<sp/>performance<sp/>reports</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Real-time<sp/>Dashboards**:<sp/>Live<sp/>performance<sp/>monitoring</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Advanced<sp/>Features</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>@ref<sp/>pyfolio::parallel<sp/>&quot;Parallel<sp/>Processing&quot;</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Enable<sp/>parallel<sp/>processing<sp/>for<sp/>large<sp/>datasets</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>results<sp/>=<sp/>pyfolio::parallel::compute_metrics(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>large_portfolio,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::thread::hardware_concurrency()</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>@ref<sp/>pyfolio::simd<sp/>&quot;SIMD<sp/>Optimization&quot;</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Automatic<sp/>SIMD<sp/>acceleration<sp/>for<sp/>supported<sp/>operations</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>correlation<sp/>=<sp/>series1.correlation(series2).value();<sp/>//<sp/>Uses<sp/>AVX2<sp/>if<sp/>available</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####<sp/>@ref<sp/>pyfolio::memory<sp/>&quot;Memory<sp/>Management&quot;</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Custom<sp/>allocators<sp/>for<sp/>high-frequency<sp/>scenarios</highlight></codeline>
<codeline><highlight class="normal">pyfolio::PoolAllocator&lt;Transaction&gt;<sp/>allocator(1000000);</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>transactions<sp/>=<sp/>allocator.allocate_vector&lt;Transaction&gt;();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Examples<sp/>and<sp/>Tutorials</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Basic<sp/>Portfolio<sp/>Analysis</highlight></codeline>
<codeline><highlight class="normal">-<sp/>@ref<sp/>basic_example.cpp<sp/>&quot;Basic<sp/>Example&quot;<sp/>-<sp/>Getting<sp/>started<sp/>with<sp/>portfolio<sp/>analysis</highlight></codeline>
<codeline><highlight class="normal">-<sp/>@ref<sp/>performance_example.cpp<sp/>&quot;Performance<sp/>Metrics&quot;<sp/>-<sp/>Calculate<sp/>key<sp/>performance<sp/>indicators</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Advanced<sp/>Analysis</highlight></codeline>
<codeline><highlight class="normal">-<sp/>@ref<sp/>attribution_example.cpp<sp/>&quot;Attribution<sp/>Analysis&quot;<sp/>-<sp/>Performance<sp/>attribution<sp/>workflows</highlight></codeline>
<codeline><highlight class="normal">-<sp/>@ref<sp/>risk_example.cpp<sp/>&quot;Risk<sp/>Analysis&quot;<sp/>-<sp/>VaR<sp/>and<sp/>stress<sp/>testing</highlight></codeline>
<codeline><highlight class="normal">-<sp/>@ref<sp/>regime_example.cpp<sp/>&quot;Regime<sp/>Detection&quot;<sp/>-<sp/>Market<sp/>regime<sp/>identification</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Integration<sp/>Examples</highlight></codeline>
<codeline><highlight class="normal">-<sp/>@ref<sp/>rest_api_example.cpp<sp/>&quot;REST<sp/>API&quot;<sp/>-<sp/>Web<sp/>service<sp/>integration</highlight></codeline>
<codeline><highlight class="normal">-<sp/>@ref<sp/>real_time_example.cpp<sp/>&quot;Real-time<sp/>Analysis&quot;<sp/>-<sp/>Live<sp/>data<sp/>processing</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Best<sp/>Practices</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Performance<sp/>Optimization</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>**Use<sp/>SIMD-optimized<sp/>operations**<sp/>for<sp/>large<sp/>datasets</highlight></codeline>
<codeline><highlight class="normal">2.<sp/>**Enable<sp/>parallel<sp/>processing**<sp/>with<sp/>`std::execution::par`</highlight></codeline>
<codeline><highlight class="normal">3.<sp/>**Leverage<sp/>caching**<sp/>for<sp/>repeated<sp/>calculations</highlight></codeline>
<codeline><highlight class="normal">4.<sp/>**Use<sp/>memory<sp/>pools**<sp/>for<sp/>high-frequency<sp/>operations</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Error<sp/>Handling</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Always<sp/>check<sp/>Result&lt;T&gt;<sp/>return<sp/>values</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>result<sp/>=<sp/>calculate_sharpe_ratio(returns);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(result.is_error())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;Error:<sp/>&quot;<sp/>&lt;&lt;<sp/>result.error().message<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">double<sp/>sharpe<sp/>=<sp/>result.value();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Memory<sp/>Management</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Reserve<sp/>capacity<sp/>for<sp/>known<sp/>data<sp/>sizes</highlight></codeline>
<codeline><highlight class="normal">TimeSeries&lt;Return&gt;<sp/>returns;</highlight></codeline>
<codeline><highlight class="normal">returns.reserve(expected_size);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Use<sp/>move<sp/>semantics<sp/>for<sp/>large<sp/>operations</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>processed<sp/>=<sp/>std::move(raw_data).process();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Building<sp/>and<sp/>Testing</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Build<sp/>Options</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">#<sp/>Release<sp/>build<sp/>with<sp/>optimizations</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>-DCMAKE_BUILD_TYPE=Release<sp/>-DENABLE_SIMD=ON<sp/>..</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Debug<sp/>build<sp/>with<sp/>coverage</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>-DCMAKE_BUILD_TYPE=Debug<sp/>-DENABLE_COVERAGE=ON<sp/>..</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Build<sp/>with<sp/>static<sp/>analysis</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>-DENABLE_CLANG_TIDY=ON<sp/>-DENABLE_CPPCHECK=ON<sp/>..</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Running<sp/>Tests</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```bash</highlight></codeline>
<codeline><highlight class="normal">#<sp/>Run<sp/>all<sp/>tests</highlight></codeline>
<codeline><highlight class="normal">make<sp/>test</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Run<sp/>specific<sp/>test<sp/>suite</highlight></codeline>
<codeline><highlight class="normal">./tests/performance_tests</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Generate<sp/>coverage<sp/>report</highlight></codeline>
<codeline><highlight class="normal">make<sp/>coverage</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Integration<sp/>Guide</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>CMake<sp/>Integration</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cmake</highlight></codeline>
<codeline><highlight class="normal">find_package(pyfolio_cpp<sp/>REQUIRED)</highlight></codeline>
<codeline><highlight class="normal">target_link_libraries(your_target<sp/>PRIVATE<sp/>pyfolio_cpp::pyfolio_cpp)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Python<sp/>Bindings</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```python</highlight></codeline>
<codeline><highlight class="normal">import<sp/>pyfolio_cpp</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Use<sp/>C++<sp/>performance<sp/>with<sp/>Python<sp/>convenience</highlight></codeline>
<codeline><highlight class="normal">portfolio<sp/>=<sp/>pyfolio_cpp.Portfolio(returns,<sp/>positions)</highlight></codeline>
<codeline><highlight class="normal">metrics<sp/>=<sp/>portfolio.calculate_metrics()</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Contributing</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">We<sp/>welcome<sp/>contributions!<sp/>Please<sp/>see<sp/>our<sp/>[Contributing<sp/>Guide](CONTRIBUTING.md)<sp/>for<sp/>details.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Development<sp/>Setup</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>Fork<sp/>the<sp/>repository</highlight></codeline>
<codeline><highlight class="normal">2.<sp/>Create<sp/>a<sp/>feature<sp/>branch</highlight></codeline>
<codeline><highlight class="normal">3.<sp/>Make<sp/>your<sp/>changes<sp/>with<sp/>tests</highlight></codeline>
<codeline><highlight class="normal">4.<sp/>Run<sp/>static<sp/>analysis:<sp/>`make<sp/>static-analysis`</highlight></codeline>
<codeline><highlight class="normal">5.<sp/>Submit<sp/>a<sp/>pull<sp/>request</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>License</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>project<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>-<sp/>see<sp/>the<sp/>[LICENSE](LICENSE)<sp/>file<sp/>for<sp/>details.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Support</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>**Documentation**:<sp/>https://pyfolio-cpp.readthedocs.io</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Issues**:<sp/>https://github.com/your-org/pyfolio_cpp/issues</highlight></codeline>
<codeline><highlight class="normal">-<sp/>**Discussions**:<sp/>https://github.com/your-org/pyfolio_cpp/discussions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*Pyfolio<sp/>C++<sp/>-<sp/>Bringing<sp/>institutional-grade<sp/>performance<sp/>to<sp/>quantitative<sp/>finance.*</highlight></codeline>
    </programlisting>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/docs/mainpage.md"/>
  </compounddef>
</doxygen>
