<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="dc/d4e/namespacepyfolio_1_1transactions" kind="namespace" language="C++">
    <compoundname>pyfolio::transactions</compoundname>
    <innerclass refid="d3/dfe/classpyfolio_1_1transactions_1_1LinearImpactModel" prot="public">pyfolio::transactions::LinearImpactModel</innerclass>
    <innerclass refid="d7/d7e/classpyfolio_1_1transactions_1_1MarketImpactModel" prot="public">pyfolio::transactions::MarketImpactModel</innerclass>
    <innerclass refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition" prot="public">pyfolio::transactions::OpenPosition</innerclass>
    <innerclass refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip" prot="public">pyfolio::transactions::RoundTrip</innerclass>
    <innerclass refid="d7/d9a/classpyfolio_1_1transactions_1_1RoundTripAnalyzer" prot="public">pyfolio::transactions::RoundTripAnalyzer</innerclass>
    <innerclass refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics" prot="public">pyfolio::transactions::RoundTripStatistics</innerclass>
    <innerclass refid="db/d6c/classpyfolio_1_1transactions_1_1SquareRootImpactModel" prot="public">pyfolio::transactions::SquareRootImpactModel</innerclass>
    <innerclass refid="d2/d7a/classpyfolio_1_1transactions_1_1TradingCostAnalyzer" prot="public">pyfolio::transactions::TradingCostAnalyzer</innerclass>
    <innerclass refid="df/d98/structpyfolio_1_1transactions_1_1TradingCostBreakdown" prot="public">pyfolio::transactions::TradingCostBreakdown</innerclass>
    <innerclass refid="de/d25/classpyfolio_1_1transactions_1_1TransactionRecord" prot="public">pyfolio::transactions::TransactionRecord</innerclass>
    <innerclass refid="d6/d6e/classpyfolio_1_1transactions_1_1TransactionSeries" prot="public">pyfolio::transactions::TransactionSeries</innerclass>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="dc/d4e/namespacepyfolio_1_1transactions_1a307beb383aa487c8f0d53f274f895c6f" prot="public" static="no" strong="yes">
        <type></type>
        <name>TransactionType</name>
        <qualifiedname>pyfolio::transactions::TransactionType</qualifiedname>
        <enumvalue id="dc/d4e/namespacepyfolio_1_1transactions_1a307beb383aa487c8f0d53f274f895c6fa831a28f1e8df07c553fcd59546465d13" prot="public">
          <name>Buy</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dc/d4e/namespacepyfolio_1_1transactions_1a307beb383aa487c8f0d53f274f895c6fa3068c5a98c003498f1fec0c489212e8b" prot="public">
          <name>Sell</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para><ref refid="d5/d11/structpyfolio_1_1Transaction" kindref="compound">Transaction</ref> type enumeration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/transaction.h" line="18" column="1" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/transaction.h" bodystart="18" bodyend="18"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="dc/d4e/namespacepyfolio_1_1transactions_1a2c2a7573e712311accb7cd40b46fdcb1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::map&lt; <ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref>, std::vector&lt; <ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip" kindref="compound">RoundTrip</ref> &gt; &gt;</type>
        <definition>std::map&lt; Symbol, std::vector&lt; RoundTrip &gt; &gt; pyfolio::transactions::group_by_symbol</definition>
        <argsstring>(const std::vector&lt; RoundTrip &gt; &amp;trips)</argsstring>
        <name>group_by_symbol</name>
        <qualifiedname>pyfolio::transactions::group_by_symbol</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip" kindref="compound">RoundTrip</ref> &gt; &amp;</type>
          <declname>trips</declname>
        </param>
        <briefdescription>
<para>Group round trips by various criteria. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/round_trips.h" line="244" column="17" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/round_trips.h" bodystart="244" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="dc/d4e/namespacepyfolio_1_1transactions_1acb883f3044759374411a2bd32c9fe1be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::map&lt; std::string, std::vector&lt; <ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip" kindref="compound">RoundTrip</ref> &gt; &gt;</type>
        <definition>std::map&lt; std::string, std::vector&lt; RoundTrip &gt; &gt; pyfolio::transactions::group_by_duration</definition>
        <argsstring>(const std::vector&lt; RoundTrip &gt; &amp;trips)</argsstring>
        <name>group_by_duration</name>
        <qualifiedname>pyfolio::transactions::group_by_duration</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip" kindref="compound">RoundTrip</ref> &gt; &amp;</type>
          <declname>trips</declname>
        </param>
        <briefdescription>
<para>Group round trips by duration bucket. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/round_trips.h" line="257" column="17" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/round_trips.h" bodystart="257" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="dc/d4e/namespacepyfolio_1_1transactions_1aae9dcab036865e9b023c1b9464a65611" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="da/deb/classpyfolio_1_1DataFrame" kindref="compound">DataFrame</ref> &gt;</type>
        <definition>Result&lt; DataFrame &gt; pyfolio::transactions::round_trip_performance_by_period</definition>
        <argsstring>(const std::vector&lt; RoundTrip &gt; &amp;trips, Frequency freq)</argsstring>
        <name>round_trip_performance_by_period</name>
        <qualifiedname>pyfolio::transactions::round_trip_performance_by_period</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip" kindref="compound">RoundTrip</ref> &gt; &amp;</type>
          <declname>trips</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92e" kindref="member">Frequency</ref></type>
          <declname>freq</declname>
        </param>
        <briefdescription>
<para>Calculate round trip performance by time period. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/round_trips.h" line="291" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/round_trips.h" bodystart="291" bodyend="348"/>
        <references refid="da/deb/classpyfolio_1_1DataFrame_1ae16ceddcf917845c49128783794c109e" compoundref="d2/d99/dataframe_8h" startline="88" endline="101">pyfolio::DataFrame::add_column</references>
        <references refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1a4c27b81823966c6d5b55fd44a02334cd" compoundref="d7/d00/round__trips_8h" startline="193" endline="238">pyfolio::transactions::RoundTripStatistics::calculate</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92ea9030e39f00132d583da4122532e509e9" compoundref="d9/d49/types_8h" startline="74">pyfolio::Monthly</references>
        <references refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eabe92c62702dcec6751c101b5adb0ce3b" compoundref="d9/d49/types_8h" startline="74">pyfolio::Quarterly</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d6/d4f/classpyfolio_1_1DateTime_1a14bed41e6c19c2dfd9c0d36a5edcd29f" compoundref="de/d1b/datetime_8h" startline="188" endline="190">pyfolio::DateTime::to_date</references>
        <references refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eacf5ea7953dc47105e0eb179dbefaaf46" compoundref="d9/d49/types_8h" startline="74">pyfolio::Yearly</references>
      </memberdef>
      <memberdef kind="function" id="dc/d4e/namespacepyfolio_1_1transactions_1ae893dfcd1661353c20000ac7cf36a057" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip" kindref="compound">RoundTrip</ref> &gt;</type>
        <definition>std::vector&lt; RoundTrip &gt; pyfolio::transactions::filter_round_trips</definition>
        <argsstring>(const std::vector&lt; RoundTrip &gt; &amp;trips, const std::function&lt; bool(const RoundTrip &amp;)&gt; &amp;predicate)</argsstring>
        <name>filter_round_trips</name>
        <qualifiedname>pyfolio::transactions::filter_round_trips</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip" kindref="compound">RoundTrip</ref> &gt; &amp;</type>
          <declname>trips</declname>
        </param>
        <param>
          <type>const std::function&lt; bool(const <ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip" kindref="compound">RoundTrip</ref> &amp;)&gt; &amp;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>Filter round trips by criteria. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/round_trips.h" line="353" column="20" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/round_trips.h" bodystart="353" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="dc/d4e/namespacepyfolio_1_1transactions_1a5002dc965910ad09b404e64aa84a5844" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip" kindref="compound">RoundTrip</ref> &gt;</type>
        <definition>std::vector&lt; RoundTrip &gt; pyfolio::transactions::top_round_trips</definition>
        <argsstring>(const std::vector&lt; RoundTrip &gt; &amp;trips, size_t n)</argsstring>
        <name>top_round_trips</name>
        <qualifiedname>pyfolio::transactions::top_round_trips</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip" kindref="compound">RoundTrip</ref> &gt; &amp;</type>
          <declname>trips</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Get top N round trips by P&amp;L. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/round_trips.h" line="365" column="20" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/round_trips.h" bodystart="365" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="dc/d4e/namespacepyfolio_1_1transactions_1aaae9b89dee86559c4a7107df21cb26b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::transactions::calculate_cost_ratio</definition>
        <argsstring>(const TransactionSeries &amp;transactions, double portfolio_value)</argsstring>
        <name>calculate_cost_ratio</name>
        <qualifiedname>pyfolio::transactions::calculate_cost_ratio</qualifiedname>
        <param>
          <type>const <ref refid="d6/d6e/classpyfolio_1_1transactions_1_1TransactionSeries" kindref="compound">TransactionSeries</ref> &amp;</type>
          <declname>transactions</declname>
        </param>
        <param>
          <type>double</type>
          <declname>portfolio_value</declname>
        </param>
        <briefdescription>
<para>Calculate total trading costs as percentage of portfolio value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/trading_costs.h" line="354" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/trading_costs.h" bodystart="354" bodyend="363"/>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <referencedby refid="d7/d56/transaction__analysis__example_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="d7/d56/transaction__analysis__example_8cpp" startline="10" endline="196">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/d4e/namespacepyfolio_1_1transactions_1ad2681dde1f3e784de967a383a5cfe8cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; std::map&lt; <ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref>, <ref refid="df/d98/structpyfolio_1_1transactions_1_1TradingCostBreakdown" kindref="compound">TradingCostBreakdown</ref> &gt; &gt;</type>
        <definition>Result&lt; std::map&lt; Symbol, TradingCostBreakdown &gt; &gt; pyfolio::transactions::analyze_costs_by_symbol</definition>
        <argsstring>(const TransactionSeries &amp;transactions)</argsstring>
        <name>analyze_costs_by_symbol</name>
        <qualifiedname>pyfolio::transactions::analyze_costs_by_symbol</qualifiedname>
        <param>
          <type>const <ref refid="d6/d6e/classpyfolio_1_1transactions_1_1TransactionSeries" kindref="compound">TransactionSeries</ref> &amp;</type>
          <declname>transactions</declname>
        </param>
        <briefdescription>
<para>Analyze trading costs by symbol. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/trading_costs.h" line="368" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/trading_costs.h" bodystart="368" bodyend="382"/>
        <references refid="df/d98/structpyfolio_1_1transactions_1_1TradingCostBreakdown_1a4e9925961246976df62984da4749cd1e" compoundref="dd/d45/trading__costs_8h" startline="25" endline="25">pyfolio::transactions::TradingCostBreakdown::calculate_total</references>
        <references refid="df/d98/structpyfolio_1_1transactions_1_1TradingCostBreakdown_1a418daeb5d9dcc57e6b72c0decaaedc41" compoundref="dd/d45/trading__costs_8h" startline="16">pyfolio::transactions::TradingCostBreakdown::commission</references>
        <references refid="df/d98/structpyfolio_1_1transactions_1_1TradingCostBreakdown_1a0c48a11b74d179221be5c6532b804e0e" compoundref="dd/d45/trading__costs_8h" startline="17">pyfolio::transactions::TradingCostBreakdown::slippage</references>
        <referencedby refid="d7/d56/transaction__analysis__example_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="d7/d56/transaction__analysis__example_8cpp" startline="10" endline="196">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="dc/d4e/namespacepyfolio_1_1transactions_1acc94860d07c43fb8cfdbac14aeca5da6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::transactions::calculate_average_price</definition>
        <argsstring>(const TransactionSeries &amp;transactions, const Symbol &amp;symbol)</argsstring>
        <name>calculate_average_price</name>
        <qualifiedname>pyfolio::transactions::calculate_average_price</qualifiedname>
        <param>
          <type>const <ref refid="d6/d6e/classpyfolio_1_1transactions_1_1TransactionSeries" kindref="compound">TransactionSeries</ref> &amp;</type>
          <declname>transactions</declname>
        </param>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref> &amp;</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
<para>Calculate average transaction price for a symbol. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/transaction.h" line="518" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/transaction.h" bodystart="518" bodyend="543"/>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a34e540e6594987eef203290f0a593bd2" compoundref="d3/d11/error__handling_8h" startline="19">pyfolio::DivisionByZero</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad492e2c2490fcbf8a16aba55f377dc76" compoundref="d3/d11/error__handling_8h" startline="24">pyfolio::InvalidSymbol</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
      </memberdef>
      <memberdef kind="function" id="dc/d4e/namespacepyfolio_1_1transactions_1a735b0817892b8545a3e238c24561a185" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::transactions::calculate_turnover</definition>
        <argsstring>(const TransactionSeries &amp;transactions, double portfolio_value, const DateTime &amp;start, const DateTime &amp;end)</argsstring>
        <name>calculate_turnover</name>
        <qualifiedname>pyfolio::transactions::calculate_turnover</qualifiedname>
        <param>
          <type>const <ref refid="d6/d6e/classpyfolio_1_1transactions_1_1TransactionSeries" kindref="compound">TransactionSeries</ref> &amp;</type>
          <declname>transactions</declname>
        </param>
        <param>
          <type>double</type>
          <declname>portfolio_value</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Calculate portfolio turnover. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/transaction.h" line="548" column="15" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/transaction.h" bodystart="548" bodyend="578"/>
        <references refid="d6/d4f/classpyfolio_1_1DateTime_1aae730fe2db12407f5eb2af3c11e229e9" compoundref="de/d1b/datetime_8h" startline="237" endline="239">pyfolio::DateTime::business_days_until</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ae9b7a7be8e0c7fdda56e3b3eea2c55b8" compoundref="d3/d11/error__handling_8h" startline="23">pyfolio::InvalidDateRange</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="db/d9c/namespacepyfolio_1_1constants_1accf4b9e8a1c9179437b61a3f9a0e2e53" compoundref="d9/d49/types_8h" startline="59">pyfolio::constants::TRADING_DAYS_PER_YEAR</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/round_trips.h" line="11" column="1"/>
  </compounddef>
</doxygen>
