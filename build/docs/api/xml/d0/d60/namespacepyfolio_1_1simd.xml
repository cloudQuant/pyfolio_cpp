<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d0/d60/namespacepyfolio_1_1simd" kind="namespace" language="C++">
    <compoundname>pyfolio::simd</compoundname>
    <innernamespace refid="d5/d10/namespacepyfolio_1_1simd_1_1detail">pyfolio::simd::detail</innernamespace>
    <innernamespace refid="db/de2/namespacepyfolio_1_1simd_1_1timeseries">pyfolio::simd::timeseries</innernamespace>
    <sectiondef kind="var">
      <memberdef kind="variable" id="d0/d60/namespacepyfolio_1_1simd_1abe693f57be07a94e5703f30171bac2a4" prot="public" static="no" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t pyfolio::simd::SIMD_ALIGNMENT</definition>
        <argsstring></argsstring>
        <name>SIMD_ALIGNMENT</name>
        <qualifiedname>pyfolio::simd::SIMD_ALIGNMENT</qualifiedname>
        <initializer>= 32</initializer>
        <briefdescription>
<para>SIMD-optimized mathematical operations for financial computations. </para>
        </briefdescription>
        <detaileddescription>
<para>This module provides vectorized implementations of common operations used in portfolio analysis, dramatically improving performance for large datasets. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" line="30" column="18" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" bodystart="30" bodyend="-1"/>
        <referencedby refid="d0/d60/namespacepyfolio_1_1simd_1abdea27a3803b3e6e05e14e923474e617" compoundref="d6/d99/simd__math_8h" startline="38" endline="40">is_aligned</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/d60/namespacepyfolio_1_1simd_1a401e3c08f28bdd741e67026a693ab749" prot="public" static="no" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t pyfolio::simd::AVX2_DOUBLES</definition>
        <argsstring></argsstring>
        <name>AVX2_DOUBLES</name>
        <qualifiedname>pyfolio::simd::AVX2_DOUBLES</qualifiedname>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" line="31" column="18" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" bodystart="31" bodyend="-1"/>
        <referencedby refid="d1/d70/namespacepyfolio_1_1simd_1_1detail_1_1avx2_1a8c584786fe6d1442d5937b2aadd50b53" compoundref="df/d95/simd__math_8cpp" startline="466" endline="488">pyfolio::simd::detail::avx2::dot_product_avx2</referencedby>
        <referencedby refid="d1/d70/namespacepyfolio_1_1simd_1_1detail_1_1avx2_1acdafffec2b1c8f08e54d2e08506df770" compoundref="df/d95/simd__math_8cpp" startline="404" endline="419">pyfolio::simd::detail::avx2::vector_add_avx2</referencedby>
        <referencedby refid="d1/d70/namespacepyfolio_1_1simd_1_1detail_1_1avx2_1ada9318023e4fab6364196b5ce2cd5aac" compoundref="df/d95/simd__math_8cpp" startline="436" endline="449">pyfolio::simd::detail::avx2::vector_multiply_avx2</referencedby>
        <referencedby refid="d1/d70/namespacepyfolio_1_1simd_1_1detail_1_1avx2_1ae814dcec474b64030ee6d97902849ea2" compoundref="df/d95/simd__math_8cpp" startline="451" endline="464">pyfolio::simd::detail::avx2::vector_scale_avx2</referencedby>
        <referencedby refid="d1/d70/namespacepyfolio_1_1simd_1_1detail_1_1avx2_1a5712d632f7b476d7ae019a0e8ce89450" compoundref="df/d95/simd__math_8cpp" startline="421" endline="434">pyfolio::simd::detail::avx2::vector_subtract_avx2</referencedby>
        <referencedby refid="d1/d70/namespacepyfolio_1_1simd_1_1detail_1_1avx2_1a6d15ab4651fdc91c213eb13c0e6b81ce" compoundref="df/d95/simd__math_8cpp" startline="490" endline="510">pyfolio::simd::detail::avx2::vector_sum_avx2</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/d60/namespacepyfolio_1_1simd_1a5b2fa1d2b38cb363182ba25d2a90ee03" prot="public" static="no" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t pyfolio::simd::SSE2_DOUBLES</definition>
        <argsstring></argsstring>
        <name>SSE2_DOUBLES</name>
        <qualifiedname>pyfolio::simd::SSE2_DOUBLES</qualifiedname>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" line="32" column="18" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" bodystart="32" bodyend="-1"/>
        <referencedby refid="d2/d76/namespacepyfolio_1_1simd_1_1detail_1_1sse2_1af371b2d1450631c6bb95df084505b05d" compoundref="df/d95/simd__math_8cpp" startline="579" endline="600">pyfolio::simd::detail::sse2::dot_product_sse2</referencedby>
        <referencedby refid="d2/d76/namespacepyfolio_1_1simd_1_1detail_1_1sse2_1a344a1d97ab311249bb3591fea0be9af5" compoundref="df/d95/simd__math_8cpp" startline="519" endline="532">pyfolio::simd::detail::sse2::vector_add_sse2</referencedby>
        <referencedby refid="d2/d76/namespacepyfolio_1_1simd_1_1detail_1_1sse2_1a2a8e9369cf7d64a4bf202895c7f2a28c" compoundref="df/d95/simd__math_8cpp" startline="549" endline="562">pyfolio::simd::detail::sse2::vector_multiply_sse2</referencedby>
        <referencedby refid="d2/d76/namespacepyfolio_1_1simd_1_1detail_1_1sse2_1a6671997948ee25ff497a6aaae9202e0a" compoundref="df/d95/simd__math_8cpp" startline="564" endline="577">pyfolio::simd::detail::sse2::vector_scale_sse2</referencedby>
        <referencedby refid="d2/d76/namespacepyfolio_1_1simd_1_1detail_1_1sse2_1a05b6e307f95c40c0230188639f2f0877" compoundref="df/d95/simd__math_8cpp" startline="534" endline="547">pyfolio::simd::detail::sse2::vector_subtract_sse2</referencedby>
        <referencedby refid="d2/d76/namespacepyfolio_1_1simd_1_1detail_1_1sse2_1a5e92c47c7efce3844ac62240279265d9" compoundref="df/d95/simd__math_8cpp" startline="602" endline="620">pyfolio::simd::detail::sse2::vector_sum_sse2</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d0/d60/namespacepyfolio_1_1simd_1a1637072613d471915974f17601125551" prot="public" static="no" constexpr="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t pyfolio::simd::NEON_DOUBLES</definition>
        <argsstring></argsstring>
        <name>NEON_DOUBLES</name>
        <qualifiedname>pyfolio::simd::NEON_DOUBLES</qualifiedname>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" line="33" column="18" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" bodystart="33" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="d0/d60/namespacepyfolio_1_1simd_1abdea27a3803b3e6e05e14e923474e617" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool pyfolio::simd::is_aligned</definition>
        <argsstring>(const void *ptr, size_t alignment=SIMD_ALIGNMENT) noexcept</argsstring>
        <name>is_aligned</name>
        <qualifiedname>pyfolio::simd::is_aligned</qualifiedname>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>alignment</declname>
          <defval><ref refid="d0/d60/namespacepyfolio_1_1simd_1abe693f57be07a94e5703f30171bac2a4" kindref="member">SIMD_ALIGNMENT</ref></defval>
        </param>
        <briefdescription>
<para>Check if pointer is properly aligned for SIMD operations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" line="38" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" bodystart="38" bodyend="40"/>
        <references refid="d0/d60/namespacepyfolio_1_1simd_1abe693f57be07a94e5703f30171bac2a4" compoundref="d6/d99/simd__math_8h" startline="30">SIMD_ALIGNMENT</references>
      </memberdef>
      <memberdef kind="function" id="d0/d60/namespacepyfolio_1_1simd_1a8db69e97761680ae769598b3ea85485d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::simd::vector_add</definition>
        <argsstring>(std::span&lt; const double &gt; a, std::span&lt; const double &gt; b, std::span&lt; double &gt; result) noexcept</argsstring>
        <name>vector_add</name>
        <qualifiedname>pyfolio::simd::vector_add</qualifiedname>
        <param>
          <type>std::span&lt; const double &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::span&lt; const double &gt;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>std::span&lt; double &gt;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>SIMD-optimized vector addition: result[i] = a[i] + b[i]. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" line="46" column="6" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" bodystart="46" bodyend="76" declfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" declline="45" declcolumn="6"/>
        <references refid="d7/d3b/structpyfolio_1_1simd_1_1detail_1_1SIMDCapabilities_1a1e480370fde5176afd3b4ea48bbc7cf4" compoundref="df/d95/simd__math_8cpp" startline="37" endline="40">pyfolio::simd::detail::SIMDCapabilities::get</references>
        <references refid="d1/d70/namespacepyfolio_1_1simd_1_1detail_1_1avx2_1acdafffec2b1c8f08e54d2e08506df770" compoundref="df/d95/simd__math_8cpp" startline="404" endline="419">pyfolio::simd::detail::avx2::vector_add_avx2</references>
        <references refid="d7/db7/namespacepyfolio_1_1simd_1_1detail_1_1scalar_1ab58555677e96819f47635fcb6cb98d80" compoundref="df/d95/simd__math_8cpp" startline="358" endline="362">pyfolio::simd::detail::scalar::vector_add_scalar</references>
        <references refid="d2/d76/namespacepyfolio_1_1simd_1_1detail_1_1sse2_1a344a1d97ab311249bb3591fea0be9af5" compoundref="df/d95/simd__math_8cpp" startline="519" endline="532">pyfolio::simd::detail::sse2::vector_add_sse2</references>
        <referencedby refid="db/de2/namespacepyfolio_1_1simd_1_1timeseries_1a58dbbb7b4a759f65a68509af1b47f460" compoundref="d6/d99/simd__math_8h" startline="200" endline="211">pyfolio::simd::timeseries::add_series</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a825f0e34f5a5da409278b5bed99f52c1" compoundref="d8/d51/time__series_8h" startline="1010" endline="1035">pyfolio::TimeSeries&lt; MarketIndicators &gt;::operator+</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d60/namespacepyfolio_1_1simd_1a0eb32889b1c6598cb6d836322b1fd4e7" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::simd::vector_subtract</definition>
        <argsstring>(std::span&lt; const double &gt; a, std::span&lt; const double &gt; b, std::span&lt; double &gt; result) noexcept</argsstring>
        <name>vector_subtract</name>
        <qualifiedname>pyfolio::simd::vector_subtract</qualifiedname>
        <param>
          <type>std::span&lt; const double &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::span&lt; const double &gt;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>std::span&lt; double &gt;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>SIMD-optimized vector subtraction: result[i] = a[i] - b[i]. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" line="78" column="6" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" bodystart="78" bodyend="107" declfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" declline="50" declcolumn="6"/>
        <references refid="d7/d3b/structpyfolio_1_1simd_1_1detail_1_1SIMDCapabilities_1a1e480370fde5176afd3b4ea48bbc7cf4" compoundref="df/d95/simd__math_8cpp" startline="37" endline="40">pyfolio::simd::detail::SIMDCapabilities::get</references>
        <references refid="d1/d70/namespacepyfolio_1_1simd_1_1detail_1_1avx2_1a5712d632f7b476d7ae019a0e8ce89450" compoundref="df/d95/simd__math_8cpp" startline="421" endline="434">pyfolio::simd::detail::avx2::vector_subtract_avx2</references>
        <references refid="d7/db7/namespacepyfolio_1_1simd_1_1detail_1_1scalar_1a04c8ebd0f050bd6f3bed345233491cf7" compoundref="df/d95/simd__math_8cpp" startline="364" endline="368">pyfolio::simd::detail::scalar::vector_subtract_scalar</references>
        <references refid="d2/d76/namespacepyfolio_1_1simd_1_1detail_1_1sse2_1a05b6e307f95c40c0230188639f2f0877" compoundref="df/d95/simd__math_8cpp" startline="534" endline="547">pyfolio::simd::detail::sse2::vector_subtract_sse2</references>
        <referencedby refid="d0/d60/namespacepyfolio_1_1simd_1aa73066422103347fde2fc199abc7d9ec" compoundref="df/d95/simd__math_8cpp" startline="292" endline="306">calculate_returns_simd</referencedby>
        <referencedby refid="d0/d60/namespacepyfolio_1_1simd_1a032be961dd206012f9e725c2528eb98c" compoundref="df/d95/simd__math_8cpp" startline="335" endline="350">covariance_simd</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0045682c4ad12712fdb45eff3f707928" compoundref="d8/d51/time__series_8h" startline="1040" endline="1065">pyfolio::TimeSeries&lt; MarketIndicators &gt;::operator-</referencedby>
        <referencedby refid="d0/d60/namespacepyfolio_1_1simd_1a75f24bf81435dc095c45e50fd80a5f82" compoundref="df/d95/simd__math_8cpp" startline="232" endline="247">vector_variance</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d60/namespacepyfolio_1_1simd_1ad7801140ceb50d53111dc0137b1c093c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::simd::vector_multiply</definition>
        <argsstring>(std::span&lt; const double &gt; a, std::span&lt; const double &gt; b, std::span&lt; double &gt; result) noexcept</argsstring>
        <name>vector_multiply</name>
        <qualifiedname>pyfolio::simd::vector_multiply</qualifiedname>
        <param>
          <type>std::span&lt; const double &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::span&lt; const double &gt;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>std::span&lt; double &gt;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>SIMD-optimized vector multiplication: result[i] = a[i] * b[i]. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" line="109" column="6" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" bodystart="109" bodyend="138" declfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" declline="55" declcolumn="6"/>
        <references refid="d7/d3b/structpyfolio_1_1simd_1_1detail_1_1SIMDCapabilities_1a1e480370fde5176afd3b4ea48bbc7cf4" compoundref="df/d95/simd__math_8cpp" startline="37" endline="40">pyfolio::simd::detail::SIMDCapabilities::get</references>
        <references refid="d1/d70/namespacepyfolio_1_1simd_1_1detail_1_1avx2_1ada9318023e4fab6364196b5ce2cd5aac" compoundref="df/d95/simd__math_8cpp" startline="436" endline="449">pyfolio::simd::detail::avx2::vector_multiply_avx2</references>
        <references refid="d7/db7/namespacepyfolio_1_1simd_1_1detail_1_1scalar_1a7fc9e59a61325bcb4ac9050b5e3058f9" compoundref="df/d95/simd__math_8cpp" startline="370" endline="374">pyfolio::simd::detail::scalar::vector_multiply_scalar</references>
        <references refid="d2/d76/namespacepyfolio_1_1simd_1_1detail_1_1sse2_1a2a8e9369cf7d64a4bf202895c7f2a28c" compoundref="df/d95/simd__math_8cpp" startline="549" endline="562">pyfolio::simd::detail::sse2::vector_multiply_sse2</references>
        <referencedby refid="d0/d60/namespacepyfolio_1_1simd_1aa73066422103347fde2fc199abc7d9ec" compoundref="df/d95/simd__math_8cpp" startline="292" endline="306">calculate_returns_simd</referencedby>
        <referencedby refid="d0/d60/namespacepyfolio_1_1simd_1a032be961dd206012f9e725c2528eb98c" compoundref="df/d95/simd__math_8cpp" startline="335" endline="350">covariance_simd</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab9d28c69b57f3f05b5c70416989e727f" compoundref="d8/d51/time__series_8h" startline="1070" endline="1096">pyfolio::TimeSeries&lt; MarketIndicators &gt;::operator*</referencedby>
        <referencedby refid="d0/d60/namespacepyfolio_1_1simd_1a75f24bf81435dc095c45e50fd80a5f82" compoundref="df/d95/simd__math_8cpp" startline="232" endline="247">vector_variance</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d60/namespacepyfolio_1_1simd_1a6efc96d7ab5019459131e97046cca0a2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::simd::vector_scale</definition>
        <argsstring>(std::span&lt; const double &gt; a, double scalar, std::span&lt; double &gt; result) noexcept</argsstring>
        <name>vector_scale</name>
        <qualifiedname>pyfolio::simd::vector_scale</qualifiedname>
        <param>
          <type>std::span&lt; const double &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>std::span&lt; double &gt;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>SIMD-optimized scalar multiplication: result[i] = a[i] * scalar. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" line="140" column="6" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" bodystart="140" bodyend="169" declfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" declline="60" declcolumn="6"/>
        <references refid="d7/d3b/structpyfolio_1_1simd_1_1detail_1_1SIMDCapabilities_1a1e480370fde5176afd3b4ea48bbc7cf4" compoundref="df/d95/simd__math_8cpp" startline="37" endline="40">pyfolio::simd::detail::SIMDCapabilities::get</references>
        <references refid="d1/d70/namespacepyfolio_1_1simd_1_1detail_1_1avx2_1ae814dcec474b64030ee6d97902849ea2" compoundref="df/d95/simd__math_8cpp" startline="451" endline="464">pyfolio::simd::detail::avx2::vector_scale_avx2</references>
        <references refid="d7/db7/namespacepyfolio_1_1simd_1_1detail_1_1scalar_1af2154fdba8e0cfeb0a76bf24cfb45d23" compoundref="df/d95/simd__math_8cpp" startline="376" endline="380">pyfolio::simd::detail::scalar::vector_scale_scalar</references>
        <references refid="d2/d76/namespacepyfolio_1_1simd_1_1detail_1_1sse2_1a6671997948ee25ff497a6aaae9202e0a" compoundref="df/d95/simd__math_8cpp" startline="564" endline="577">pyfolio::simd::detail::sse2::vector_scale_sse2</references>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1acb95f2faa1e3cfe36d2d6ead77b82873" compoundref="d8/d51/time__series_8h" startline="1101" endline="1121">pyfolio::TimeSeries&lt; MarketIndicators &gt;::operator*</referencedby>
        <referencedby refid="db/de2/namespacepyfolio_1_1simd_1_1timeseries_1a260ff87f26612bf4ce898ec093717b30" compoundref="d6/d99/simd__math_8h" startline="217" endline="232">pyfolio::simd::timeseries::rolling_mean_simd</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d60/namespacepyfolio_1_1simd_1a148485211f2ca558de4424412a78f0a0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double pyfolio::simd::dot_product</definition>
        <argsstring>(std::span&lt; const double &gt; a, std::span&lt; const double &gt; b) noexcept</argsstring>
        <name>dot_product</name>
        <qualifiedname>pyfolio::simd::dot_product</qualifiedname>
        <param>
          <type>std::span&lt; const double &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>std::span&lt; const double &gt;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>SIMD-optimized dot product: returns sum(a[i] * b[i]) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" line="171" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" bodystart="171" bodyend="197" declfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" declline="65" declcolumn="8"/>
        <references refid="d1/d70/namespacepyfolio_1_1simd_1_1detail_1_1avx2_1a8c584786fe6d1442d5937b2aadd50b53" compoundref="df/d95/simd__math_8cpp" startline="466" endline="488">pyfolio::simd::detail::avx2::dot_product_avx2</references>
        <references refid="d7/db7/namespacepyfolio_1_1simd_1_1detail_1_1scalar_1a24687892584d07748c1d6e718a71e88f" compoundref="df/d95/simd__math_8cpp" startline="382" endline="388">pyfolio::simd::detail::scalar::dot_product_scalar</references>
        <references refid="d2/d76/namespacepyfolio_1_1simd_1_1detail_1_1sse2_1af371b2d1450631c6bb95df084505b05d" compoundref="df/d95/simd__math_8cpp" startline="579" endline="600">pyfolio::simd::detail::sse2::dot_product_sse2</references>
        <references refid="d7/d3b/structpyfolio_1_1simd_1_1detail_1_1SIMDCapabilities_1a1e480370fde5176afd3b4ea48bbc7cf4" compoundref="df/d95/simd__math_8cpp" startline="37" endline="40">pyfolio::simd::detail::SIMDCapabilities::get</references>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1ace0a88e334558363898722abd949922b" compoundref="d8/d51/time__series_8h" startline="1126" endline="1147">pyfolio::TimeSeries&lt; MarketIndicators &gt;::dot</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d60/namespacepyfolio_1_1simd_1a60235417cf246196aeb42e6211a07046" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double pyfolio::simd::vector_sum</definition>
        <argsstring>(std::span&lt; const double &gt; a) noexcept</argsstring>
        <name>vector_sum</name>
        <qualifiedname>pyfolio::simd::vector_sum</qualifiedname>
        <param>
          <type>std::span&lt; const double &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>SIMD-optimized sum: returns sum(a[i]) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" line="199" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" bodystart="199" bodyend="224" declfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" declline="70" declcolumn="8"/>
        <references refid="d7/d3b/structpyfolio_1_1simd_1_1detail_1_1SIMDCapabilities_1a1e480370fde5176afd3b4ea48bbc7cf4" compoundref="df/d95/simd__math_8cpp" startline="37" endline="40">pyfolio::simd::detail::SIMDCapabilities::get</references>
        <references refid="d1/d70/namespacepyfolio_1_1simd_1_1detail_1_1avx2_1a6d15ab4651fdc91c213eb13c0e6b81ce" compoundref="df/d95/simd__math_8cpp" startline="490" endline="510">pyfolio::simd::detail::avx2::vector_sum_avx2</references>
        <references refid="d7/db7/namespacepyfolio_1_1simd_1_1detail_1_1scalar_1a4fc93986da5a9f89f845fcf6f697f40d" compoundref="df/d95/simd__math_8cpp" startline="390" endline="396">pyfolio::simd::detail::scalar::vector_sum_scalar</references>
        <references refid="d2/d76/namespacepyfolio_1_1simd_1_1detail_1_1sse2_1a5e92c47c7efce3844ac62240279265d9" compoundref="df/d95/simd__math_8cpp" startline="602" endline="620">pyfolio::simd::detail::sse2::vector_sum_sse2</references>
        <referencedby refid="d0/d60/namespacepyfolio_1_1simd_1a032be961dd206012f9e725c2528eb98c" compoundref="df/d95/simd__math_8cpp" startline="335" endline="350">covariance_simd</referencedby>
        <referencedby refid="d0/d60/namespacepyfolio_1_1simd_1a6e587dea4e8b228a229bb2c7702b80c2" compoundref="df/d95/simd__math_8cpp" startline="253" endline="274">rolling_sum_simd</referencedby>
        <referencedby refid="d0/d60/namespacepyfolio_1_1simd_1ad3431d9b85ba23bb4b87ca4dd8831693" compoundref="df/d95/simd__math_8cpp" startline="226" endline="230">vector_mean</referencedby>
        <referencedby refid="d0/d60/namespacepyfolio_1_1simd_1a75f24bf81435dc095c45e50fd80a5f82" compoundref="df/d95/simd__math_8cpp" startline="232" endline="247">vector_variance</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d60/namespacepyfolio_1_1simd_1ad3431d9b85ba23bb4b87ca4dd8831693" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double pyfolio::simd::vector_mean</definition>
        <argsstring>(std::span&lt; const double &gt; a) noexcept</argsstring>
        <name>vector_mean</name>
        <qualifiedname>pyfolio::simd::vector_mean</qualifiedname>
        <param>
          <type>std::span&lt; const double &gt;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>SIMD-optimized mean calculation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" line="226" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" bodystart="226" bodyend="230" declfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" declline="75" declcolumn="8"/>
        <references refid="d0/d60/namespacepyfolio_1_1simd_1a60235417cf246196aeb42e6211a07046" compoundref="df/d95/simd__math_8cpp" startline="199" endline="224">vector_sum</references>
        <referencedby refid="d0/d60/namespacepyfolio_1_1simd_1af019ba74cae4a4d4555ac87c48891107" compoundref="df/d95/simd__math_8cpp" startline="323" endline="333">correlation_simd</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1aad798a4da69bff9c8bb9d335eaba6ec6" compoundref="d8/d51/time__series_8h" startline="778" endline="797">pyfolio::TimeSeries&lt; MarketIndicators &gt;::mean</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d60/namespacepyfolio_1_1simd_1a75f24bf81435dc095c45e50fd80a5f82" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double pyfolio::simd::vector_variance</definition>
        <argsstring>(std::span&lt; const double &gt; a, double mean) noexcept</argsstring>
        <name>vector_variance</name>
        <qualifiedname>pyfolio::simd::vector_variance</qualifiedname>
        <param>
          <type>std::span&lt; const double &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mean</declname>
        </param>
        <briefdescription>
<para>SIMD-optimized variance calculation (sample variance) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" line="232" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" bodystart="232" bodyend="247" declfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" declline="80" declcolumn="8"/>
        <references refid="d0/d60/namespacepyfolio_1_1simd_1ad7801140ceb50d53111dc0137b1c093c" compoundref="df/d95/simd__math_8cpp" startline="109" endline="138">vector_multiply</references>
        <references refid="d0/d60/namespacepyfolio_1_1simd_1a0eb32889b1c6598cb6d836322b1fd4e7" compoundref="df/d95/simd__math_8cpp" startline="78" endline="107">vector_subtract</references>
        <references refid="d0/d60/namespacepyfolio_1_1simd_1a60235417cf246196aeb42e6211a07046" compoundref="df/d95/simd__math_8cpp" startline="199" endline="224">vector_sum</references>
        <referencedby refid="d0/d60/namespacepyfolio_1_1simd_1a35307dabe07b88ba83fc57c851c9139b" compoundref="df/d95/simd__math_8cpp" startline="249" endline="251">vector_std</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d60/namespacepyfolio_1_1simd_1a35307dabe07b88ba83fc57c851c9139b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double pyfolio::simd::vector_std</definition>
        <argsstring>(std::span&lt; const double &gt; a, double mean) noexcept</argsstring>
        <name>vector_std</name>
        <qualifiedname>pyfolio::simd::vector_std</qualifiedname>
        <param>
          <type>std::span&lt; const double &gt;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mean</declname>
        </param>
        <briefdescription>
<para>SIMD-optimized standard deviation calculation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" line="249" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" bodystart="249" bodyend="251" declfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" declline="85" declcolumn="8"/>
        <references refid="d0/d60/namespacepyfolio_1_1simd_1a75f24bf81435dc095c45e50fd80a5f82" compoundref="df/d95/simd__math_8cpp" startline="232" endline="247">vector_variance</references>
        <referencedby refid="d0/d60/namespacepyfolio_1_1simd_1af019ba74cae4a4d4555ac87c48891107" compoundref="df/d95/simd__math_8cpp" startline="323" endline="333">correlation_simd</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d60/namespacepyfolio_1_1simd_1a6e587dea4e8b228a229bb2c7702b80c2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::simd::rolling_sum_simd</definition>
        <argsstring>(std::span&lt; const double &gt; data, size_t window, std::span&lt; double &gt; result) noexcept</argsstring>
        <name>rolling_sum_simd</name>
        <qualifiedname>pyfolio::simd::rolling_sum_simd</qualifiedname>
        <param>
          <type>std::span&lt; const double &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window</declname>
        </param>
        <param>
          <type>std::span&lt; double &gt;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>SIMD-optimized rolling sum with window size. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" line="253" column="6" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" bodystart="253" bodyend="274" declfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" declline="90" declcolumn="6"/>
        <references refid="d0/d60/namespacepyfolio_1_1simd_1a60235417cf246196aeb42e6211a07046" compoundref="df/d95/simd__math_8cpp" startline="199" endline="224">vector_sum</references>
        <referencedby refid="db/de2/namespacepyfolio_1_1simd_1_1timeseries_1a260ff87f26612bf4ce898ec093717b30" compoundref="d6/d99/simd__math_8h" startline="217" endline="232">pyfolio::simd::timeseries::rolling_mean_simd</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d60/namespacepyfolio_1_1simd_1a6be63e727719520d16067bd5d849dcf2" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::simd::exponential_moving_average_simd</definition>
        <argsstring>(std::span&lt; const double &gt; data, double alpha, std::span&lt; double &gt; result) noexcept</argsstring>
        <name>exponential_moving_average_simd</name>
        <qualifiedname>pyfolio::simd::exponential_moving_average_simd</qualifiedname>
        <param>
          <type>std::span&lt; const double &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>std::span&lt; double &gt;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>SIMD-optimized exponential moving average. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" line="276" column="6" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" bodystart="276" bodyend="290" declfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" declline="95" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d0/d60/namespacepyfolio_1_1simd_1aa73066422103347fde2fc199abc7d9ec" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::simd::calculate_returns_simd</definition>
        <argsstring>(std::span&lt; const double &gt; prices, std::span&lt; double &gt; returns) noexcept</argsstring>
        <name>calculate_returns_simd</name>
        <qualifiedname>pyfolio::simd::calculate_returns_simd</qualifiedname>
        <param>
          <type>std::span&lt; const double &gt;</type>
          <declname>prices</declname>
        </param>
        <param>
          <type>std::span&lt; double &gt;</type>
          <declname>returns</declname>
        </param>
        <briefdescription>
<para>SIMD-optimized returns calculation: result[i] = (data[i] - data[i-1]) / data[i-1]. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" line="292" column="6" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" bodystart="292" bodyend="306" declfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" declline="100" declcolumn="6"/>
        <references refid="d0/d60/namespacepyfolio_1_1simd_1ad7801140ceb50d53111dc0137b1c093c" compoundref="df/d95/simd__math_8cpp" startline="109" endline="138">vector_multiply</references>
        <references refid="d0/d60/namespacepyfolio_1_1simd_1a0eb32889b1c6598cb6d836322b1fd4e7" compoundref="df/d95/simd__math_8cpp" startline="78" endline="107">vector_subtract</references>
      </memberdef>
      <memberdef kind="function" id="d0/d60/namespacepyfolio_1_1simd_1a896677893fce13d3a440226d4bd1b228" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::simd::cumulative_product_simd</definition>
        <argsstring>(std::span&lt; const double &gt; data, std::span&lt; double &gt; result) noexcept</argsstring>
        <name>cumulative_product_simd</name>
        <qualifiedname>pyfolio::simd::cumulative_product_simd</qualifiedname>
        <param>
          <type>std::span&lt; const double &gt;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::span&lt; double &gt;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>SIMD-optimized cumulative product calculation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" line="308" column="6" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" bodystart="308" bodyend="321" declfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" declline="105" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d0/d60/namespacepyfolio_1_1simd_1af019ba74cae4a4d4555ac87c48891107" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double pyfolio::simd::correlation_simd</definition>
        <argsstring>(std::span&lt; const double &gt; x, std::span&lt; const double &gt; y) noexcept</argsstring>
        <name>correlation_simd</name>
        <qualifiedname>pyfolio::simd::correlation_simd</qualifiedname>
        <param>
          <type>std::span&lt; const double &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::span&lt; const double &gt;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>SIMD-optimized correlation coefficient calculation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" line="323" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" bodystart="323" bodyend="333" declfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" declline="110" declcolumn="8"/>
        <references refid="d0/d60/namespacepyfolio_1_1simd_1a032be961dd206012f9e725c2528eb98c" compoundref="df/d95/simd__math_8cpp" startline="335" endline="350">covariance_simd</references>
        <references refid="d0/d60/namespacepyfolio_1_1simd_1ad3431d9b85ba23bb4b87ca4dd8831693" compoundref="df/d95/simd__math_8cpp" startline="226" endline="230">vector_mean</references>
        <references refid="d0/d60/namespacepyfolio_1_1simd_1a35307dabe07b88ba83fc57c851c9139b" compoundref="df/d95/simd__math_8cpp" startline="249" endline="251">vector_std</references>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a41ce57e7df0fc468024c1fb40b2c773a" compoundref="d8/d51/time__series_8h" startline="1152" endline="1194">pyfolio::TimeSeries&lt; MarketIndicators &gt;::correlation</referencedby>
        <referencedby refid="db/de2/namespacepyfolio_1_1simd_1_1timeseries_1a71edb3412a293dbfd763198caa45f464" compoundref="d6/d99/simd__math_8h" startline="238" endline="248">pyfolio::simd::timeseries::correlation_fast</referencedby>
      </memberdef>
      <memberdef kind="function" id="d0/d60/namespacepyfolio_1_1simd_1a032be961dd206012f9e725c2528eb98c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double pyfolio::simd::covariance_simd</definition>
        <argsstring>(std::span&lt; const double &gt; x, std::span&lt; const double &gt; y, double mean_x, double mean_y) noexcept</argsstring>
        <name>covariance_simd</name>
        <qualifiedname>pyfolio::simd::covariance_simd</qualifiedname>
        <param>
          <type>std::span&lt; const double &gt;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::span&lt; const double &gt;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mean_x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>mean_y</declname>
        </param>
        <briefdescription>
<para>SIMD-optimized covariance calculation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" line="335" column="8" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/math/simd_math.cpp" bodystart="335" bodyend="350" declfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" declline="115" declcolumn="8"/>
        <references refid="d0/d60/namespacepyfolio_1_1simd_1ad7801140ceb50d53111dc0137b1c093c" compoundref="df/d95/simd__math_8cpp" startline="109" endline="138">vector_multiply</references>
        <references refid="d0/d60/namespacepyfolio_1_1simd_1a0eb32889b1c6598cb6d836322b1fd4e7" compoundref="df/d95/simd__math_8cpp" startline="78" endline="107">vector_subtract</references>
        <references refid="d0/d60/namespacepyfolio_1_1simd_1a60235417cf246196aeb42e6211a07046" compoundref="df/d95/simd__math_8cpp" startline="199" endline="224">vector_sum</references>
        <referencedby refid="d0/d60/namespacepyfolio_1_1simd_1af019ba74cae4a4d4555ac87c48891107" compoundref="df/d95/simd__math_8cpp" startline="323" endline="333">correlation_simd</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/math/simd_math.h" line="19" column="1"/>
  </compounddef>
</doxygen>
