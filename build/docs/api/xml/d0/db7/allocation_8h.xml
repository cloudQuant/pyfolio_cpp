<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d0/db7/allocation_8h" kind="file" language="C++">
    <compoundname>allocation.h</compoundname>
    <includes refid="d2/d99/dataframe_8h" local="yes">../core/dataframe.h</includes>
    <includes refid="de/d1b/datetime_8h" local="yes">../core/datetime.h</includes>
    <includes refid="d3/d11/error__handling_8h" local="yes">../core/error_handling.h</includes>
    <includes refid="d9/d49/types_8h" local="yes">../core/types.h</includes>
    <includes refid="d7/d0c/holdings_8h" local="yes">holdings.h</includes>
    <includes local="no">map</includes>
    <includes local="no">numeric</includes>
    <includes local="no">set</includes>
    <includedby refid="d7/d56/transaction__analysis__example_8cpp" local="no">/Users/yunjinqi/Documents/source_code/pyfolio_cpp/examples/transaction_analysis_example.cpp</includedby>
    <includedby refid="d0/d04/positions_8h" local="yes">/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/positions/positions.h</includedby>
    <includedby refid="d3/d30/pyfolio_8h" local="yes">/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/pyfolio.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>../core/dataframe.h</label>
        <link refid="d2/d99/dataframe_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>datetime.h</label>
        <link refid="de/d1b/datetime_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>error_handling.h</label>
        <link refid="d3/d11/error__handling_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>time_series.h</label>
        <link refid="d8/d51/time__series_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>types.h</label>
        <link refid="d9/d49/types_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>../math/simd_math.h</label>
        <link refid="d6/d99/simd__math_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/positions/allocation.h</label>
        <link refid="d0/db7/allocation_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>holdings.h</label>
        <link refid="d7/d0c/holdings_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>../transactions/transaction.h</label>
        <link refid="d0/db6/transaction_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>algorithm</label>
      </node>
      <node id="27">
        <label>any</label>
      </node>
      <node id="12">
        <label>chrono</label>
      </node>
      <node id="22">
        <label>cmath</label>
      </node>
      <node id="13">
        <label>concepts</label>
      </node>
      <node id="14">
        <label>cstddef</label>
      </node>
      <node id="15">
        <label>cstdint</label>
      </node>
      <node id="23">
        <label>deque</label>
      </node>
      <node id="5">
        <label>exception</label>
      </node>
      <node id="6">
        <label>functional</label>
      </node>
      <node id="24">
        <label>limits</label>
      </node>
      <node id="25">
        <label>map</label>
      </node>
      <node id="26">
        <label>numeric</label>
      </node>
      <node id="7">
        <label>optional</label>
      </node>
      <node id="18">
        <label>set</label>
      </node>
      <node id="8">
        <label>source_location</label>
      </node>
      <node id="21">
        <label>span</label>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="28">
        <label>typeindex</label>
      </node>
      <node id="10">
        <label>variant</label>
      </node>
      <node id="16">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="15">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/examples/attribution_example.cpp</label>
        <link refid="d8/d00/attribution__example_8cpp"/>
      </node>
      <node id="16">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/examples/basic_example.cpp</label>
        <link refid="d3/d6a/basic__example_8cpp"/>
      </node>
      <node id="17">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/examples/bayesian_analysis_example.cpp</label>
        <link refid="da/d7c/bayesian__analysis__example_8cpp"/>
      </node>
      <node id="18">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/examples/capacity_analysis_example.cpp</label>
        <link refid="d1/db6/capacity__analysis__example_8cpp"/>
      </node>
      <node id="4">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/examples/plotly_enhanced_example.cpp</label>
        <link refid="d7/d5f/plotly__enhanced__example_8cpp"/>
      </node>
      <node id="13">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/examples/rest_api_example.cpp</label>
        <link refid="d1/d43/rest__api__example_8cpp"/>
      </node>
      <node id="19">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/examples/risk_analysis_example.cpp</label>
        <link refid="db/dc6/risk__analysis__example_8cpp"/>
      </node>
      <node id="2">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/examples/transaction_analysis_example.cpp</label>
        <link refid="d7/d56/transaction__analysis__example_8cpp"/>
      </node>
      <node id="5">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/turnover_enhanced.h</label>
        <link refid="d2/d40/turnover__enhanced_8h"/>
      </node>
      <node id="1">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/positions/allocation.h</label>
        <link refid="d0/db7/allocation_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/positions/positions.h</label>
        <link refid="d0/d04/positions_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/pyfolio.h</label>
        <link refid="d3/d30/pyfolio_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/utils/intraday.h</label>
        <link refid="d2/d59/intraday_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/visualization/matplotlib_integration.h</label>
        <link refid="dc/d16/matplotlib__integration_8h"/>
      </node>
      <node id="9">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/visualization/plotly_enhanced.h</label>
        <link refid="d1/dcd/plotly__enhanced_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/web/json_serializer.h</label>
        <link refid="d4/d45/json__serializer_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/web/rest_api_server.h</label>
        <link refid="de/de7/rest__api__server_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/utils/intraday.cpp</label>
        <link refid="dc/d51/intraday_8cpp"/>
      </node>
      <node id="10">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/src/visualization/plotly_enhanced.cpp</label>
        <link refid="d2/dd1/plotly__enhanced_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="d6/d8e/structpyfolio_1_1positions_1_1SectorAllocation" prot="public">pyfolio::positions::SectorAllocation</innerclass>
    <innerclass refid="de/df7/structpyfolio_1_1positions_1_1ConcentrationMetrics" prot="public">pyfolio::positions::ConcentrationMetrics</innerclass>
    <innerclass refid="dd/dea/classpyfolio_1_1positions_1_1AllocationAnalyzer" prot="public">pyfolio::positions::AllocationAnalyzer</innerclass>
    <innerclass refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift" prot="public">pyfolio::positions::AllocationAnalyzer::AllocationDrift</innerclass>
    <innernamespace refid="d7/df8/namespacepyfolio">pyfolio</innernamespace>
    <innernamespace refid="df/d8b/namespacepyfolio_1_1positions">pyfolio::positions</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d2/d99/dataframe_8h" kindref="compound">../core/dataframe.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="de/d1b/datetime_8h" kindref="compound">../core/datetime.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/d11/error__handling_8h" kindref="compound">../core/error_handling.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d9/d49/types_8h" kindref="compound">../core/types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d7/d0c/holdings_8h" kindref="compound">holdings.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="df/d8b/namespacepyfolio_1_1positions" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="df/d8b/namespacepyfolio_1_1positions" kindref="compound">pyfolio::positions</ref><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="d6/d8e/structpyfolio_1_1positions_1_1SectorAllocation" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d6/d8e/structpyfolio_1_1positions_1_1SectorAllocation" kindref="compound">SectorAllocation</ref><sp/>{</highlight></codeline>
<codeline lineno="18" refid="d6/d8e/structpyfolio_1_1positions_1_1SectorAllocation_1a4b78c34558021604a74e4b4230a681a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="d6/d8e/structpyfolio_1_1positions_1_1SectorAllocation_1a4b78c34558021604a74e4b4230a681a4" kindref="member">sector</ref>;</highlight></codeline>
<codeline lineno="19" refid="d6/d8e/structpyfolio_1_1positions_1_1SectorAllocation_1a55a597cd426df710e80f6f1ba5c80a69" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/namespacepyfolio_1af989fd50261f45e6abc49511c6dfbdf0" kindref="member">Weight</ref><sp/><ref refid="d6/d8e/structpyfolio_1_1positions_1_1SectorAllocation_1a55a597cd426df710e80f6f1ba5c80a69" kindref="member">weight</ref>;</highlight></codeline>
<codeline lineno="20" refid="d6/d8e/structpyfolio_1_1positions_1_1SectorAllocation_1a2cde8b81f12161c25c3c757c62d86998" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d6/d8e/structpyfolio_1_1positions_1_1SectorAllocation_1a2cde8b81f12161c25c3c757c62d86998" kindref="member">market_value</ref>;</highlight></codeline>
<codeline lineno="21" refid="d6/d8e/structpyfolio_1_1positions_1_1SectorAllocation_1a0978697d80a4303c114b97b90349bf58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d6/d8e/structpyfolio_1_1positions_1_1SectorAllocation_1a0978697d80a4303c114b97b90349bf58" kindref="member">num_positions</ref>;</highlight></codeline>
<codeline lineno="22" refid="d6/d8e/structpyfolio_1_1positions_1_1SectorAllocation_1a90e2ea9c911ff7541104fc69093ce166" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Symbol&gt;<sp/><ref refid="d6/d8e/structpyfolio_1_1positions_1_1SectorAllocation_1a90e2ea9c911ff7541104fc69093ce166" kindref="member">symbols</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="de/df7/structpyfolio_1_1positions_1_1ConcentrationMetrics" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="de/df7/structpyfolio_1_1positions_1_1ConcentrationMetrics" kindref="compound">ConcentrationMetrics</ref><sp/>{</highlight></codeline>
<codeline lineno="29" refid="de/df7/structpyfolio_1_1positions_1_1ConcentrationMetrics_1aef9092acbf2e661d5ce766585c1f0cdb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="de/df7/structpyfolio_1_1positions_1_1ConcentrationMetrics_1aef9092acbf2e661d5ce766585c1f0cdb" kindref="member">herfindahl_index</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sum<sp/>of<sp/>squared<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="de/df7/structpyfolio_1_1positions_1_1ConcentrationMetrics_1a94e6caef55c26cd6cc91605ac149a04e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="de/df7/structpyfolio_1_1positions_1_1ConcentrationMetrics_1a94e6caef55c26cd6cc91605ac149a04e" kindref="member">top_5_concentration</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Weight<sp/>of<sp/>top<sp/>5<sp/>positions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="de/df7/structpyfolio_1_1positions_1_1ConcentrationMetrics_1a988c0fe83c96a4506846a910f3f1e394" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="de/df7/structpyfolio_1_1positions_1_1ConcentrationMetrics_1a988c0fe83c96a4506846a910f3f1e394" kindref="member">top_10_concentration</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>Weight<sp/>of<sp/>top<sp/>10<sp/>positions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="de/df7/structpyfolio_1_1positions_1_1ConcentrationMetrics_1a6ae7702fb6d128f134c3af603685db6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="de/df7/structpyfolio_1_1positions_1_1ConcentrationMetrics_1a6ae7702fb6d128f134c3af603685db6c" kindref="member">gini_coefficient</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Inequality<sp/>measure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="de/df7/structpyfolio_1_1positions_1_1ConcentrationMetrics_1a7fafb6cafd331be51b5d2dc8162e5567" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="de/df7/structpyfolio_1_1positions_1_1ConcentrationMetrics_1a7fafb6cafd331be51b5d2dc8162e5567" kindref="member">effective_positions</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>/<sp/>herfindahl_index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal">};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="dd/dea/classpyfolio_1_1positions_1_1AllocationAnalyzer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="dd/dea/classpyfolio_1_1positions_1_1AllocationAnalyzer" kindref="compound">AllocationAnalyzer</ref><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;Symbol,<sp/>std::string&gt;<sp/>symbol_to_sector_;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;Symbol,<sp/>std::string&gt;<sp/>symbol_to_industry_;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;Symbol,<sp/>std::string&gt;<sp/>symbol_to_country_;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="49" refid="dd/dea/classpyfolio_1_1positions_1_1AllocationAnalyzer_1a24d506b4919354ae06016c026030afca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/dea/classpyfolio_1_1positions_1_1AllocationAnalyzer_1a24d506b4919354ae06016c026030afca" kindref="member">set_sector_mapping</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Symbol,<sp/>std::string&gt;&amp;<sp/>mapping)<sp/>{<sp/>symbol_to_sector_<sp/>=<sp/>mapping;<sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="dd/dea/classpyfolio_1_1positions_1_1AllocationAnalyzer_1af79451db1fb1ae8ad17ca246d6d6ea29" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/dea/classpyfolio_1_1positions_1_1AllocationAnalyzer_1af79451db1fb1ae8ad17ca246d6d6ea29" kindref="member">set_industry_mapping</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Symbol,<sp/>std::string&gt;&amp;<sp/>mapping)<sp/>{<sp/>symbol_to_industry_<sp/>=<sp/>mapping;<sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="dd/dea/classpyfolio_1_1positions_1_1AllocationAnalyzer_1a44f53acaa22284992713a45e71b20331" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dd/dea/classpyfolio_1_1positions_1_1AllocationAnalyzer_1a44f53acaa22284992713a45e71b20331" kindref="member">set_country_mapping</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Symbol,<sp/>std::string&gt;&amp;<sp/>mapping)<sp/>{<sp/>symbol_to_country_<sp/>=<sp/>mapping;<sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="dd/dea/classpyfolio_1_1positions_1_1AllocationAnalyzer_1af712568121f03d778a806ab3de01afa8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;std::vector&lt;SectorAllocation&gt;</ref>&gt;<sp/><ref refid="dd/dea/classpyfolio_1_1positions_1_1AllocationAnalyzer_1af712568121f03d778a806ab3de01afa8" kindref="member">calculate_sector_allocations</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings" kindref="compound">PortfolioHoldings</ref>&amp;<sp/>holdings)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(holdings.<ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings_1a315a3a6f55a4101a289ab1bf2003762a" kindref="member">holdings</ref>().empty())<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;std::vector&lt;SectorAllocation&gt;</ref>&gt;::error(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" kindref="member">ErrorCode::InsufficientData</ref>,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>holdings<sp/>to<sp/>analyze&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Aggregate<sp/>by<sp/>sector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>SectorAllocation&gt;<sp/>sector_map;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[symbol,<sp/>holding]<sp/>:<sp/>holdings.<ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings_1a315a3a6f55a4101a289ab1bf2003762a" kindref="member">holdings</ref>())<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>sector<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Unknown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>symbol_to_sector_.find(symbol);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>symbol_to_sector_.end())<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sector<sp/>=<sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>alloc<sp/><sp/>=<sp/>sector_map[sector];</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc.sector<sp/>=<sp/>sector;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc.weight<sp/>+=<sp/>holding.weight;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc.market_value<sp/>+=<sp/>holding.market_value;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc.num_positions++;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc.symbols.push_back(symbol);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>to<sp/>vector<sp/>and<sp/>sort<sp/>by<sp/>weight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SectorAllocation&gt;<sp/>result;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[sector,<sp/>alloc]<sp/>:<sp/>sector_map)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back(alloc);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(result.begin(),<sp/>result.end(),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/d8e/structpyfolio_1_1positions_1_1SectorAllocation" kindref="compound">SectorAllocation</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/d8e/structpyfolio_1_1positions_1_1SectorAllocation" kindref="compound">SectorAllocation</ref>&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::abs(a.weight)<sp/>&gt;<sp/>std::abs(b.weight);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;std::vector&lt;SectorAllocation&gt;</ref>&gt;::success(std::move(result));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="dd/dea/classpyfolio_1_1positions_1_1AllocationAnalyzer_1a530162fa9e593cbe432222f1d2d21d79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;ConcentrationMetrics&gt;</ref><sp/><ref refid="dd/dea/classpyfolio_1_1positions_1_1AllocationAnalyzer_1a530162fa9e593cbe432222f1d2d21d79" kindref="member">calculate_concentration</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings" kindref="compound">PortfolioHoldings</ref>&amp;<sp/>holdings)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(holdings.<ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings_1a315a3a6f55a4101a289ab1bf2003762a" kindref="member">holdings</ref>().empty())<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" kindref="member">Result&lt;ConcentrationMetrics&gt;::error</ref>(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" kindref="member">ErrorCode::InsufficientData</ref>,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>holdings<sp/>to<sp/>analyze&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/df7/structpyfolio_1_1positions_1_1ConcentrationMetrics" kindref="compound">ConcentrationMetrics</ref><sp/>metrics{};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>sorted<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>weights;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[symbol,<sp/>holding]<sp/>:<sp/>holdings.<ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings_1a315a3a6f55a4101a289ab1bf2003762a" kindref="member">holdings</ref>())<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weights.push_back(std::abs(holding.weight));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(weights.begin(),<sp/>weights.end(),<sp/>std::greater&lt;double&gt;());</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Herfindahl<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metrics.herfindahl_index<sp/>=</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::accumulate(weights.begin(),<sp/>weights.end(),<sp/>0.0,<sp/>[](</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>w)<sp/>{<sp/>return<sp/>sum<sp/>+<sp/>w<sp/>*<sp/>w;<sp/>});</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Top<sp/>N<sp/>concentrations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(weights.size()<sp/>&gt;=<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metrics.top_5_concentration<sp/>=<sp/>std::accumulate(weights.begin(),<sp/>weights.begin()<sp/>+<sp/>5,<sp/>0.0);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metrics.top_5_concentration<sp/>=<sp/>std::accumulate(weights.begin(),<sp/>weights.end(),<sp/>0.0);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(weights.size()<sp/>&gt;=<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metrics.top_10_concentration<sp/>=<sp/>std::accumulate(weights.begin(),<sp/>weights.begin()<sp/>+<sp/>10,<sp/>0.0);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metrics.top_10_concentration<sp/>=<sp/>std::accumulate(weights.begin(),<sp/>weights.end(),<sp/>0.0);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Effective<sp/>positions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(metrics.herfindahl_index<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metrics.effective_positions<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1.0<sp/>/<sp/>metrics.herfindahl_index);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Gini<sp/>coefficient</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metrics.gini_coefficient<sp/>=<sp/>calculate_gini_coefficient(weights);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" kindref="member">Result&lt;ConcentrationMetrics&gt;::success</ref>(metrics);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>GroupFunc&gt;</highlight></codeline>
<codeline lineno="151" refid="dd/dea/classpyfolio_1_1positions_1_1AllocationAnalyzer_1a914e6a4ba11f6346e18dad6f0150e7ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;DataFrame&gt;</ref><sp/><ref refid="dd/dea/classpyfolio_1_1positions_1_1AllocationAnalyzer_1a914e6a4ba11f6346e18dad6f0150e7ed" kindref="member">analyze_by_group</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings" kindref="compound">PortfolioHoldings</ref>&amp;<sp/>holdings,<sp/>GroupFunc<sp/>group_func,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>group_name)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(holdings.<ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings_1a315a3a6f55a4101a289ab1bf2003762a" kindref="member">holdings</ref>().empty())<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" kindref="member">Result&lt;DataFrame&gt;::error</ref>(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" kindref="member">ErrorCode::InsufficientData</ref>,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>holdings<sp/>to<sp/>analyze&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Group<sp/>holdings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>std::vector&lt;const<sp/>Holding*&gt;&gt;<sp/>groups;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[symbol,<sp/>holding]<sp/>:<sp/>holdings.<ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings_1a315a3a6f55a4101a289ab1bf2003762a" kindref="member">holdings</ref>())<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>group<sp/>=<sp/>group_func(symbol,<sp/>holding);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>groups[group].push_back(&amp;holding);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>group<sp/>statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;DateTime&gt;<sp/>timestamps;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>group_names;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>weights;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>market_values;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>counts;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[group,<sp/>holdings_vec]<sp/>:<sp/>groups)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timestamps.push_back(holdings.<ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings_1ae6d65bfe733f0302cd61c10f4b5bd75f" kindref="member">timestamp</ref>());</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>group_names.push_back(group);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>group_weight<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>group_value<sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>h<sp/>:<sp/>holdings_vec)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>group_weight<sp/>+=<sp/>h-&gt;weight;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>group_value<sp/>+=<sp/>h-&gt;market_value;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>weights.push_back(group_weight);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>market_values.push_back(group_value);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counts.push_back(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(holdings_vec.size()));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/deb/classpyfolio_1_1DataFrame" kindref="compound">DataFrame</ref><sp/>df{timestamps};</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df.<ref refid="da/deb/classpyfolio_1_1DataFrame_1ae16ceddcf917845c49128783794c109e" kindref="member">add_column</ref>(group_name,<sp/>group_names);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df.add_column(</highlight><highlight class="stringliteral">&quot;weight&quot;</highlight><highlight class="normal">,<sp/>weights);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df.add_column(</highlight><highlight class="stringliteral">&quot;market_value&quot;</highlight><highlight class="normal">,<sp/>market_values);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df.add_column(</highlight><highlight class="stringliteral">&quot;count&quot;</highlight><highlight class="normal">,<sp/>counts);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" kindref="member">Result&lt;DataFrame&gt;::success</ref>(std::move(df));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift" kindref="compound">AllocationDrift</ref><sp/>{</highlight></codeline>
<codeline lineno="202" refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1ae68e873dc23587ccf167a01e78d87106" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref><sp/><ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1ae68e873dc23587ccf167a01e78d87106" kindref="member">symbol</ref>;</highlight></codeline>
<codeline lineno="203" refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1a209ff069f9409126e6a6964e468e0c24" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/namespacepyfolio_1af989fd50261f45e6abc49511c6dfbdf0" kindref="member">Weight</ref><sp/><ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1a209ff069f9409126e6a6964e468e0c24" kindref="member">current_weight</ref>;</highlight></codeline>
<codeline lineno="204" refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1ac272ca398905d448afd2dfd9c18519df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/namespacepyfolio_1af989fd50261f45e6abc49511c6dfbdf0" kindref="member">Weight</ref><sp/><ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1ac272ca398905d448afd2dfd9c18519df" kindref="member">target_weight</ref>;</highlight></codeline>
<codeline lineno="205" refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1a42244e5214823ad839565343ed041a52" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/namespacepyfolio_1af989fd50261f45e6abc49511c6dfbdf0" kindref="member">Weight</ref><sp/><ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1a42244e5214823ad839565343ed041a52" kindref="member">drift</ref>;</highlight></codeline>
<codeline lineno="206" refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1a0bff4c1d46fb69e051ba8f72ac692464" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1a0bff4c1d46fb69e051ba8f72ac692464" kindref="member">rebalance_shares</ref>;</highlight></codeline>
<codeline lineno="207" refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1aad9ff1cf4bd4d298394599e04ced0a82" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1aad9ff1cf4bd4d298394599e04ced0a82" kindref="member">rebalance_value</ref>;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="dd/dea/classpyfolio_1_1positions_1_1AllocationAnalyzer_1a958088048206a41ef14fe5dd1a34aa15" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;std::vector&lt;AllocationDrift&gt;</ref>&gt;<sp/><ref refid="dd/dea/classpyfolio_1_1positions_1_1AllocationAnalyzer_1a958088048206a41ef14fe5dd1a34aa15" kindref="member">calculate_drift</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings" kindref="compound">PortfolioHoldings</ref>&amp;<sp/>holdings,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Symbol,<sp/>Weight&gt;&amp;<sp/>target_weights)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;AllocationDrift&gt;<sp/>drifts;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;Symbol&gt;<sp/>all_symbols;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>all<sp/>symbols</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[symbol,<sp/>holding]<sp/>:<sp/>holdings.<ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings_1a315a3a6f55a4101a289ab1bf2003762a" kindref="member">holdings</ref>())<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_symbols.insert(symbol);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[symbol,<sp/>weight]<sp/>:<sp/>target_weights)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_symbols.insert(symbol);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>drift<sp/>for<sp/>each<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>symbol<sp/>:<sp/>all_symbols)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift" kindref="compound">AllocationDrift</ref><sp/>drift;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drift.<ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1ae68e873dc23587ccf167a01e78d87106" kindref="member">symbol</ref><sp/>=<sp/>symbol;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>current<sp/>weight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>holding_result<sp/>=<sp/>holdings.<ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings_1a0d055a35906794c27b9136229a063a65" kindref="member">get_holding</ref>(symbol);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(holding_result.is_ok())<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drift.<ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1a209ff069f9409126e6a6964e468e0c24" kindref="member">current_weight</ref><sp/>=<sp/>holding_result.value().weight;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drift.<ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1a209ff069f9409126e6a6964e468e0c24" kindref="member">current_weight</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>target<sp/>weight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>target_it<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>target_weights.find(symbol);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drift.<ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1ac272ca398905d448afd2dfd9c18519df" kindref="member">target_weight</ref><sp/>=<sp/>(target_it<sp/>!=<sp/>target_weights.end())<sp/>?<sp/>target_it-&gt;second<sp/>:<sp/>0.0;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>drift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drift.<ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1a42244e5214823ad839565343ed041a52" kindref="member">drift</ref><sp/>=<sp/>drift.<ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1a209ff069f9409126e6a6964e468e0c24" kindref="member">current_weight</ref><sp/>-<sp/>drift.<ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1ac272ca398905d448afd2dfd9c18519df" kindref="member">target_weight</ref>;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>rebalance<sp/>requirements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target_value<sp/><sp/><sp/>=<sp/>holdings.<ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings_1a024425899ff9486a38f8a209c4369924" kindref="member">total_value</ref>()<sp/>*<sp/>drift.<ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1ac272ca398905d448afd2dfd9c18519df" kindref="member">target_weight</ref>;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_value<sp/><sp/>=<sp/>holdings.<ref refid="dc/dbf/classpyfolio_1_1positions_1_1PortfolioHoldings_1a024425899ff9486a38f8a209c4369924" kindref="member">total_value</ref>()<sp/>*<sp/>drift.<ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1a209ff069f9409126e6a6964e468e0c24" kindref="member">current_weight</ref>;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drift.<ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1aad9ff1cf4bd4d298394599e04ced0a82" kindref="member">rebalance_value</ref><sp/>=<sp/>target_value<sp/>-<sp/>current_value;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(holding_result.is_ok()<sp/>&amp;&amp;<sp/>holding_result.value().current_price<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drift.<ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1a0bff4c1d46fb69e051ba8f72ac692464" kindref="member">rebalance_shares</ref><sp/>=<sp/>drift.<ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1aad9ff1cf4bd4d298394599e04ced0a82" kindref="member">rebalance_value</ref><sp/>/<sp/>holding_result.value().current_price;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drift.<ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift_1a0bff4c1d46fb69e051ba8f72ac692464" kindref="member">rebalance_shares</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drifts.push_back(drift);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>by<sp/>absolute<sp/>drift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(drifts.begin(),<sp/>drifts.end(),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift" kindref="compound">AllocationDrift</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d1/db1/structpyfolio_1_1positions_1_1AllocationAnalyzer_1_1AllocationDrift" kindref="compound">AllocationDrift</ref>&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::abs(a.drift)<sp/>&gt;<sp/>std::abs(b.drift);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;std::vector&lt;AllocationDrift&gt;</ref>&gt;::success(std::move(drifts));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="dd/dea/classpyfolio_1_1positions_1_1AllocationAnalyzer_1aa40a3a7468229f09a6950c0d9e8b459f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;DataFrame&gt;</ref><sp/><ref refid="dd/dea/classpyfolio_1_1positions_1_1AllocationAnalyzer_1aa40a3a7468229f09a6950c0d9e8b459f" kindref="member">analyze_allocation_stability</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d0/d02/classpyfolio_1_1positions_1_1HoldingsSeries" kindref="compound">HoldingsSeries</ref>&amp;<sp/>holdings_series)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(holdings_series.<ref refid="d0/d02/classpyfolio_1_1positions_1_1HoldingsSeries_1aa339b863f39735db8959a933074a432e" kindref="member">size</ref>()<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" kindref="member">Result&lt;DataFrame&gt;::error</ref>(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" kindref="member">ErrorCode::InsufficientData</ref>,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Need<sp/>at<sp/>least<sp/>2<sp/>holdings<sp/>snapshots<sp/>for<sp/>stability<sp/>analysis&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;DateTime&gt;<sp/>timestamps;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>allocation_changes;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>turnover_rates;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>position_changes;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>holdings_series.<ref refid="d0/d02/classpyfolio_1_1positions_1_1HoldingsSeries_1aa339b863f39735db8959a933074a432e" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>prev<sp/>=<sp/>holdings_series[i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>curr<sp/>=<sp/>holdings_series[i];</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timestamps.push_back(curr.timestamp());</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>allocation<sp/>change<sp/>(sum<sp/>of<sp/>absolute<sp/>weight<sp/>changes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_change<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;Symbol&gt;<sp/>all_symbols;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[symbol,<sp/>holding]<sp/>:<sp/>prev.holdings())<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_symbols.insert(symbol);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[symbol,<sp/>holding]<sp/>:<sp/>curr.holdings())<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_symbols.insert(symbol);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>symbol<sp/>:<sp/>all_symbols)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>prev_weight<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>curr_weight<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>prev_holding<sp/>=<sp/>prev.get_holding(symbol);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev_holding.is_ok())<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_weight<sp/>=<sp/>prev_holding.value().weight;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>curr_holding<sp/>=<sp/>curr.get_holding(symbol);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curr_holding.is_ok())<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curr_weight<sp/>=<sp/>curr_holding.value().weight;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_change<sp/>+=<sp/>std::abs(curr_weight<sp/>-<sp/>prev_weight);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocation_changes.push_back(total_change);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Turnover<sp/>rate<sp/>(half<sp/>of<sp/>total<sp/>change<sp/>to<sp/>avoid<sp/>double<sp/>counting)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>turnover_rates.push_back(total_change<sp/>/<sp/>2.0);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Position<sp/>changes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>positions_added<sp/><sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>positions_removed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[symbol,<sp/>holding]<sp/>:<sp/>curr.holdings())<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev.get_holding(symbol).is_error())<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>positions_added++;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[symbol,<sp/>holding]<sp/>:<sp/>prev.holdings())<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(curr.get_holding(symbol).is_error())<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>positions_removed++;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position_changes.push_back(positions_added<sp/>+<sp/>positions_removed);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="da/deb/classpyfolio_1_1DataFrame" kindref="compound">DataFrame</ref><sp/>df{timestamps};</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df.<ref refid="da/deb/classpyfolio_1_1DataFrame_1ae16ceddcf917845c49128783794c109e" kindref="member">add_column</ref>(</highlight><highlight class="stringliteral">&quot;allocation_change&quot;</highlight><highlight class="normal">,<sp/>allocation_changes);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df.add_column(</highlight><highlight class="stringliteral">&quot;turnover_rate&quot;</highlight><highlight class="normal">,<sp/>turnover_rates);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df.add_column(</highlight><highlight class="stringliteral">&quot;position_changes&quot;</highlight><highlight class="normal">,<sp/>position_changes);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" kindref="member">Result&lt;DataFrame&gt;::success</ref>(std::move(df));</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>calculate_gini_coefficient(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>weights)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(weights.empty())</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>sorted_weights<sp/>=<sp/>weights;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(sorted_weights.begin(),<sp/>sorted_weights.end());</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_of_absolute_differences<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_of_weights<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sorted_weights.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum_of_weights<sp/>+=<sp/>sorted_weights[i];</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum_of_absolute_differences<sp/>+=<sp/>(2.0<sp/>*<sp/>(i<sp/>+<sp/>1)<sp/>-<sp/>sorted_weights.size()<sp/>-<sp/>1)<sp/>*<sp/>sorted_weights[i];</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sum_of_weights<sp/>==<sp/>0.0)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum_of_absolute_differences<sp/>/<sp/>(sorted_weights.size()<sp/>*<sp/>sum_of_weights);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal">};</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862" kindref="member">MarketCapBucket</ref><sp/>{</highlight></codeline>
<codeline lineno="372" refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a96ff7583ddd60786ca13dc56155c441b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a96ff7583ddd60786ca13dc56155c441b" kindref="member">MegaCap</ref>,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&gt;<sp/>$200B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a4ef92fddf919b619c32959c093d47abe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a4ef92fddf919b619c32959c093d47abe" kindref="member">LargeCap</ref>,<sp/><sp/></highlight><highlight class="comment">//<sp/>$10B<sp/>-<sp/>$200B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374" refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a12def47f6ee74d8ce5a91b4e42d7fb41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a12def47f6ee74d8ce5a91b4e42d7fb41" kindref="member">MidCap</ref>,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>$2B<sp/>-<sp/>$10B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375" refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a136e3c7bb12e9c10ddaef53629de3af5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a136e3c7bb12e9c10ddaef53629de3af5" kindref="member">SmallCap</ref>,<sp/><sp/></highlight><highlight class="comment">//<sp/>$300M<sp/>-<sp/>$2B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376" refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a3433df1df684ed96ba12a1114f5e38f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a3433df1df684ed96ba12a1114f5e38f0" kindref="member">MicroCap</ref>,<sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;<sp/>$300M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377" refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a88183b946cc5f0e8c96b2e66e1c74a7e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a88183b946cc5f0e8c96b2e66e1c74a7e" kindref="member">Unknown</ref></highlight></codeline>
<codeline lineno="378"><highlight class="normal">};</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="383" refid="df/d8b/namespacepyfolio_1_1positions_1afc1964bf4f1b5a7ad5158222cecb9df4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862" kindref="member">MarketCapBucket</ref><sp/><ref refid="df/d8b/namespacepyfolio_1_1positions_1afc1964bf4f1b5a7ad5158222cecb9df4" kindref="member">classify_market_cap</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>market_cap_millions)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(market_cap_millions<sp/>&gt;<sp/>200000)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a96ff7583ddd60786ca13dc56155c441b" kindref="member">MarketCapBucket::MegaCap</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(market_cap_millions<sp/>&gt;<sp/>10000)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a4ef92fddf919b619c32959c093d47abe" kindref="member">MarketCapBucket::LargeCap</ref>;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(market_cap_millions<sp/>&gt;<sp/>2000)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a12def47f6ee74d8ce5a91b4e42d7fb41" kindref="member">MarketCapBucket::MidCap</ref>;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(market_cap_millions<sp/>&gt;<sp/>300)</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a136e3c7bb12e9c10ddaef53629de3af5" kindref="member">MarketCapBucket::SmallCap</ref>;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(market_cap_millions<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a3433df1df684ed96ba12a1114f5e38f0" kindref="member">MarketCapBucket::MicroCap</ref>;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a88183b946cc5f0e8c96b2e66e1c74a7e" kindref="member">MarketCapBucket::Unknown</ref>;</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="400" refid="df/d8b/namespacepyfolio_1_1positions_1ae891b49e68460a1a6a74aa56da12c441" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="df/d8b/namespacepyfolio_1_1positions_1ae891b49e68460a1a6a74aa56da12c441" kindref="member">market_cap_bucket_to_string</ref>(<ref refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862" kindref="member">MarketCapBucket</ref><sp/>bucket)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(bucket)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a96ff7583ddd60786ca13dc56155c441b" kindref="member">MarketCapBucket::MegaCap</ref>:</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Mega<sp/>Cap&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a4ef92fddf919b619c32959c093d47abe" kindref="member">MarketCapBucket::LargeCap</ref>:</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Large<sp/>Cap&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a12def47f6ee74d8ce5a91b4e42d7fb41" kindref="member">MarketCapBucket::MidCap</ref>:</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Mid<sp/>Cap&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a136e3c7bb12e9c10ddaef53629de3af5" kindref="member">MarketCapBucket::SmallCap</ref>:</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Small<sp/>Cap&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="df/d8b/namespacepyfolio_1_1positions_1a34ae424a2fc767866c6f069714c60862a3433df1df684ed96ba12a1114f5e38f0" kindref="member">MarketCapBucket::MicroCap</ref>:</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Micro<sp/>Cap&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Unknown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>pyfolio::positions</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/positions/allocation.h"/>
  </compounddef>
</doxygen>
