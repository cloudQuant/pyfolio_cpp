<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d0/dae/classpyfolio_1_1positions_1_1PositionAnalyzer" kind="class" language="C++" prot="public">
    <compoundname>pyfolio::positions::PositionAnalyzer</compoundname>
    <includes refid="d0/d04/positions_8h" local="no">positions.h</includes>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="d0/dae/classpyfolio_1_1positions_1_1PositionAnalyzer_1af5a4ea0fbd055859a71de2a7b5d622b8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>static Result&lt; double &gt; pyfolio::positions::PositionAnalyzer::calculate_total_value</definition>
        <argsstring>(const std::unordered_map&lt; std::string, Position &gt; &amp;positions)</argsstring>
        <name>calculate_total_value</name>
        <qualifiedname>pyfolio::positions::PositionAnalyzer::calculate_total_value</qualifiedname>
        <param>
          <type>const std::unordered_map&lt; std::string, <ref refid="d6/df6/structpyfolio_1_1Position" kindref="compound">Position</ref> &gt; &amp;</type>
          <declname>positions</declname>
        </param>
        <briefdescription>
<para>Calculate total portfolio value at a given time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/positions/positions.h" line="29" column="19"/>
      </memberdef>
      <memberdef kind="function" id="d0/dae/classpyfolio_1_1positions_1_1PositionAnalyzer_1a1856203bcfb0cf1ea6aaab2003369056" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; std::pair&lt; double, double &gt; &gt;</type>
        <definition>static Result&lt; std::pair&lt; double, double &gt; &gt; pyfolio::positions::PositionAnalyzer::calculate_exposures</definition>
        <argsstring>(const std::unordered_map&lt; std::string, Position &gt; &amp;positions)</argsstring>
        <name>calculate_exposures</name>
        <qualifiedname>pyfolio::positions::PositionAnalyzer::calculate_exposures</qualifiedname>
        <param>
          <type>const std::unordered_map&lt; std::string, <ref refid="d6/df6/structpyfolio_1_1Position" kindref="compound">Position</ref> &gt; &amp;</type>
          <declname>positions</declname>
        </param>
        <briefdescription>
<para>Calculate long/short exposure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/positions/positions.h" line="34" column="19"/>
      </memberdef>
      <memberdef kind="function" id="d0/dae/classpyfolio_1_1positions_1_1PositionAnalyzer_1afddd94f488fc55a46472ee6981a5f2b8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>static Result&lt; double &gt; pyfolio::positions::PositionAnalyzer::calculate_leverage</definition>
        <argsstring>(const std::unordered_map&lt; std::string, Position &gt; &amp;positions)</argsstring>
        <name>calculate_leverage</name>
        <qualifiedname>pyfolio::positions::PositionAnalyzer::calculate_leverage</qualifiedname>
        <param>
          <type>const std::unordered_map&lt; std::string, <ref refid="d6/df6/structpyfolio_1_1Position" kindref="compound">Position</ref> &gt; &amp;</type>
          <declname>positions</declname>
        </param>
        <briefdescription>
<para>Calculate portfolio leverage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/positions/positions.h" line="40" column="19"/>
      </memberdef>
      <memberdef kind="function" id="d0/dae/classpyfolio_1_1positions_1_1PositionAnalyzer_1a482ffb50288fbf81895adeb28e5aeb46" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; std::vector&lt; std::pair&lt; std::string, <ref refid="d6/df6/structpyfolio_1_1Position" kindref="compound">Position</ref> &gt; &gt; &gt;</type>
        <definition>static Result&lt; std::vector&lt; std::pair&lt; std::string, Position &gt; &gt; &gt; pyfolio::positions::PositionAnalyzer::get_top_positions</definition>
        <argsstring>(const std::unordered_map&lt; std::string, Position &gt; &amp;positions, size_t n=10)</argsstring>
        <name>get_top_positions</name>
        <qualifiedname>pyfolio::positions::PositionAnalyzer::get_top_positions</qualifiedname>
        <param>
          <type>const std::unordered_map&lt; std::string, <ref refid="d6/df6/structpyfolio_1_1Position" kindref="compound">Position</ref> &gt; &amp;</type>
          <declname>positions</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>Get top N positions by absolute value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/positions/positions.h" line="45" column="19"/>
      </memberdef>
      <memberdef kind="function" id="d0/dae/classpyfolio_1_1positions_1_1PositionAnalyzer_1a68c4c5bdb9b38b5ec86322a4b9b093b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t pyfolio::positions::PositionAnalyzer::count_holdings</definition>
        <argsstring>(const std::unordered_map&lt; std::string, Position &gt; &amp;positions)</argsstring>
        <name>count_holdings</name>
        <qualifiedname>pyfolio::positions::PositionAnalyzer::count_holdings</qualifiedname>
        <param>
          <type>const std::unordered_map&lt; std::string, <ref refid="d6/df6/structpyfolio_1_1Position" kindref="compound">Position</ref> &gt; &amp;</type>
          <declname>positions</declname>
        </param>
        <briefdescription>
<para><ref refid="d7/df8/namespacepyfolio_1a03c09fd9b3b52c867944288b0322d060" kindref="member">Count</ref> number of holdings (non-zero positions) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/positions/positions.h" line="51" column="19"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="d6/df6/structpyfolio_1_1Position" kindref="compound">Position</ref> analysis and manipulation utilities. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/positions/positions.h" line="24" column="1" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/positions/positions.h" bodystart="24" bodyend="52"/>
    <listofallmembers>
      <member refid="d0/dae/classpyfolio_1_1positions_1_1PositionAnalyzer_1a1856203bcfb0cf1ea6aaab2003369056" prot="public" virt="non-virtual"><scope>pyfolio::positions::PositionAnalyzer</scope><name>calculate_exposures</name></member>
      <member refid="d0/dae/classpyfolio_1_1positions_1_1PositionAnalyzer_1afddd94f488fc55a46472ee6981a5f2b8" prot="public" virt="non-virtual"><scope>pyfolio::positions::PositionAnalyzer</scope><name>calculate_leverage</name></member>
      <member refid="d0/dae/classpyfolio_1_1positions_1_1PositionAnalyzer_1af5a4ea0fbd055859a71de2a7b5d622b8" prot="public" virt="non-virtual"><scope>pyfolio::positions::PositionAnalyzer</scope><name>calculate_total_value</name></member>
      <member refid="d0/dae/classpyfolio_1_1positions_1_1PositionAnalyzer_1a68c4c5bdb9b38b5ec86322a4b9b093b6" prot="public" virt="non-virtual"><scope>pyfolio::positions::PositionAnalyzer</scope><name>count_holdings</name></member>
      <member refid="d0/dae/classpyfolio_1_1positions_1_1PositionAnalyzer_1a482ffb50288fbf81895adeb28e5aeb46" prot="public" virt="non-virtual"><scope>pyfolio::positions::PositionAnalyzer</scope><name>get_top_positions</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
