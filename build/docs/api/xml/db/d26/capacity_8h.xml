<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="db/d26/capacity_8h" kind="file" language="C++">
    <compoundname>capacity.h</compoundname>
    <includes refid="de/d1b/datetime_8h" local="yes">../core/datetime.h</includes>
    <includes refid="d3/d11/error__handling_8h" local="yes">../core/error_handling.h</includes>
    <includes refid="d8/d51/time__series_8h" local="yes">../core/time_series.h</includes>
    <includes refid="d9/d49/types_8h" local="yes">../core/types.h</includes>
    <includes refid="d7/d0c/holdings_8h" local="yes">../positions/holdings.h</includes>
    <includes refid="d0/db6/transaction_8h" local="yes">../transactions/transaction.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">cmath</includes>
    <includes local="no">map</includes>
    <includes local="no">numeric</includes>
    <includes local="no">vector</includes>
    <includedby refid="d1/db6/capacity__analysis__example_8cpp" local="no">/Users/yunjinqi/Documents/source_code/pyfolio_cpp/examples/capacity_analysis_example.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h</label>
        <link refid="db/d26/capacity_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>../core/dataframe.h</label>
        <link refid="d2/d99/dataframe_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>../core/datetime.h</label>
        <link refid="de/d1b/datetime_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>error_handling.h</label>
        <link refid="d3/d11/error__handling_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>../core/time_series.h</label>
        <link refid="d8/d51/time__series_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>types.h</label>
        <link refid="d9/d49/types_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>../math/simd_math.h</label>
        <link refid="d6/d99/simd__math_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>../positions/holdings.h</label>
        <link refid="d7/d0c/holdings_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>../transactions/transaction.h</label>
        <link refid="d0/db6/transaction_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>algorithm</label>
      </node>
      <node id="28">
        <label>any</label>
      </node>
      <node id="11">
        <label>chrono</label>
      </node>
      <node id="21">
        <label>cmath</label>
      </node>
      <node id="12">
        <label>concepts</label>
      </node>
      <node id="13">
        <label>cstddef</label>
      </node>
      <node id="14">
        <label>cstdint</label>
      </node>
      <node id="22">
        <label>deque</label>
      </node>
      <node id="4">
        <label>exception</label>
      </node>
      <node id="5">
        <label>functional</label>
      </node>
      <node id="23">
        <label>limits</label>
      </node>
      <node id="24">
        <label>map</label>
      </node>
      <node id="25">
        <label>numeric</label>
      </node>
      <node id="6">
        <label>optional</label>
      </node>
      <node id="17">
        <label>set</label>
      </node>
      <node id="7">
        <label>source_location</label>
      </node>
      <node id="20">
        <label>span</label>
      </node>
      <node id="8">
        <label>string</label>
      </node>
      <node id="29">
        <label>typeindex</label>
      </node>
      <node id="9">
        <label>variant</label>
      </node>
      <node id="15">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/examples/capacity_analysis_example.cpp</label>
        <link refid="d1/db6/capacity__analysis__example_8cpp"/>
      </node>
      <node id="1">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h</label>
        <link refid="db/d26/capacity_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure" prot="public">pyfolio::capacity::MarketMicrostructure</innerclass>
    <innerclass refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints" prot="public">pyfolio::capacity::CapacityConstraints</innerclass>
    <innerclass refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult" prot="public">pyfolio::capacity::SecurityCapacityResult</innerclass>
    <innerclass refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult" prot="public">pyfolio::capacity::PortfolioCapacityResult</innerclass>
    <innerclass refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer" prot="public">pyfolio::capacity::CapacityAnalyzer</innerclass>
    <innernamespace refid="d7/df8/namespacepyfolio">pyfolio</innernamespace>
    <innernamespace refid="de/d7a/namespacepyfolio_1_1capacity">pyfolio::capacity</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="de/d1b/datetime_8h" kindref="compound">../core/datetime.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/d11/error__handling_8h" kindref="compound">../core/error_handling.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d8/d51/time__series_8h" kindref="compound">../core/time_series.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d9/d49/types_8h" kindref="compound">../core/types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d7/d0c/holdings_8h" kindref="compound">../positions/holdings.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d0/db6/transaction_8h" kindref="compound">../transactions/transaction.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="de/d7a/namespacepyfolio_1_1capacity" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="de/d7a/namespacepyfolio_1_1capacity" kindref="compound">pyfolio::capacity</ref><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="de/d7a/namespacepyfolio_1_1capacity_1a27e2b8adc90a52a68f79f453f4cfcb70aeab7d1cf667fe34631cf41b7c954d2aa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a27e2b8adc90a52a68f79f453f4cfcb70" kindref="member">ImpactModel</ref><sp/>{<sp/><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a27e2b8adc90a52a68f79f453f4cfcb70a32a843da6ea40ab3b17a3421ccdf671b" kindref="member">Linear</ref>,<sp/><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a27e2b8adc90a52a68f79f453f4cfcb70ae6c1b4ee758a2636a6eaf99105103c56" kindref="member">SquareRoot</ref>,<sp/><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a27e2b8adc90a52a68f79f453f4cfcb70a3c2e32ef9376c9319a8567ee7170dad9" kindref="member">ThreeHalves</ref>,<sp/><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a27e2b8adc90a52a68f79f453f4cfcb70aeab7d1cf667fe34631cf41b7c954d2aa" kindref="member">Almgren</ref><sp/>};</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="de/d7a/namespacepyfolio_1_1capacity_1a47fe4ae8e1af66983423eb3a65e794d2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a47fe4ae8e1af66983423eb3a65e794d2" kindref="member">LiquidityConstraint</ref><sp/>{</highlight></codeline>
<codeline lineno="26" refid="de/d7a/namespacepyfolio_1_1capacity_1a47fe4ae8e1af66983423eb3a65e794d2afdb84c41f58953e18edc79a00a1116ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a47fe4ae8e1af66983423eb3a65e794d2afdb84c41f58953e18edc79a00a1116ea" kindref="member">VolumePercent</ref>,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Percentage<sp/>of<sp/>daily<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="de/d7a/namespacepyfolio_1_1capacity_1a47fe4ae8e1af66983423eb3a65e794d2a6affe9fb84fe77609721559509385e9f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a47fe4ae8e1af66983423eb3a65e794d2a6affe9fb84fe77609721559509385e9f" kindref="member">ADVMultiple</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiple<sp/>of<sp/>average<sp/>daily<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="de/d7a/namespacepyfolio_1_1capacity_1a47fe4ae8e1af66983423eb3a65e794d2a8343d563bac57218fe16de453ebdf85e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a47fe4ae8e1af66983423eb3a65e794d2a8343d563bac57218fe16de453ebdf85e" kindref="member">AbsoluteShares</ref>,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Absolute<sp/>share<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="de/d7a/namespacepyfolio_1_1capacity_1a47fe4ae8e1af66983423eb3a65e794d2abbcd884c8def404daf754bd9c4a14b73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a47fe4ae8e1af66983423eb3a65e794d2abbcd884c8def404daf754bd9c4a14b73" kindref="member">MarketCapPercent</ref><sp/><sp/></highlight><highlight class="comment">//<sp/>Percentage<sp/>of<sp/>market<sp/>cap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure" kindref="compound">MarketMicrostructure</ref><sp/>{</highlight></codeline>
<codeline lineno="36" refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1aff94da91b6c4906c5f03af6701cf73e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref><sp/><ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1aff94da91b6c4906c5f03af6701cf73e3" kindref="member">symbol</ref>;</highlight></codeline>
<codeline lineno="37" refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1ae03c3145dcf42d1ff6722eb2eb39bcce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1ae03c3145dcf42d1ff6722eb2eb39bcce" kindref="member">average_daily_volume</ref>;</highlight></codeline>
<codeline lineno="38" refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a0d47d19b128d51f8bb3a4e0a9a055ab3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a0d47d19b128d51f8bb3a4e0a9a055ab3" kindref="member">average_dollar_volume</ref>;</highlight></codeline>
<codeline lineno="39" refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a6ccc24afaf2583efe2469b1404485ceb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a6ccc24afaf2583efe2469b1404485ceb" kindref="member">market_cap</ref>;</highlight></codeline>
<codeline lineno="40" refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a75a7e05e4c6e197fb42cf15527d3ff32" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a75a7e05e4c6e197fb42cf15527d3ff32" kindref="member">typical_spread_bps</ref>;</highlight></codeline>
<codeline lineno="41" refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a4960c821ac314498fb012f2138c9fa0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a4960c821ac314498fb012f2138c9fa0a" kindref="member">price_impact_coefficient</ref>;</highlight></codeline>
<codeline lineno="42" refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1ad00faced83e001841adf0d58c788109d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1ad00faced83e001841adf0d58c788109d" kindref="member">volatility</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a53241cf8a782fedd01a9ac1db8de5231" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a53241cf8a782fedd01a9ac1db8de5231" kindref="member">calculate_spread_cost</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>shares,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>price)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dollar_amount<sp/>=<sp/>shares<sp/>*<sp/>price;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dollar_amount<sp/>*<sp/>(<ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a75a7e05e4c6e197fb42cf15527d3ff32" kindref="member">typical_spread_bps</ref><sp/>/<sp/>10000.0)<sp/>*<sp/>0.5;<sp/><sp/></highlight><highlight class="comment">//<sp/>Half<sp/>spread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a2f210c523c597ac1e83dd0afa744ef52" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a2f210c523c597ac1e83dd0afa744ef52" kindref="member">estimate_price_impact</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>shares,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>price)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1ae03c3145dcf42d1ff6722eb2eb39bcce" kindref="member">average_daily_volume</ref><sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>participation_rate<sp/>=<sp/>shares<sp/>/<sp/><ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1ae03c3145dcf42d1ff6722eb2eb39bcce" kindref="member">average_daily_volume</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>volatility_factor<sp/><sp/>=<sp/><ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1ad00faced83e001841adf0d58c788109d" kindref="member">volatility</ref><sp/>*<sp/>price;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Square<sp/>root<sp/>impact<sp/>model:<sp/>impact<sp/>=<sp/>coefficient<sp/>*<sp/>volatility<sp/>*<sp/>sqrt(participation_rate)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a4960c821ac314498fb012f2138c9fa0a" kindref="member">price_impact_coefficient</ref><sp/>*<sp/>volatility_factor<sp/>*<sp/>std::sqrt(participation_rate);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal">};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints" kindref="compound">CapacityConstraints</ref><sp/>{</highlight></codeline>
<codeline lineno="71" refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints_1ac4d1061077109d0c93f3cec8e023476c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints_1ac4d1061077109d0c93f3cec8e023476c" kindref="member">max_adv_participation</ref><sp/><sp/>=<sp/>0.10;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Max<sp/>10%<sp/>of<sp/>average<sp/>daily<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints_1ab22eee1117a38f97432c8b06598a8a8c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints_1ab22eee1117a38f97432c8b06598a8a8c" kindref="member">max_single_day_volume</ref><sp/><sp/>=<sp/>0.05;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Max<sp/>5%<sp/>of<sp/>single<sp/>day<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints_1a52206f2f8dc68b9e86e2bc1195dca461" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints_1a52206f2f8dc68b9e86e2bc1195dca461" kindref="member">max_market_cap_percent</ref><sp/>=<sp/>0.01;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Max<sp/>1%<sp/>of<sp/>market<sp/>cap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints_1a23d25b4bb62bed83df767184da9fbf81" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints_1a23d25b4bb62bed83df767184da9fbf81" kindref="member">max_spread_cost_bps</ref><sp/><sp/><sp/><sp/>=<sp/>50.0;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Max<sp/>50<sp/>bps<sp/>spread<sp/>cost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints_1a0d439859ed3d5e065222a9558f3a98ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints_1a0d439859ed3d5e065222a9558f3a98ae" kindref="member">max_impact_bps</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>100.0;<sp/><sp/></highlight><highlight class="comment">//<sp/>Max<sp/>100<sp/>bps<sp/>price<sp/>impact</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints_1a6423ee52a316af41d4da5f27bca7a177" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints_1a6423ee52a316af41d4da5f27bca7a177" kindref="member">max_trading_days</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>30;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Max<sp/>30<sp/>days<sp/>to<sp/>complete<sp/>trade</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints_1aba354d2793b7956393ceef1cc8507961" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints_1aba354d2793b7956393ceef1cc8507961" kindref="member">is_violated</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>adv_participation,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>spread_cost_bps,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>impact_bps,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>trading_days)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>adv_participation<sp/>&gt;<sp/><ref refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints_1ac4d1061077109d0c93f3cec8e023476c" kindref="member">max_adv_participation</ref><sp/>||<sp/>spread_cost_bps<sp/>&gt;<sp/><ref refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints_1a23d25b4bb62bed83df767184da9fbf81" kindref="member">max_spread_cost_bps</ref><sp/>||</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impact_bps<sp/>&gt;<sp/><ref refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints_1a0d439859ed3d5e065222a9558f3a98ae" kindref="member">max_impact_bps</ref><sp/>||<sp/>trading_days<sp/>&gt;<sp/><ref refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints_1a6423ee52a316af41d4da5f27bca7a177" kindref="member">max_trading_days</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal">};</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult" kindref="compound">SecurityCapacityResult</ref><sp/>{</highlight></codeline>
<codeline lineno="91" refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ae8a14a64fe52370085a62aa505640e40" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref><sp/><ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ae8a14a64fe52370085a62aa505640e40" kindref="member">symbol</ref>;</highlight></codeline>
<codeline lineno="92" refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1aa057083e32ff5751ea284ec4c9de98f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1aa057083e32ff5751ea284ec4c9de98f9" kindref="member">max_position_shares</ref>;</highlight></codeline>
<codeline lineno="93" refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1af687e13280acf397f40f6276f025368f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1af687e13280acf397f40f6276f025368f" kindref="member">max_position_dollars</ref>;</highlight></codeline>
<codeline lineno="94" refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a2145a89f4266bb8541491b55b28af4c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a2145a89f4266bb8541491b55b28af4c7" kindref="member">max_daily_trade_shares</ref>;</highlight></codeline>
<codeline lineno="95" refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a966e1e155dd9eb03509fa5caeacc5ec2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a966e1e155dd9eb03509fa5caeacc5ec2" kindref="member">max_daily_trade_dollars</ref>;</highlight></codeline>
<codeline lineno="96" refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ac8b314f8260631194c00bb76436691be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ac8b314f8260631194c00bb76436691be" kindref="member">estimated_impact_cost</ref>;</highlight></codeline>
<codeline lineno="97" refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ab479ef8d4422dd806e80b15e192a9712" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ab479ef8d4422dd806e80b15e192a9712" kindref="member">estimated_spread_cost</ref>;</highlight></codeline>
<codeline lineno="98" refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a859948af3e6c74ff291b4ec2dfc951aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a859948af3e6c74ff291b4ec2dfc951aa" kindref="member">total_trading_cost</ref>;</highlight></codeline>
<codeline lineno="99" refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ab252e22ddd9776712d14e3a504258ac7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ab252e22ddd9776712d14e3a504258ac7" kindref="member">estimated_trading_days</ref>;</highlight></codeline>
<codeline lineno="100" refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a389a3702a53db9eff776beb706deb4d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a47fe4ae8e1af66983423eb3a65e794d2" kindref="member">LiquidityConstraint</ref><sp/><ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a389a3702a53db9eff776beb706deb4d4" kindref="member">binding_constraint</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ac211bcf6e84b314a326e61fa57a93d22" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ac211bcf6e84b314a326e61fa57a93d22" kindref="member">total_cost_bps</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1af687e13280acf397f40f6276f025368f" kindref="member">max_position_dollars</ref><sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a859948af3e6c74ff291b4ec2dfc951aa" kindref="member">total_trading_cost</ref><sp/>/<sp/><ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1af687e13280acf397f40f6276f025368f" kindref="member">max_position_dollars</ref>)<sp/>*<sp/>10000.0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a6b6906458523bab238692bafd2048a7c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a6b6906458523bab238692bafd2048a7c" kindref="member">is_capacity_constrained</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a389a3702a53db9eff776beb706deb4d4" kindref="member">binding_constraint</ref><sp/>!=<sp/><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a47fe4ae8e1af66983423eb3a65e794d2a8343d563bac57218fe16de453ebdf85e" kindref="member">LiquidityConstraint::AbsoluteShares</ref>;<sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal">};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult" kindref="compound">PortfolioCapacityResult</ref><sp/>{</highlight></codeline>
<codeline lineno="121" refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1aafe774082562f921d30c23d914a94cb1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;Symbol,<sp/>SecurityCapacityResult&gt;<sp/><ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1aafe774082562f921d30c23d914a94cb1" kindref="member">security_results</ref>;</highlight></codeline>
<codeline lineno="122" refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a2f46c37a8471bee6936b396b02b2cba2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a2f46c37a8471bee6936b396b02b2cba2" kindref="member">total_portfolio_capacity</ref>;</highlight></codeline>
<codeline lineno="123" refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a54cb8b43d5e9bfa608c398795c6ae3e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a54cb8b43d5e9bfa608c398795c6ae3e0" kindref="member">current_portfolio_size</ref>;</highlight></codeline>
<codeline lineno="124" refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a750cc6109d3ed0951ad2146f3f9bc294" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a750cc6109d3ed0951ad2146f3f9bc294" kindref="member">capacity_utilization</ref>;</highlight></codeline>
<codeline lineno="125" refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1ac591b48910113cee1fd214b9b0895d60" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1ac591b48910113cee1fd214b9b0895d60" kindref="member">total_estimated_costs</ref>;</highlight></codeline>
<codeline lineno="126" refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a74f91f94495bef5ef107b05807bc2fa6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a74f91f94495bef5ef107b05807bc2fa6" kindref="member">average_trading_days</ref>;</highlight></codeline>
<codeline lineno="127" refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1aeb03b7c4e0abf3cf5bd0407ebcb5ba7b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Symbol&gt;<sp/><ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1aeb03b7c4e0abf3cf5bd0407ebcb5ba7b" kindref="member">capacity_constrained_securities</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1aa32bdba4b7c844f4abd501601ca799e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult" kindref="compound">SecurityCapacityResult</ref><sp/><ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1aa32bdba4b7c844f4abd501601ca799e3" kindref="member">get_security_result</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref>&amp;<sp/>symbol)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1aafe774082562f921d30c23d914a94cb1" kindref="member">security_results</ref>.find(symbol);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/><ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1aafe774082562f921d30c23d914a94cb1" kindref="member">security_results</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult" kindref="compound">SecurityCapacityResult</ref>{};<sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a5b32ae6da80540da5d8395ccab7564ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a5b32ae6da80540da5d8395ccab7564ca" kindref="member">capacity_headroom</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a2f46c37a8471bee6936b396b02b2cba2" kindref="member">total_portfolio_capacity</ref><sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a2f46c37a8471bee6936b396b02b2cba2" kindref="member">total_portfolio_capacity</ref><sp/>-<sp/><ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a54cb8b43d5e9bfa608c398795c6ae3e0" kindref="member">current_portfolio_size</ref>)<sp/>/<sp/><ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a2f46c37a8471bee6936b396b02b2cba2" kindref="member">total_portfolio_capacity</ref>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1add190213762cc4dc650cd113fdb11a9c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1add190213762cc4dc650cd113fdb11a9c" kindref="member">is_near_capacity_limit</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>threshold<sp/>=<sp/>0.80)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a750cc6109d3ed0951ad2146f3f9bc294" kindref="member">capacity_utilization</ref><sp/>&gt;<sp/>threshold;<sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal">};</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a65533c7e82c1834b4dca14495689ccd3" kindref="member">CapacityAnalyzer</ref><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints" kindref="compound">CapacityConstraints</ref><sp/>constraints_;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;Symbol,<sp/>MarketMicrostructure&gt;<sp/>market_data_;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a27e2b8adc90a52a68f79f453f4cfcb70" kindref="member">ImpactModel</ref><sp/>impact_model_;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="168" refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a65533c7e82c1834b4dca14495689ccd3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a65533c7e82c1834b4dca14495689ccd3" kindref="member">CapacityAnalyzer</ref>()<sp/>:<sp/>impact_model_(<ref refid="de/d7a/namespacepyfolio_1_1capacity_1a27e2b8adc90a52a68f79f453f4cfcb70" kindref="member">ImpactModel</ref>::<ref refid="de/d7a/namespacepyfolio_1_1capacity_1a27e2b8adc90a52a68f79f453f4cfcb70ae6c1b4ee758a2636a6eaf99105103c56" kindref="member">SquareRoot</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a32ea7df8cd129b97da3e5c0353a16a66" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a32ea7df8cd129b97da3e5c0353a16a66" kindref="member">CapacityAnalyzer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints" kindref="compound">CapacityConstraints</ref>&amp;<sp/>constraints,<sp/><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a27e2b8adc90a52a68f79f453f4cfcb70" kindref="member">ImpactModel</ref><sp/>model<sp/>=<sp/><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a27e2b8adc90a52a68f79f453f4cfcb70ae6c1b4ee758a2636a6eaf99105103c56" kindref="member">ImpactModel::SquareRoot</ref>)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>constraints_(constraints),<sp/>impact_model_(model)<sp/>{}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1adef17e1c3d7e502c966f1c94ae485807" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1adef17e1c3d7e502c966f1c94ae485807" kindref="member">set_market_data</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Symbol,<sp/>MarketMicrostructure&gt;&amp;<sp/>market_data)<sp/>{<sp/>market_data_<sp/>=<sp/>market_data;<sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a694cef8e19c011f3d8df240f87122128" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a694cef8e19c011f3d8df240f87122128" kindref="member">set_constraints</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints" kindref="compound">CapacityConstraints</ref>&amp;<sp/>constraints)<sp/>{<sp/>constraints_<sp/>=<sp/>constraints;<sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a520ddf5e6d98e79e3db51abca6520e6f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;SecurityCapacityResult&gt;</ref><sp/><ref refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a520ddf5e6d98e79e3db51abca6520e6f" kindref="member">analyze_security_capacity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref>&amp;<sp/>symbol,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target_position_dollars,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_price)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>market_it<sp/>=<sp/>market_data_.find(symbol);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(market_it<sp/>==<sp/>market_data_.end())<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" kindref="member">Result&lt;SecurityCapacityResult&gt;::error</ref>(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad492e2c2490fcbf8a16aba55f377dc76" kindref="member">ErrorCode::InvalidSymbol</ref>,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;No<sp/>market<sp/>data<sp/>available<sp/>for<sp/>symbol:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>symbol);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>market_data<sp/>=<sp/>market_it-&gt;second;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult" kindref="compound">SecurityCapacityResult</ref><sp/>result;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ae8a14a64fe52370085a62aa505640e40" kindref="member">symbol</ref><sp/>=<sp/>symbol;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_price<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" kindref="member">Result&lt;SecurityCapacityResult&gt;::error</ref>(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" kindref="member">ErrorCode::InvalidInput</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Current<sp/>price<sp/>must<sp/>be<sp/>positive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>maximum<sp/>position<sp/>based<sp/>on<sp/>different<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_shares_adv<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>market_data.average_daily_volume<sp/>*<sp/>constraints_.max_adv_participation;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_shares_market_cap<sp/>=<sp/>(market_data.market_cap<sp/>*<sp/>constraints_.max_market_cap_percent)<sp/>/<sp/>current_price;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Take<sp/>the<sp/>most<sp/>restrictive<sp/>constraint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1aa057083e32ff5751ea284ec4c9de98f9" kindref="member">max_position_shares</ref><sp/><sp/>=<sp/>std::min(max_shares_adv,<sp/>max_shares_market_cap);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1af687e13280acf397f40f6276f025368f" kindref="member">max_position_dollars</ref><sp/>=<sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1aa057083e32ff5751ea284ec4c9de98f9" kindref="member">max_position_shares</ref><sp/>*<sp/>current_price;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>binding<sp/>constraint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_shares_adv<sp/>&lt;<sp/>max_shares_market_cap)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a389a3702a53db9eff776beb706deb4d4" kindref="member">binding_constraint</ref><sp/>=<sp/><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a47fe4ae8e1af66983423eb3a65e794d2a6affe9fb84fe77609721559509385e9f" kindref="member">LiquidityConstraint::ADVMultiple</ref>;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a389a3702a53db9eff776beb706deb4d4" kindref="member">binding_constraint</ref><sp/>=<sp/><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a47fe4ae8e1af66983423eb3a65e794d2abbcd884c8def404daf754bd9c4a14b73" kindref="member">LiquidityConstraint::MarketCapPercent</ref>;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>daily<sp/>trading<sp/>limits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a2145a89f4266bb8541491b55b28af4c7" kindref="member">max_daily_trade_shares</ref><sp/><sp/>=<sp/>market_data.average_daily_volume<sp/>*<sp/>constraints_.max_single_day_volume;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a966e1e155dd9eb03509fa5caeacc5ec2" kindref="member">max_daily_trade_dollars</ref><sp/>=<sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a2145a89f4266bb8541491b55b28af4c7" kindref="member">max_daily_trade_shares</ref><sp/>*<sp/>current_price;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Estimate<sp/>trading<sp/>timeline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target_shares<sp/>=<sp/>std::min(target_position_dollars<sp/>/<sp/>current_price,<sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1aa057083e32ff5751ea284ec4c9de98f9" kindref="member">max_position_shares</ref>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a2145a89f4266bb8541491b55b28af4c7" kindref="member">max_daily_trade_shares</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ab252e22ddd9776712d14e3a504258ac7" kindref="member">estimated_trading_days</ref><sp/>=</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::ceil(target_shares<sp/>/<sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a2145a89f4266bb8541491b55b28af4c7" kindref="member">max_daily_trade_shares</ref>));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>trading<sp/>costs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ab479ef8d4422dd806e80b15e192a9712" kindref="member">estimated_spread_cost</ref><sp/>=<sp/>market_data.calculate_spread_cost(target_shares,<sp/>current_price);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ac8b314f8260631194c00bb76436691be" kindref="member">estimated_impact_cost</ref><sp/>=<sp/>market_data.estimate_price_impact(target_shares,<sp/>current_price)<sp/>*<sp/>target_shares;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a859948af3e6c74ff291b4ec2dfc951aa" kindref="member">total_trading_cost</ref><sp/><sp/><sp/><sp/>=<sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ab479ef8d4422dd806e80b15e192a9712" kindref="member">estimated_spread_cost</ref><sp/>+<sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ac8b314f8260631194c00bb76436691be" kindref="member">estimated_impact_cost</ref>;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>constraint<sp/>violations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>adv_participation<sp/>=<sp/>target_shares<sp/>/<sp/>market_data.average_daily_volume;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>spread_cost_bps<sp/><sp/><sp/>=<sp/>(result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ab479ef8d4422dd806e80b15e192a9712" kindref="member">estimated_spread_cost</ref><sp/>/<sp/>(target_shares<sp/>*<sp/>current_price))<sp/>*<sp/>10000.0;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>impact_bps<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ac8b314f8260631194c00bb76436691be" kindref="member">estimated_impact_cost</ref><sp/>/<sp/>(target_shares<sp/>*<sp/>current_price))<sp/>*<sp/>10000.0;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(constraints_.is_violated(adv_participation,<sp/>spread_cost_bps,<sp/>impact_bps,<sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ab252e22ddd9776712d14e3a504258ac7" kindref="member">estimated_trading_days</ref>))<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>position<sp/>size<sp/>to<sp/>meet<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimize_position_size(symbol,<sp/>target_position_dollars,<sp/>current_price,<sp/>market_data).value_or(result);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" kindref="member">Result&lt;SecurityCapacityResult&gt;::success</ref>(result);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a9b770c687ae049208149c5023b673cc2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;PortfolioCapacityResult&gt;</ref><sp/><ref refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a9b770c687ae049208149c5023b673cc2" kindref="member">analyze_portfolio_capacity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Symbol,<sp/>double&gt;&amp;<sp/>target_weights,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_portfolio_value,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::map&lt;Symbol,<sp/>double&gt;&amp;<sp/>current_prices)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target_weights.empty())<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" kindref="member">Result&lt;PortfolioCapacityResult&gt;::error</ref>(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" kindref="member">ErrorCode::InvalidInput</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Target<sp/>weights<sp/>cannot<sp/>be<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult" kindref="compound">PortfolioCapacityResult</ref><sp/>portfolio_result;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portfolio_result.<ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a54cb8b43d5e9bfa608c398795c6ae3e0" kindref="member">current_portfolio_size</ref><sp/><sp/><sp/>=<sp/>total_portfolio_value;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portfolio_result.<ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a2f46c37a8471bee6936b396b02b2cba2" kindref="member">total_portfolio_capacity</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portfolio_result.<ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1ac591b48910113cee1fd214b9b0895d60" kindref="member">total_estimated_costs</ref><sp/><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>trading_days_vector;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Analyze<sp/>each<sp/>security</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[symbol,<sp/>weight]<sp/>:<sp/>target_weights)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>price_it<sp/>=<sp/>current_prices.find(symbol);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(price_it<sp/>==<sp/>current_prices.end())<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>securities<sp/>without<sp/>price<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target_dollars<sp/>=<sp/>total_portfolio_value<sp/>*<sp/>weight;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_price<sp/><sp/>=<sp/>price_it-&gt;second;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>security_result<sp/>=<sp/><ref refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a520ddf5e6d98e79e3db51abca6520e6f" kindref="member">analyze_security_capacity</ref>(symbol,<sp/>target_dollars,<sp/>current_price);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(security_result.is_ok())<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>result<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>security_result.value();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portfolio_result.<ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1aafe774082562f921d30c23d914a94cb1" kindref="member">security_results</ref>[symbol]<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Aggregate<sp/>portfolio<sp/>metrics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portfolio_result.<ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a2f46c37a8471bee6936b396b02b2cba2" kindref="member">total_portfolio_capacity</ref><sp/>+=<sp/>result.max_position_dollars;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portfolio_result.<ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1ac591b48910113cee1fd214b9b0895d60" kindref="member">total_estimated_costs</ref><sp/>+=<sp/>result.total_trading_cost;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.estimated_trading_days<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trading_days_vector.push_back(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(result.estimated_trading_days));</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Track<sp/>capacity<sp/>constrained<sp/>securities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.is_capacity_constrained())<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portfolio_result.<ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1aeb03b7c4e0abf3cf5bd0407ebcb5ba7b" kindref="member">capacity_constrained_securities</ref>.push_back(symbol);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>portfolio-level<sp/>metrics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(portfolio_result.<ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a2f46c37a8471bee6936b396b02b2cba2" kindref="member">total_portfolio_capacity</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portfolio_result.<ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a750cc6109d3ed0951ad2146f3f9bc294" kindref="member">capacity_utilization</ref><sp/>=</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portfolio_result.<ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a54cb8b43d5e9bfa608c398795c6ae3e0" kindref="member">current_portfolio_size</ref><sp/>/<sp/>portfolio_result.<ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a2f46c37a8471bee6936b396b02b2cba2" kindref="member">total_portfolio_capacity</ref>;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!trading_days_vector.empty())<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portfolio_result.<ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a74f91f94495bef5ef107b05807bc2fa6" kindref="member">average_trading_days</ref><sp/>=</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::accumulate(trading_days_vector.begin(),<sp/>trading_days_vector.end(),<sp/>0.0)<sp/>/</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trading_days_vector.size();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" kindref="member">Result&lt;PortfolioCapacityResult&gt;::success</ref>(std::move(portfolio_result));</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="315" refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1af897e871af916ea97b6e63d64d016be8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;TimeSeries&lt;double&gt;</ref>&gt;<sp/><ref refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1af897e871af916ea97b6e63d64d016be8" kindref="member">calculate_capacity_decay</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref>&amp;<sp/>symbol,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>initial_capacity,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries&lt;double&gt;</ref>&amp;<sp/>volume_series)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(volume_series.<ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" kindref="member">empty</ref>())<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;TimeSeries&lt;double&gt;</ref>&gt;::error(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" kindref="member">ErrorCode::InsufficientData</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Volume<sp/>series<sp/>cannot<sp/>be<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>capacity_values;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capacity_values.reserve(volume_series.<ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>market_it<sp/>=<sp/>market_data_.find(symbol);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(market_it<sp/>==<sp/>market_data_.end())<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;TimeSeries&lt;double&gt;</ref>&gt;::error(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad492e2c2490fcbf8a16aba55f377dc76" kindref="member">ErrorCode::InvalidSymbol</ref>,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>market<sp/>data<sp/>for<sp/>symbol:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>symbol);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>market_data<sp/>=<sp/>market_it-&gt;second;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_capacity<sp/>=<sp/>initial_capacity;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>volume_series.<ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" kindref="member">size</ref>();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>daily_volume<sp/>=<sp/>volume_series[i];</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>capacity<sp/>based<sp/>on<sp/>volume<sp/>changes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(market_data.average_daily_volume<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>volume_ratio<sp/>=<sp/>daily_volume<sp/>/<sp/>market_data.average_daily_volume;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_capacity<sp/>*=<sp/>volume_ratio;<sp/><sp/></highlight><highlight class="comment">//<sp/>Simplistic<sp/>decay<sp/>model</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capacity_values.push_back(current_capacity);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;TimeSeries&lt;double&gt;</ref>&gt;::success(</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries&lt;double&gt;</ref>{volume_series.<ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0374bbc62bd808749ac476b3af4b0ead" kindref="member">timestamps</ref>(),<sp/>capacity_values,<sp/>symbol<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_capacity&quot;</highlight><highlight class="normal">});</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a52e0e4938b3ac0b5f51fbce2ca91fe6b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;std::vector&lt;double&gt;</ref>&gt;<sp/><ref refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a52e0e4938b3ac0b5f51fbce2ca91fe6b" kindref="member">simulate_trading_impact</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref>&amp;<sp/>symbol,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/d6e/classpyfolio_1_1transactions_1_1TransactionSeries" kindref="compound">transactions::TransactionSeries</ref>&amp;<sp/><ref refid="dc/d4e/namespacepyfolio_1_1transactions" kindref="compound">transactions</ref>,</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>initial_capacity)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="dc/d4e/namespacepyfolio_1_1transactions" kindref="compound">transactions</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;std::vector&lt;double&gt;</ref>&gt;::error(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" kindref="member">ErrorCode::InsufficientData</ref>,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Transaction<sp/>series<sp/>cannot<sp/>be<sp/>empty&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>market_it<sp/>=<sp/>market_data_.find(symbol);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(market_it<sp/>==<sp/>market_data_.end())<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;std::vector&lt;double&gt;</ref>&gt;::error(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad492e2c2490fcbf8a16aba55f377dc76" kindref="member">ErrorCode::InvalidSymbol</ref>,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>market<sp/>data<sp/>for<sp/>symbol:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>symbol);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>market_data<sp/>=<sp/>market_it-&gt;second;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>capacity_impact;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capacity_impact.reserve(<ref refid="dc/d4e/namespacepyfolio_1_1transactions" kindref="compound">transactions</ref>.size());</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_capacity<sp/>=<sp/>initial_capacity;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>txn<sp/>:<sp/><ref refid="dc/d4e/namespacepyfolio_1_1transactions" kindref="compound">transactions</ref>)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(txn.symbol()<sp/>!=<sp/>symbol)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>trade_size<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::abs(txn.shares());</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>participation_rate<sp/>=<sp/>trade_size<sp/>/<sp/>market_data.average_daily_volume;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>capacity<sp/>reduction<sp/>due<sp/>to<sp/>trading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>impact_factor<sp/>=<sp/>1.0<sp/>-<sp/>(participation_rate<sp/>*<sp/>0.1);<sp/><sp/></highlight><highlight class="comment">//<sp/>10%<sp/>reduction<sp/>per<sp/>1%<sp/>participation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_capacity<sp/>*=<sp/>std::max(0.1,<sp/>impact_factor);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Minimum<sp/>10%<sp/>of<sp/>original<sp/>capacity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capacity_impact.push_back(current_capacity);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;std::vector&lt;double&gt;</ref>&gt;::success(std::move(capacity_impact));</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>std::optional&lt;SecurityCapacityResult&gt;<sp/>optimize_position_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref>&amp;<sp/>symbol,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target_dollars,</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_price,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure" kindref="compound">MarketMicrostructure</ref>&amp;<sp/>market_data)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult" kindref="compound">SecurityCapacityResult</ref><sp/>result;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ae8a14a64fe52370085a62aa505640e40" kindref="member">symbol</ref><sp/>=<sp/>symbol;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Binary<sp/>search<sp/>for<sp/>optimal<sp/>position<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min_dollars<sp/><sp/><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_dollars<sp/><sp/><sp/><sp/><sp/>=<sp/>target_dollars;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>optimal_dollars<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iteration<sp/>=<sp/>0;<sp/>iteration<sp/>&lt;<sp/>20;<sp/>++iteration)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Max<sp/>20<sp/>iterations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>test_dollars<sp/>=<sp/>(min_dollars<sp/>+<sp/>max_dollars)<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>test_shares<sp/><sp/>=<sp/>test_dollars<sp/>/<sp/>current_price;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>constraints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>adv_participation<sp/>=<sp/>test_shares<sp/>/<sp/>market_data.<ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1ae03c3145dcf42d1ff6722eb2eb39bcce" kindref="member">average_daily_volume</ref>;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>spread_cost<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>market_data.<ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a53241cf8a782fedd01a9ac1db8de5231" kindref="member">calculate_spread_cost</ref>(test_shares,<sp/>current_price);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>impact_cost<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>market_data.<ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a2f210c523c597ac1e83dd0afa744ef52" kindref="member">estimate_price_impact</ref>(test_shares,<sp/>current_price)<sp/>*<sp/>test_shares;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>spread_cost_bps<sp/>=<sp/>(spread_cost<sp/>/<sp/>test_dollars)<sp/>*<sp/>10000.0;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>impact_bps<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(impact_cost<sp/>/<sp/>test_dollars)<sp/>*<sp/>10000.0;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>trading_days<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ceil(test_shares<sp/>/<sp/>(market_data.<ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1ae03c3145dcf42d1ff6722eb2eb39bcce" kindref="member">average_daily_volume</ref><sp/>*<sp/>constraints_.<ref refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints_1ab22eee1117a38f97432c8b06598a8a8c" kindref="member">max_single_day_volume</ref>)));</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(constraints_.<ref refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints_1aba354d2793b7956393ceef1cc8507961" kindref="member">is_violated</ref>(adv_participation,<sp/>spread_cost_bps,<sp/>impact_bps,<sp/>trading_days))<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_dollars<sp/>=<sp/>test_dollars;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_dollars<sp/><sp/><sp/><sp/><sp/>=<sp/>test_dollars;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimal_dollars<sp/>=<sp/>test_dollars;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::abs(max_dollars<sp/>-<sp/>min_dollars)<sp/>&lt;<sp/>1000.0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>$1000<sp/>precision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optimal_dollars<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1af687e13280acf397f40f6276f025368f" kindref="member">max_position_dollars</ref><sp/><sp/>=<sp/>optimal_dollars;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1aa057083e32ff5751ea284ec4c9de98f9" kindref="member">max_position_shares</ref><sp/><sp/><sp/>=<sp/>optimal_dollars<sp/>/<sp/>current_price;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ab479ef8d4422dd806e80b15e192a9712" kindref="member">estimated_spread_cost</ref><sp/>=<sp/>market_data.<ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a53241cf8a782fedd01a9ac1db8de5231" kindref="member">calculate_spread_cost</ref>(result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1aa057083e32ff5751ea284ec4c9de98f9" kindref="member">max_position_shares</ref>,<sp/>current_price);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ac8b314f8260631194c00bb76436691be" kindref="member">estimated_impact_cost</ref><sp/>=</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>market_data.<ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a2f210c523c597ac1e83dd0afa744ef52" kindref="member">estimate_price_impact</ref>(result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1aa057083e32ff5751ea284ec4c9de98f9" kindref="member">max_position_shares</ref>,<sp/>current_price)<sp/>*</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1aa057083e32ff5751ea284ec4c9de98f9" kindref="member">max_position_shares</ref>;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a859948af3e6c74ff291b4ec2dfc951aa" kindref="member">total_trading_cost</ref><sp/>=<sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ab479ef8d4422dd806e80b15e192a9712" kindref="member">estimated_spread_cost</ref><sp/>+<sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ac8b314f8260631194c00bb76436691be" kindref="member">estimated_impact_cost</ref>;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a389a3702a53db9eff776beb706deb4d4" kindref="member">binding_constraint</ref><sp/>=<sp/><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a47fe4ae8e1af66983423eb3a65e794d2afdb84c41f58953e18edc79a00a1116ea" kindref="member">LiquidityConstraint::VolumePercent</ref>;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal">};</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="449" refid="de/d7a/namespacepyfolio_1_1capacity_1a39fea4ea0bf0f1dc2a7c2fead4f681fe" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure" kindref="compound">MarketMicrostructure</ref><sp/><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a39fea4ea0bf0f1dc2a7c2fead4f681fe" kindref="member">create_market_microstructure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref>&amp;<sp/>symbol,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>avg_daily_volume,</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>market_cap,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_price,</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>typical_spread_bps<sp/>=<sp/>10.0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>volatility<sp/>=<sp/>0.20)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure" kindref="compound">MarketMicrostructure</ref><sp/>data;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>data.<ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1aff94da91b6c4906c5f03af6701cf73e3" kindref="member">symbol</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>symbol;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>data.<ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1ae03c3145dcf42d1ff6722eb2eb39bcce" kindref="member">average_daily_volume</ref><sp/><sp/>=<sp/>avg_daily_volume;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>data.<ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a0d47d19b128d51f8bb3a4e0a9a055ab3" kindref="member">average_dollar_volume</ref><sp/>=<sp/>avg_daily_volume<sp/>*<sp/>current_price;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>data.<ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a6ccc24afaf2583efe2469b1404485ceb" kindref="member">market_cap</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>market_cap;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>data.<ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a75a7e05e4c6e197fb42cf15527d3ff32" kindref="member">typical_spread_bps</ref><sp/><sp/><sp/><sp/>=<sp/>typical_spread_bps;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>data.<ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1ad00faced83e001841adf0d58c788109d" kindref="member">volatility</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>volatility;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Estimate<sp/>price<sp/>impact<sp/>coefficient<sp/>based<sp/>on<sp/>market<sp/>cap<sp/>and<sp/>volume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Larger,<sp/>more<sp/>liquid<sp/>stocks<sp/>have<sp/>lower<sp/>impact</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>liquidity_factor<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>std::log(data.<ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a0d47d19b128d51f8bb3a4e0a9a055ab3" kindref="member">average_dollar_volume</ref><sp/>/<sp/>1000000.0);<sp/><sp/></highlight><highlight class="comment">//<sp/>Log<sp/>of<sp/>ADV<sp/>in<sp/>millions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>data.<ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure_1a4960c821ac314498fb012f2138c9fa0a" kindref="member">price_impact_coefficient</ref><sp/>=<sp/>0.1<sp/>/<sp/>std::max(1.0,<sp/>liquidity_factor);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="471" refid="de/d7a/namespacepyfolio_1_1capacity_1a3b07998aa0b60d8d660d3240b77f26ca" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;double&gt;</ref><sp/><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a3b07998aa0b60d8d660d3240b77f26ca" kindref="member">calculate_turnover_capacity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult" kindref="compound">PortfolioCapacityResult</ref>&amp;<sp/>capacity_result,</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target_turnover,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>portfolio_value)<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target_turnover<sp/>&lt;=<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" kindref="member">Result&lt;double&gt;::error</ref>(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" kindref="member">ErrorCode::InvalidInput</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Target<sp/>turnover<sp/>must<sp/>be<sp/>positive&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_trading_capacity<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[symbol,<sp/>result]<sp/>:<sp/>capacity_result.<ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1aafe774082562f921d30c23d914a94cb1" kindref="member">security_results</ref>)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_trading_capacity<sp/>+=<sp/>result.<ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a966e1e155dd9eb03509fa5caeacc5ec2" kindref="member">max_daily_trade_dollars</ref>;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(total_trading_capacity<sp/>&lt;=<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" kindref="member">Result&lt;double&gt;::success</ref>(0.0);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Annual<sp/>turnover<sp/>capacity<sp/>=<sp/>daily<sp/>capacity<sp/>*<sp/>trading<sp/>days<sp/>per<sp/>year</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>annual_trading_capacity<sp/>=<sp/>total_trading_capacity<sp/>*<sp/>252.0;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_supportable_aum<sp/><sp/><sp/><sp/><sp/>=<sp/>annual_trading_capacity<sp/>/<sp/>target_turnover;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" kindref="member">Result&lt;double&gt;::success</ref>(max_supportable_aum);</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>pyfolio::capacity</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h"/>
  </compounddef>
</doxygen>
