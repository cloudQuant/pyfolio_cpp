<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator" kind="class" language="C++" prot="public">
    <compoundname>pyfolio::analytics::CachedPerformanceCalculator</compoundname>
    <includes refid="d4/dc1/cached__performance__metrics_8h" local="no">cached_performance_metrics.h</includes>
    <innerclass refid="da/d79/structpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1_1CacheStats" prot="public">pyfolio::analytics::CachedPerformanceCalculator::CacheStats</innerclass>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1aaf47e9c401b392c5cdd18995b2a7ce81" prot="private" static="no" mutable="yes">
        <type>std::unordered_map&lt; std::string, <ref refid="da/dd9/structpyfolio_1_1analytics_1_1CacheEntry" kindref="compound">CacheEntry</ref>&lt; double &gt; &gt;</type>
        <definition>std::unordered_map&lt;std::string, CacheEntry&lt;double&gt; &gt; pyfolio::analytics::CachedPerformanceCalculator::scalar_cache_</definition>
        <argsstring></argsstring>
        <name>scalar_cache_</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::scalar_cache_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="84" column="32" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a6c84cfa89dadc23bc3253b2a8306d6d9" prot="private" static="no" mutable="yes">
        <type>std::unordered_map&lt; std::string, <ref refid="da/dd9/structpyfolio_1_1analytics_1_1CacheEntry" kindref="compound">CacheEntry</ref>&lt; <ref refid="de/d2e/structpyfolio_1_1analytics_1_1PerformanceMetrics" kindref="compound">PerformanceMetrics</ref> &gt; &gt;</type>
        <definition>std::unordered_map&lt;std::string, CacheEntry&lt;PerformanceMetrics&gt; &gt; pyfolio::analytics::CachedPerformanceCalculator::metrics_cache_</definition>
        <argsstring></argsstring>
        <name>metrics_cache_</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::metrics_cache_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="85" column="32" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1aa092404492d97287434736af53ae61eb" prot="private" static="no" mutable="yes">
        <type>std::unordered_map&lt; std::string, <ref refid="da/dd9/structpyfolio_1_1analytics_1_1CacheEntry" kindref="compound">CacheEntry</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; double &gt; &gt; &gt;</type>
        <definition>std::unordered_map&lt;std::string, CacheEntry&lt;TimeSeries&lt;double&gt; &gt; &gt; pyfolio::analytics::CachedPerformanceCalculator::series_cache_</definition>
        <argsstring></argsstring>
        <name>series_cache_</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::series_cache_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="86" column="32" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a3adc233d1a67104aa332d69947519c15" prot="private" static="no" mutable="yes">
        <type>std::shared_mutex</type>
        <definition>std::shared_mutex pyfolio::analytics::CachedPerformanceCalculator::cache_mutex_</definition>
        <argsstring></argsstring>
        <name>cache_mutex_</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::cache_mutex_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="89" column="31" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a13019435f2371b556b7b604872ab73d7" prot="private" static="no" mutable="no">
        <type><ref refid="df/d48/structpyfolio_1_1analytics_1_1CacheConfig" kindref="compound">CacheConfig</ref></type>
        <definition>CacheConfig pyfolio::analytics::CachedPerformanceCalculator::config_</definition>
        <argsstring></argsstring>
        <name>config_</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::config_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="92" column="17" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a51e4603ef348fad4ed5a7c6b1cec0500" prot="private" static="no" mutable="yes">
        <type>size_t</type>
        <definition>size_t pyfolio::analytics::CachedPerformanceCalculator::cache_hits_</definition>
        <argsstring></argsstring>
        <name>cache_hits_</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::cache_hits_</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="93" column="20" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="variable" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a88989780e0a9286e955b9529564e036d" prot="private" static="no" mutable="yes">
        <type>size_t</type>
        <definition>size_t pyfolio::analytics::CachedPerformanceCalculator::cache_misses_</definition>
        <argsstring></argsstring>
        <name>cache_misses_</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::cache_misses_</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="94" column="20" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="variable" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1affd4a6d6776afeb1bd6e1e5b687fdd07" prot="private" static="no" mutable="yes">
        <type>std::chrono::steady_clock::time_point</type>
        <definition>std::chrono::steady_clock::time_point pyfolio::analytics::CachedPerformanceCalculator::last_cleanup_</definition>
        <argsstring></argsstring>
        <name>last_cleanup_</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::last_cleanup_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="95" column="51" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="95" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a8f88547f46993bfdf7276372ce12fcdb" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t pyfolio::analytics::CachedPerformanceCalculator::calculate_hash</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;series) const</argsstring>
        <name>calculate_hash</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::calculate_hash</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>series</declname>
        </param>
        <briefdescription>
<para>Calculate hash for <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref> data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="101" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="101" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1ab5e86852018bf03b5d0f6c0d1d4fbfcb" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string pyfolio::analytics::CachedPerformanceCalculator::make_cache_key</definition>
        <argsstring>(const std::string &amp;function_name, Args &amp;&amp;... args) const</argsstring>
        <name>make_cache_key</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::make_cache_key</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>function_name</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Generate cache key. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="131" column="17" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="131" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1ab94ce9bc51cf62b9d85cb889e9df6b0e" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::analytics::CachedPerformanceCalculator::check_and_cleanup_cache</definition>
        <argsstring>() const</argsstring>
        <name>check_and_cleanup_cache</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::check_and_cleanup_cache</qualifiedname>
        <briefdescription>
<para>Check if cache needs cleanup. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="150" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="150" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a24665a43d2ad0306b9186da7012b9c98" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::optional&lt; T &gt;</type>
        <definition>std::optional&lt; T &gt; pyfolio::analytics::CachedPerformanceCalculator::try_get_cached</definition>
        <argsstring>(const std::string &amp;key, size_t data_hash, size_t data_size, auto &amp;cache_map) const</argsstring>
        <name>try_get_cached</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::try_get_cached</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_hash</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_size</declname>
        </param>
        <param>
          <type>auto &amp;</type>
          <declname>cache_map</declname>
        </param>
        <briefdescription>
<para>Try to get cached result. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="202" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="202" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a6d746a5181797f6d87f462ac22d28191" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pyfolio::analytics::CachedPerformanceCalculator::store_in_cache</definition>
        <argsstring>(const std::string &amp;key, T &amp;&amp;value, size_t data_hash, size_t data_size, auto &amp;cache_map) const</argsstring>
        <name>store_in_cache</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::store_in_cache</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_hash</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>data_size</declname>
        </param>
        <param>
          <type>auto &amp;</type>
          <declname>cache_map</declname>
        </param>
        <briefdescription>
<para>Store result in cache. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="219" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="219" bodyend="222"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a1548931980f6fa0913d68d8eabc9ee26" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pyfolio::analytics::CachedPerformanceCalculator::CachedPerformanceCalculator</definition>
        <argsstring>(CacheConfig config={})</argsstring>
        <name>CachedPerformanceCalculator</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::CachedPerformanceCalculator</qualifiedname>
        <param>
          <type><ref refid="df/d48/structpyfolio_1_1analytics_1_1CacheConfig" kindref="compound">CacheConfig</ref></type>
          <declname>config</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="225" column="14" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="225" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a01e913b9511bc9d0574335cd413e6e10" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="da/d79/structpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1_1CacheStats" kindref="compound">CacheStats</ref></type>
        <definition>CacheStats pyfolio::analytics::CachedPerformanceCalculator::get_cache_stats</definition>
        <argsstring>() const</argsstring>
        <name>get_cache_stats</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::get_cache_stats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="241" column="16" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="241" bodyend="254"/>
        <referencedby refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1a940b4befb9ec4fd40fd5aca4d3155997" compoundref="d4/dc1/cached__performance__metrics_8h" startline="570" endline="572">pyfolio::analytics::cached::get_cache_stats</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1af10f63228f6a2a851924d47b1e159470" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::analytics::CachedPerformanceCalculator::clear_cache</definition>
        <argsstring>()</argsstring>
        <name>clear_cache</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::clear_cache</qualifiedname>
        <briefdescription>
<para>Clear all caches. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="259" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="259" bodyend="266"/>
        <referencedby refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1ab3e14536bb14d2efb02b83e4a3d2989e" compoundref="d4/dc1/cached__performance__metrics_8h" startline="577" endline="579">pyfolio::analytics::cached::clear_cache</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1acf3e4d5df2fb887a5b0a2db11196e475" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::analytics::CachedPerformanceCalculator::update_config</definition>
        <argsstring>(const CacheConfig &amp;new_config)</argsstring>
        <name>update_config</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::update_config</qualifiedname>
        <param>
          <type>const <ref refid="df/d48/structpyfolio_1_1analytics_1_1CacheConfig" kindref="compound">CacheConfig</ref> &amp;</type>
          <declname>new_config</declname>
        </param>
        <briefdescription>
<para>Update cache configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="271" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="271" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a8bc981bc9cbd284d47b40f4ce72c14a5" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::analytics::CachedPerformanceCalculator::mean</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;series) const</argsstring>
        <name>mean</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::mean</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>series</declname>
        </param>
        <briefdescription>
<para>Cached mean calculation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="282" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="282" bodyend="302"/>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1aad798a4da69bff9c8bb9d335eaba6ec6" compoundref="d8/d51/time__series_8h" startline="778" endline="797">pyfolio::TimeSeries&lt; T &gt;::mean</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <referencedby refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1af806e5aece2fa569d3cec8ba37a4b31a" compoundref="d4/dc1/cached__performance__metrics_8h" startline="533" endline="535">pyfolio::analytics::cached::mean</referencedby>
        <referencedby refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a78e06e24b176ddec6dc0640e175bdd1f" compoundref="d4/dc1/cached__performance__metrics_8h" startline="444" endline="477">sharpe_ratio</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1ae2b363deb9d87338d104b96de4ae3a7f" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::analytics::CachedPerformanceCalculator::std_deviation</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;series) const</argsstring>
        <name>std_deviation</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::std_deviation</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>series</declname>
        </param>
        <briefdescription>
<para>Cached standard deviation calculation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="308" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="308" bodyend="327"/>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82439ade72c213e3ffd477dd6a2058e5" compoundref="d8/d51/time__series_8h" startline="802" endline="824">pyfolio::TimeSeries&lt; T &gt;::std</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <referencedby refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a78e06e24b176ddec6dc0640e175bdd1f" compoundref="d4/dc1/cached__performance__metrics_8h" startline="444" endline="477">sharpe_ratio</referencedby>
        <referencedby refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1a3e0d74b961f1c042079178977e61c765" compoundref="d4/dc1/cached__performance__metrics_8h" startline="538" endline="540">pyfolio::analytics::cached::std_deviation</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1ae8d11622fcee575f2c19849d443dbb94" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::analytics::CachedPerformanceCalculator::correlation</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;series1, const TimeSeries&lt; T &gt; &amp;series2) const</argsstring>
        <name>correlation</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::correlation</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>series1</declname>
        </param>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>series2</declname>
        </param>
        <briefdescription>
<para>Cached correlation calculation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="333" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="333" bodyend="356"/>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a41ce57e7df0fc468024c1fb40b2c773a" compoundref="d8/d51/time__series_8h" startline="1152" endline="1194">pyfolio::TimeSeries&lt; T &gt;::correlation</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <referencedby refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1adf282fb835cd51a3c8e1258b2137f0bf" compoundref="d4/dc1/cached__performance__metrics_8h" startline="543" endline="545">pyfolio::analytics::cached::correlation</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a86abd7db22a354c6ef057158864d41bf" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::analytics::CachedPerformanceCalculator::rolling_mean</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;series, size_t window) const</argsstring>
        <name>rolling_mean</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::rolling_mean</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>series</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Cached rolling mean calculation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="362" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="362" bodyend="381"/>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a09b5e0db91c49c4ef4b768f34e838a6e" compoundref="d8/d51/time__series_8h" startline="580" endline="618">pyfolio::TimeSeries&lt; T &gt;::rolling_mean</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <referencedby refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1a19154f9f47ac8dd299519471406bd12f" compoundref="d4/dc1/cached__performance__metrics_8h" startline="558" endline="560">pyfolio::analytics::cached::rolling_mean</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a42bf7ecca30cbf723515dc06df7ba678" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::analytics::CachedPerformanceCalculator::rolling_std</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;series, size_t window) const</argsstring>
        <name>rolling_std</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::rolling_std</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>series</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Cached rolling standard deviation calculation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="387" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="387" bodyend="406"/>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1aa7bb9fb26a605ffa13f550d8597c968d" compoundref="d8/d51/time__series_8h" startline="623" endline="673">pyfolio::TimeSeries&lt; T &gt;::rolling_std</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <referencedby refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1ac72f648587fe1171805532226a3cbb5f" compoundref="d4/dc1/cached__performance__metrics_8h" startline="563" endline="565">pyfolio::analytics::cached::rolling_std</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a0e3a4ce0474850feced4c15ca589cb97" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="de/d2e/structpyfolio_1_1analytics_1_1PerformanceMetrics" kindref="compound">PerformanceMetrics</ref> &gt;</type>
        <definition>Result&lt; PerformanceMetrics &gt; pyfolio::analytics::CachedPerformanceCalculator::calculate_performance_metrics</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns, const std::optional&lt; TimeSeries&lt; T &gt; &gt; &amp;benchmark=std::nullopt, double risk_free_rate=0.02) const</argsstring>
        <name>calculate_performance_metrics</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::calculate_performance_metrics</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>const std::optional&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt; &amp;</type>
          <declname>benchmark</declname>
          <defval>std::nullopt</defval>
        </param>
        <param>
          <type>double</type>
          <declname>risk_free_rate</declname>
          <defval>0.02</defval>
        </param>
        <briefdescription>
<para>Cached comprehensive performance metrics calculation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="412" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="412" bodyend="438"/>
        <references refid="d2/d10/namespacepyfolio_1_1analytics_1a0562de05a212709b5e0fe358e30c90d0">pyfolio::analytics::calculate_performance_metrics</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
      </memberdef>
      <memberdef kind="function" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a78e06e24b176ddec6dc0640e175bdd1f" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::analytics::CachedPerformanceCalculator::sharpe_ratio</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns, double risk_free_rate=0.02) const</argsstring>
        <name>sharpe_ratio</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::sharpe_ratio</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>double</type>
          <declname>risk_free_rate</declname>
          <defval>0.02</defval>
        </param>
        <briefdescription>
<para>Cached Sharpe ratio calculation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="444" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="444" bodyend="477"/>
        <references refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a8bc981bc9cbd284d47b40f4ce72c14a5" compoundref="d4/dc1/cached__performance__metrics_8h" startline="282" endline="302">mean</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1ae2b363deb9d87338d104b96de4ae3a7f" compoundref="d4/dc1/cached__performance__metrics_8h" startline="308" endline="327">std_deviation</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <referencedby refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1a68b92ffe1367d82222e4ad30773a0fd0" compoundref="d4/dc1/cached__performance__metrics_8h" startline="548" endline="550">pyfolio::analytics::cached::sharpe_ratio</referencedby>
      </memberdef>
      <memberdef kind="function" id="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1ae12cd4f5a2e889c8d7ff4ac4ab513f5e" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::analytics::CachedPerformanceCalculator::max_drawdown</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;prices) const</argsstring>
        <name>max_drawdown</name>
        <qualifiedname>pyfolio::analytics::CachedPerformanceCalculator::max_drawdown</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>prices</declname>
        </param>
        <briefdescription>
<para>Cached maximum drawdown calculation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="483" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="483" bodyend="516"/>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <referencedby refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1a721af56f260a3d1560f94f261c06352c" compoundref="d4/dc1/cached__performance__metrics_8h" startline="553" endline="555">pyfolio::analytics::cached::max_drawdown</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>High-performance cached performance metrics calculator. </para>
    </briefdescription>
    <detaileddescription>
<para>This class provides intelligent caching for expensive performance metric calculations. It uses content-based hashing to detect data changes and automatic cache invalidation based on time and data changes.</para>
<para>Features:<itemizedlist>
<listitem><para>Content-aware caching (detects data changes via hashing)</para>
</listitem><listitem><para>Automatic cache invalidation and cleanup</para>
</listitem><listitem><para>Thread-safe operations with read-write locks</para>
</listitem><listitem><para>Performance monitoring and adaptive caching</para>
</listitem><listitem><para>Memory-efficient with configurable limits</para>
</listitem><listitem><para>Hit rate optimization </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="81" column="1" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="81" bodyend="517"/>
    <listofallmembers>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a51e4603ef348fad4ed5a7c6b1cec0500" prot="private" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>cache_hits_</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a88989780e0a9286e955b9529564e036d" prot="private" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>cache_misses_</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a3adc233d1a67104aa332d69947519c15" prot="private" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>cache_mutex_</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a1548931980f6fa0913d68d8eabc9ee26" prot="public" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>CachedPerformanceCalculator</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a8f88547f46993bfdf7276372ce12fcdb" prot="private" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>calculate_hash</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a0e3a4ce0474850feced4c15ca589cb97" prot="public" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>calculate_performance_metrics</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1ab94ce9bc51cf62b9d85cb889e9df6b0e" prot="private" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>check_and_cleanup_cache</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1af10f63228f6a2a851924d47b1e159470" prot="public" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>clear_cache</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a13019435f2371b556b7b604872ab73d7" prot="private" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>config_</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1ae8d11622fcee575f2c19849d443dbb94" prot="public" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>correlation</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a01e913b9511bc9d0574335cd413e6e10" prot="public" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>get_cache_stats</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1affd4a6d6776afeb1bd6e1e5b687fdd07" prot="private" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>last_cleanup_</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1ab5e86852018bf03b5d0f6c0d1d4fbfcb" prot="private" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>make_cache_key</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1ae12cd4f5a2e889c8d7ff4ac4ab513f5e" prot="public" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>max_drawdown</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a8bc981bc9cbd284d47b40f4ce72c14a5" prot="public" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>mean</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a6c84cfa89dadc23bc3253b2a8306d6d9" prot="private" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>metrics_cache_</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a86abd7db22a354c6ef057158864d41bf" prot="public" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>rolling_mean</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a42bf7ecca30cbf723515dc06df7ba678" prot="public" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>rolling_std</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1aaf47e9c401b392c5cdd18995b2a7ce81" prot="private" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>scalar_cache_</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1aa092404492d97287434736af53ae61eb" prot="private" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>series_cache_</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a78e06e24b176ddec6dc0640e175bdd1f" prot="public" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>sharpe_ratio</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1ae2b363deb9d87338d104b96de4ae3a7f" prot="public" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>std_deviation</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a6d746a5181797f6d87f462ac22d28191" prot="private" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>store_in_cache</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a24665a43d2ad0306b9186da7012b9c98" prot="private" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>try_get_cached</name></member>
      <member refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1acf3e4d5df2fb887a5b0a2db11196e475" prot="public" virt="non-virtual"><scope>pyfolio::analytics::CachedPerformanceCalculator</scope><name>update_config</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
