<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d7/d00/round__trips_8h" kind="file" language="C++">
    <compoundname>round_trips.h</compoundname>
    <includes refid="de/d1b/datetime_8h" local="yes">../core/datetime.h</includes>
    <includes refid="d3/d11/error__handling_8h" local="yes">../core/error_handling.h</includes>
    <includes refid="d9/d49/types_8h" local="yes">../core/types.h</includes>
    <includes refid="d0/db6/transaction_8h" local="yes">transaction.h</includes>
    <includes local="no">map</includes>
    <includes local="no">queue</includes>
    <includes local="no">vector</includes>
    <includedby refid="d7/d56/transaction__analysis__example_8cpp" local="no">/Users/yunjinqi/Documents/source_code/pyfolio_cpp/examples/transaction_analysis_example.cpp</includedby>
    <includedby refid="d3/d30/pyfolio_8h" local="yes">/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/pyfolio.h</includedby>
    <incdepgraph>
      <node id="19">
        <label>../core/dataframe.h</label>
        <link refid="d2/d99/dataframe_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>../core/datetime.h</label>
        <link refid="de/d1b/datetime_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>error_handling.h</label>
        <link refid="d3/d11/error__handling_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>time_series.h</label>
        <link refid="d8/d51/time__series_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>types.h</label>
        <link refid="d9/d49/types_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>../math/simd_math.h</label>
        <link refid="d6/d99/simd__math_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/round_trips.h</label>
        <link refid="d7/d00/round__trips_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>transaction.h</label>
        <link refid="d0/db6/transaction_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>algorithm</label>
      </node>
      <node id="28">
        <label>any</label>
      </node>
      <node id="11">
        <label>chrono</label>
      </node>
      <node id="23">
        <label>cmath</label>
      </node>
      <node id="12">
        <label>concepts</label>
      </node>
      <node id="13">
        <label>cstddef</label>
      </node>
      <node id="14">
        <label>cstdint</label>
      </node>
      <node id="24">
        <label>deque</label>
      </node>
      <node id="4">
        <label>exception</label>
      </node>
      <node id="5">
        <label>functional</label>
      </node>
      <node id="25">
        <label>limits</label>
      </node>
      <node id="26">
        <label>map</label>
      </node>
      <node id="27">
        <label>numeric</label>
      </node>
      <node id="6">
        <label>optional</label>
      </node>
      <node id="30">
        <label>queue</label>
      </node>
      <node id="17">
        <label>set</label>
      </node>
      <node id="7">
        <label>source_location</label>
      </node>
      <node id="22">
        <label>span</label>
      </node>
      <node id="8">
        <label>string</label>
      </node>
      <node id="29">
        <label>typeindex</label>
      </node>
      <node id="9">
        <label>variant</label>
      </node>
      <node id="15">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/examples/attribution_example.cpp</label>
        <link refid="d8/d00/attribution__example_8cpp"/>
      </node>
      <node id="5">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/examples/basic_example.cpp</label>
        <link refid="d3/d6a/basic__example_8cpp"/>
      </node>
      <node id="6">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/examples/bayesian_analysis_example.cpp</label>
        <link refid="da/d7c/bayesian__analysis__example_8cpp"/>
      </node>
      <node id="7">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/examples/capacity_analysis_example.cpp</label>
        <link refid="d1/db6/capacity__analysis__example_8cpp"/>
      </node>
      <node id="8">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/examples/risk_analysis_example.cpp</label>
        <link refid="db/dc6/risk__analysis__example_8cpp"/>
      </node>
      <node id="2">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/examples/transaction_analysis_example.cpp</label>
        <link refid="d7/d56/transaction__analysis__example_8cpp"/>
      </node>
      <node id="3">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/pyfolio.h</label>
        <link refid="d3/d30/pyfolio_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/round_trips.h</label>
        <link refid="d7/d00/round__trips_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip" prot="public">pyfolio::transactions::RoundTrip</innerclass>
    <innerclass refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition" prot="public">pyfolio::transactions::OpenPosition</innerclass>
    <innerclass refid="d7/d9a/classpyfolio_1_1transactions_1_1RoundTripAnalyzer" prot="public">pyfolio::transactions::RoundTripAnalyzer</innerclass>
    <innerclass refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics" prot="public">pyfolio::transactions::RoundTripStatistics</innerclass>
    <innernamespace refid="d7/df8/namespacepyfolio">pyfolio</innernamespace>
    <innernamespace refid="dc/d4e/namespacepyfolio_1_1transactions">pyfolio::transactions</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="de/d1b/datetime_8h" kindref="compound">../core/datetime.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/d11/error__handling_8h" kindref="compound">../core/error_handling.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d9/d49/types_8h" kindref="compound">../core/types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d0/db6/transaction_8h" kindref="compound">transaction.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;queue&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="dc/d4e/namespacepyfolio_1_1transactions" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="dc/d4e/namespacepyfolio_1_1transactions" kindref="compound">pyfolio::transactions</ref><sp/>{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip" kindref="compound">RoundTrip</ref><sp/>{</highlight></codeline>
<codeline lineno="17" refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1af520c5ef295cedf9a5dc19a3b96f971b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref><sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1af520c5ef295cedf9a5dc19a3b96f971b" kindref="member">symbol</ref>;</highlight></codeline>
<codeline lineno="18" refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1ac66c57f0f7cf242b6da1a1f6a3326abc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref><sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1ac66c57f0f7cf242b6da1a1f6a3326abc" kindref="member">open_date</ref>;</highlight></codeline>
<codeline lineno="19" refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a5f1d91c388ffc4da453a698aead486b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref><sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a5f1d91c388ffc4da453a698aead486b1" kindref="member">close_date</ref>;</highlight></codeline>
<codeline lineno="20" refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a08a200ab0da0327e4e6f84e5d0c69306" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/namespacepyfolio_1ae1b4389f0d1a53d3ebd7d2aec59e0360" kindref="member">Shares</ref><sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a08a200ab0da0327e4e6f84e5d0c69306" kindref="member">shares</ref>;</highlight></codeline>
<codeline lineno="21" refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a629a14bbd9a75fa97245856ff284f24d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/namespacepyfolio_1a7801b507a1c22f3c1a83bdef81846fc6" kindref="member">Price</ref><sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a629a14bbd9a75fa97245856ff284f24d" kindref="member">open_price</ref>;</highlight></codeline>
<codeline lineno="22" refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a58c13dc929dd48aadd290c6414eaba62" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/namespacepyfolio_1a7801b507a1c22f3c1a83bdef81846fc6" kindref="member">Price</ref><sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a58c13dc929dd48aadd290c6414eaba62" kindref="member">close_price</ref>;</highlight></codeline>
<codeline lineno="23" refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1ada357c8fa2175a5bfd99212e8511a2c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1ada357c8fa2175a5bfd99212e8511a2c3" kindref="member">commission_open</ref>;</highlight></codeline>
<codeline lineno="24" refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a4296f9085cfc109794f15083ebf744f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a4296f9085cfc109794f15083ebf744f8" kindref="member">commission_close</ref>;</highlight></codeline>
<codeline lineno="25" refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a6da11aff0109ec8b004c20f2e5b570b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a6da11aff0109ec8b004c20f2e5b570b7" kindref="member">slippage_open</ref>;</highlight></codeline>
<codeline lineno="26" refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1aaa2493769679ea229f87aea2329e037c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1aaa2493769679ea229f87aea2329e037c" kindref="member">slippage_close</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a574a4eed812a75bf25be26cfd50a7a4a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a574a4eed812a75bf25be26cfd50a7a4a" kindref="member">pnl</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gross_pnl<sp/><sp/><sp/>=<sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a08a200ab0da0327e4e6f84e5d0c69306" kindref="member">shares</ref><sp/>*<sp/>(<ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a58c13dc929dd48aadd290c6414eaba62" kindref="member">close_price</ref><sp/>-<sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a629a14bbd9a75fa97245856ff284f24d" kindref="member">open_price</ref>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_costs<sp/>=<sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1ada357c8fa2175a5bfd99212e8511a2c3" kindref="member">commission_open</ref><sp/>+<sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a4296f9085cfc109794f15083ebf744f8" kindref="member">commission_close</ref><sp/>+<sp/>std::abs(<ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a08a200ab0da0327e4e6f84e5d0c69306" kindref="member">shares</ref>)<sp/>*<sp/>(<ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a6da11aff0109ec8b004c20f2e5b570b7" kindref="member">slippage_open</ref><sp/>+<sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1aaa2493769679ea229f87aea2329e037c" kindref="member">slippage_close</ref>);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gross_pnl<sp/>-<sp/>total_costs;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1ad074c9b422885d050ca3833190b5bdc6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1ad074c9b422885d050ca3833190b5bdc6" kindref="member">return_pct</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>initial_value<sp/>=<sp/>std::abs(<ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a08a200ab0da0327e4e6f84e5d0c69306" kindref="member">shares</ref><sp/>*<sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a629a14bbd9a75fa97245856ff284f24d" kindref="member">open_price</ref>);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(initial_value<sp/>==<sp/>0.0)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a574a4eed812a75bf25be26cfd50a7a4a" kindref="member">pnl</ref>()<sp/>/<sp/>initial_value;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a214fcdbdbd193018d1d18329206cf72f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a214fcdbdbd193018d1d18329206cf72f" kindref="member">duration_days</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1ac66c57f0f7cf242b6da1a1f6a3326abc" kindref="member">open_date</ref>.business_days_until(<ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a5f1d91c388ffc4da453a698aead486b1" kindref="member">close_date</ref>);<sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a6488e6f1054c792d492208f34644b46b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a6488e6f1054c792d492208f34644b46b" kindref="member">is_win</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a574a4eed812a75bf25be26cfd50a7a4a" kindref="member">pnl</ref>()<sp/>&gt;<sp/>0.0;<sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal">};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a9c7d26b6ef38c247ac1d9b537358162d" kindref="member">OpenPosition</ref><sp/>{</highlight></codeline>
<codeline lineno="62" refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a6f6b0e7c0544fbeba7d3b21d22b46c81" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref><sp/><ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a6f6b0e7c0544fbeba7d3b21d22b46c81" kindref="member">timestamp</ref>;</highlight></codeline>
<codeline lineno="63" refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a340c5e8e4295cb795babd34c38f8fa1f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/namespacepyfolio_1ae1b4389f0d1a53d3ebd7d2aec59e0360" kindref="member">Shares</ref><sp/><ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a340c5e8e4295cb795babd34c38f8fa1f" kindref="member">shares</ref>;</highlight></codeline>
<codeline lineno="64" refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a331e5a2a57b1e7193c624b3001245481" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d7/df8/namespacepyfolio_1a7801b507a1c22f3c1a83bdef81846fc6" kindref="member">Price</ref><sp/><ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a331e5a2a57b1e7193c624b3001245481" kindref="member">price</ref>;</highlight></codeline>
<codeline lineno="65" refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1aa84a93cfae39f40417725844fa1cdbd0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1aa84a93cfae39f40417725844fa1cdbd0" kindref="member">commission</ref>;</highlight></codeline>
<codeline lineno="66" refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1ae19c81c00748b0480784c436a5c2e6ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1ae19c81c00748b0480784c436a5c2e6ba" kindref="member">slippage</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a9c7d26b6ef38c247ac1d9b537358162d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a9c7d26b6ef38c247ac1d9b537358162d" kindref="member">OpenPosition</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/d25/classpyfolio_1_1transactions_1_1TransactionRecord" kindref="compound">TransactionRecord</ref>&amp;<sp/>txn)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a6f6b0e7c0544fbeba7d3b21d22b46c81" kindref="member">timestamp</ref>(txn.<ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a6f6b0e7c0544fbeba7d3b21d22b46c81" kindref="member">timestamp</ref>()),<sp/><ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a340c5e8e4295cb795babd34c38f8fa1f" kindref="member">shares</ref>(txn.<ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a340c5e8e4295cb795babd34c38f8fa1f" kindref="member">shares</ref>()),<sp/><ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a331e5a2a57b1e7193c624b3001245481" kindref="member">price</ref>(txn.<ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a331e5a2a57b1e7193c624b3001245481" kindref="member">price</ref>()),<sp/><ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1aa84a93cfae39f40417725844fa1cdbd0" kindref="member">commission</ref>(txn.<ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1aa84a93cfae39f40417725844fa1cdbd0" kindref="member">commission</ref>()),</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1ae19c81c00748b0480784c436a5c2e6ba" kindref="member">slippage</ref>(txn.<ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1ae19c81c00748b0480784c436a5c2e6ba" kindref="member">slippage</ref>())<sp/>{}</highlight></codeline>
<codeline lineno="71"><highlight class="normal">};</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="d7/d9a/classpyfolio_1_1transactions_1_1RoundTripAnalyzer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="d7/d9a/classpyfolio_1_1transactions_1_1RoundTripAnalyzer" kindref="compound">RoundTripAnalyzer</ref><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;Symbol,<sp/>std::queue&lt;OpenPosition&gt;&gt;<sp/>open_positions_;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;RoundTrip&gt;<sp/>completed_trips_;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_transaction(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="de/d25/classpyfolio_1_1transactions_1_1TransactionRecord" kindref="compound">TransactionRecord</ref>&amp;<sp/>txn)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref>&amp;<sp/>symbol<sp/>=<sp/>txn.<ref refid="de/d25/classpyfolio_1_1transactions_1_1TransactionRecord_1a23d1be68fe932ae0a837e91900832d27" kindref="member">symbol</ref>();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>position_queue<sp/>=<sp/>open_positions_[symbol];</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(txn.<ref refid="de/d25/classpyfolio_1_1transactions_1_1TransactionRecord_1a3f7b867b26e9bfa9dc1f68d04adf7cd6" kindref="member">shares</ref>()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Buy<sp/>transaction<sp/>-<sp/>add<sp/>to<sp/>open<sp/>positions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position_queue.push(<ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition" kindref="compound">OpenPosition</ref>{txn});</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sell<sp/>transaction<sp/>-<sp/>close<sp/>positions<sp/>FIFO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/namespacepyfolio_1ae1b4389f0d1a53d3ebd7d2aec59e0360" kindref="member">Shares</ref><sp/>remaining_shares<sp/>=<sp/>std::abs(txn.<ref refid="de/d25/classpyfolio_1_1transactions_1_1TransactionRecord_1a3f7b867b26e9bfa9dc1f68d04adf7cd6" kindref="member">shares</ref>());</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(remaining_shares<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>!position_queue.empty())<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition" kindref="compound">OpenPosition</ref>&amp;<sp/>open_pos<sp/>=<sp/>position_queue.front();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/df8/namespacepyfolio_1ae1b4389f0d1a53d3ebd7d2aec59e0360" kindref="member">Shares</ref><sp/>shares_to_close<sp/>=<sp/>std::min(remaining_shares,<sp/>open_pos.<ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a340c5e8e4295cb795babd34c38f8fa1f" kindref="member">shares</ref>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>round<sp/>trip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip" kindref="compound">RoundTrip</ref><sp/>trip;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trip.<ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1af520c5ef295cedf9a5dc19a3b96f971b" kindref="member">symbol</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>symbol;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trip.<ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1ac66c57f0f7cf242b6da1a1f6a3326abc" kindref="member">open_date</ref><sp/><sp/><sp/>=<sp/>open_pos.<ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a6f6b0e7c0544fbeba7d3b21d22b46c81" kindref="member">timestamp</ref>;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trip.<ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a5f1d91c388ffc4da453a698aead486b1" kindref="member">close_date</ref><sp/><sp/>=<sp/>txn.<ref refid="de/d25/classpyfolio_1_1transactions_1_1TransactionRecord_1a6fd1a872bd04059ded648869a386e2f4" kindref="member">timestamp</ref>();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trip.<ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a08a200ab0da0327e4e6f84e5d0c69306" kindref="member">shares</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>shares_to_close;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trip.<ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a629a14bbd9a75fa97245856ff284f24d" kindref="member">open_price</ref><sp/><sp/>=<sp/>open_pos.<ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a331e5a2a57b1e7193c624b3001245481" kindref="member">price</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trip.<ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a58c13dc929dd48aadd290c6414eaba62" kindref="member">close_price</ref><sp/>=<sp/>txn.<ref refid="de/d25/classpyfolio_1_1transactions_1_1TransactionRecord_1a7151515d54d7ffa33f422324be4978c8" kindref="member">price</ref>();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>costs<sp/>proportionally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>share_ratio<sp/><sp/><sp/><sp/>=<sp/>shares_to_close<sp/>/<sp/>std::abs(txn.<ref refid="de/d25/classpyfolio_1_1transactions_1_1TransactionRecord_1a3f7b867b26e9bfa9dc1f68d04adf7cd6" kindref="member">shares</ref>());</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trip.<ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1ada357c8fa2175a5bfd99212e8511a2c3" kindref="member">commission_open</ref><sp/><sp/>=<sp/>open_pos.<ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1aa84a93cfae39f40417725844fa1cdbd0" kindref="member">commission</ref><sp/>*<sp/>(shares_to_close<sp/>/<sp/>open_pos.<ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a340c5e8e4295cb795babd34c38f8fa1f" kindref="member">shares</ref>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trip.<ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a4296f9085cfc109794f15083ebf744f8" kindref="member">commission_close</ref><sp/>=<sp/>txn.<ref refid="de/d25/classpyfolio_1_1transactions_1_1TransactionRecord_1a4aad9d278d99a6ea902df97607a37e92" kindref="member">commission</ref>()<sp/>*<sp/>share_ratio;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trip.<ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1a6da11aff0109ec8b004c20f2e5b570b7" kindref="member">slippage_open</ref><sp/><sp/><sp/><sp/>=<sp/>open_pos.<ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1ae19c81c00748b0480784c436a5c2e6ba" kindref="member">slippage</ref><sp/>*<sp/>(shares_to_close<sp/>/<sp/>open_pos.<ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a340c5e8e4295cb795babd34c38f8fa1f" kindref="member">shares</ref>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trip.<ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip_1aaa2493769679ea229f87aea2329e037c" kindref="member">slippage_close</ref><sp/><sp/><sp/>=<sp/>txn.<ref refid="de/d25/classpyfolio_1_1transactions_1_1TransactionRecord_1a0e638d5d35ac200e4c4c6dca89d87d09" kindref="member">slippage</ref>()<sp/>*<sp/>share_ratio;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>completed_trips_.push_back(trip);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>open<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>open_pos.<ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a340c5e8e4295cb795babd34c38f8fa1f" kindref="member">shares</ref><sp/>-=<sp/>shares_to_close;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>open_pos.<ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1aa84a93cfae39f40417725844fa1cdbd0" kindref="member">commission</ref><sp/>*=<sp/>(1.0<sp/>-<sp/>shares_to_close<sp/>/<sp/>open_pos.<ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a340c5e8e4295cb795babd34c38f8fa1f" kindref="member">shares</ref>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>open_pos.<ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1ae19c81c00748b0480784c436a5c2e6ba" kindref="member">slippage</ref><sp/>*=<sp/>(1.0<sp/>-<sp/>shares_to_close<sp/>/<sp/>open_pos.<ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a340c5e8e4295cb795babd34c38f8fa1f" kindref="member">shares</ref>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(open_pos.<ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a340c5e8e4295cb795babd34c38f8fa1f" kindref="member">shares</ref><sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position_queue.pop();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remaining_shares<sp/>-=<sp/>shares_to_close;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>are<sp/>still<sp/>shares<sp/>to<sp/>sell,<sp/>it&apos;s<sp/>a<sp/>short<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remaining_shares<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition" kindref="compound">OpenPosition</ref><sp/>short_pos{txn};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>short_pos.<ref refid="d4/d46/structpyfolio_1_1transactions_1_1OpenPosition_1a340c5e8e4295cb795babd34c38f8fa1f" kindref="member">shares</ref><sp/>=<sp/>-remaining_shares;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position_queue.push(short_pos);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="143" refid="d7/d9a/classpyfolio_1_1transactions_1_1RoundTripAnalyzer_1a37bcd2764fc38e2c3c0b84b403e5f3c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;std::vector&lt;RoundTrip&gt;</ref>&gt;<sp/><ref refid="d7/d9a/classpyfolio_1_1transactions_1_1RoundTripAnalyzer_1a37bcd2764fc38e2c3c0b84b403e5f3c3" kindref="member">analyze</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d6/d6e/classpyfolio_1_1transactions_1_1TransactionSeries" kindref="compound">TransactionSeries</ref>&amp;<sp/><ref refid="dc/d4e/namespacepyfolio_1_1transactions" kindref="compound">transactions</ref>)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>previous<sp/>analysis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>open_positions_.clear();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>completed_trips_.clear();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Process<sp/>all<sp/>transactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>txn<sp/>:<sp/><ref refid="dc/d4e/namespacepyfolio_1_1transactions" kindref="compound">transactions</ref>)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>process_transaction(txn);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;std::vector&lt;RoundTrip&gt;</ref>&gt;::success(completed_trips_);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="d7/d9a/classpyfolio_1_1transactions_1_1RoundTripAnalyzer_1a03dffad0aa5b2f105828ecfe0f759c9b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;Symbol,<sp/>std::vector&lt;OpenPosition&gt;&gt;<sp/><ref refid="d7/d9a/classpyfolio_1_1transactions_1_1RoundTripAnalyzer_1a03dffad0aa5b2f105828ecfe0f759c9b" kindref="member">get_open_positions</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;Symbol,<sp/>std::vector&lt;OpenPosition&gt;&gt;<sp/>result;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[symbol,<sp/>queue]<sp/>:<sp/>open_positions_)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>queue_copy<sp/>=<sp/>queue;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!queue_copy.empty())<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result[symbol].push_back(queue_copy.front());</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue_copy.pop();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal">};</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics" kindref="compound">RoundTripStatistics</ref><sp/>{</highlight></codeline>
<codeline lineno="178" refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1a7f805788f70bda40df60ff7f630414ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1a7f805788f70bda40df60ff7f630414ae" kindref="member">total_trips</ref>;</highlight></codeline>
<codeline lineno="179" refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1aee91eb5729911c5a62c70cb315a13a0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1aee91eb5729911c5a62c70cb315a13a0a" kindref="member">winning_trips</ref>;</highlight></codeline>
<codeline lineno="180" refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1a97622b9dd1508f55f38ad0989d4312af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1a97622b9dd1508f55f38ad0989d4312af" kindref="member">losing_trips</ref>;</highlight></codeline>
<codeline lineno="181" refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1ab0a12473fca06586078a0317dbea8ce3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1ab0a12473fca06586078a0317dbea8ce3" kindref="member">win_rate</ref>;</highlight></codeline>
<codeline lineno="182" refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1ad2f39a0f12205871bc87eabdcc7d411b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1ad2f39a0f12205871bc87eabdcc7d411b" kindref="member">average_pnl</ref>;</highlight></codeline>
<codeline lineno="183" refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1a6aaccc9ad722ec2e5061b596d7685b58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1a6aaccc9ad722ec2e5061b596d7685b58" kindref="member">average_return</ref>;</highlight></codeline>
<codeline lineno="184" refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1a5fd51af6e2a67334c7eefc1af5b3c345" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1a5fd51af6e2a67334c7eefc1af5b3c345" kindref="member">average_duration_days</ref>;</highlight></codeline>
<codeline lineno="185" refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1a108b9a180a808f8d4c6e70e6055aab24" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1a108b9a180a808f8d4c6e70e6055aab24" kindref="member">total_pnl</ref>;</highlight></codeline>
<codeline lineno="186" refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1a6db4a1d9397b9357f6c111a9ecdafee9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1a6db4a1d9397b9357f6c111a9ecdafee9" kindref="member">best_trade_pnl</ref>;</highlight></codeline>
<codeline lineno="187" refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1ae3ac363603ce5e312d962c4f2a7cb267" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1ae3ac363603ce5e312d962c4f2a7cb267" kindref="member">worst_trade_pnl</ref>;</highlight></codeline>
<codeline lineno="188" refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1a2ef5abe46c585cbe000e59afaf7f2812" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1a2ef5abe46c585cbe000e59afaf7f2812" kindref="member">profit_factor</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1a4c27b81823966c6d5b55fd44a02334cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;RoundTripStatistics&gt;</ref><sp/><ref refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1a4c27b81823966c6d5b55fd44a02334cd" kindref="member">calculate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;RoundTrip&gt;&amp;<sp/>trips)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trips.empty())<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" kindref="member">Result&lt;RoundTripStatistics&gt;::error</ref>(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" kindref="member">ErrorCode::InsufficientData</ref>,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>round<sp/>trips<sp/>to<sp/>analyze&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics" kindref="compound">RoundTripStatistics</ref><sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>{};</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.total_trips<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(trips.size());</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_wins<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_losses<sp/><sp/><sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_duration<sp/><sp/><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total_return_pct<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.best_trade_pnl<sp/><sp/>=<sp/>std::numeric_limits&lt;double&gt;::lowest();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.worst_trade_pnl<sp/>=<sp/>std::numeric_limits&lt;double&gt;::max();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>trip<sp/>:<sp/>trips)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pnl<sp/>=<sp/>trip.pnl();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.total_pnl<sp/>+=<sp/>pnl;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnl<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.winning_trips++;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_wins<sp/>+=<sp/>pnl;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.losing_trips++;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_losses<sp/>+=<sp/>std::abs(pnl);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.best_trade_pnl<sp/><sp/>=<sp/>std::max(<ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.best_trade_pnl,<sp/>pnl);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.worst_trade_pnl<sp/>=<sp/>std::min(<ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.worst_trade_pnl,<sp/>pnl);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_duration<sp/>+=<sp/>trip.duration_days();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_return_pct<sp/>+=<sp/>trip.return_pct();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.win_rate<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.winning_trips)<sp/>/<sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.total_trips;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.average_pnl<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.total_pnl<sp/>/<sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.total_trips;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.average_return<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>total_return_pct<sp/>/<sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.total_trips;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.average_duration_days<sp/>=<sp/>total_duration<sp/>/<sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.total_trips;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Profit<sp/>factor<sp/>=<sp/>gross<sp/>wins<sp/>/<sp/>gross<sp/>losses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.profit_factor<sp/>=</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_losses<sp/>&gt;<sp/>0<sp/>?<sp/>total_wins<sp/>/<sp/>total_losses<sp/>:<sp/>(total_wins<sp/>&gt;<sp/>0<sp/>?<sp/>std::numeric_limits&lt;double&gt;::max()<sp/>:<sp/>1.0);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" kindref="member">Result&lt;RoundTripStatistics&gt;::success</ref>(<ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal">};</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="dc/d4e/namespacepyfolio_1_1transactions_1a2c2a7573e712311accb7cd40b46fdcb1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::map&lt;Symbol,<sp/>std::vector&lt;RoundTrip&gt;&gt;<sp/><ref refid="dc/d4e/namespacepyfolio_1_1transactions_1a2c2a7573e712311accb7cd40b46fdcb1" kindref="member">group_by_symbol</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;RoundTrip&gt;&amp;<sp/>trips)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;Symbol,<sp/>std::vector&lt;RoundTrip&gt;&gt;<sp/>grouped;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>trip<sp/>:<sp/>trips)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grouped[trip.symbol].push_back(trip);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>grouped;</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="257" refid="dc/d4e/namespacepyfolio_1_1transactions_1acb883f3044759374411a2bd32c9fe1be" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>std::vector&lt;RoundTrip&gt;&gt;<sp/><ref refid="dc/d4e/namespacepyfolio_1_1transactions_1acb883f3044759374411a2bd32c9fe1be" kindref="member">group_by_duration</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;RoundTrip&gt;&amp;<sp/>trips)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>std::vector&lt;RoundTrip&gt;&gt;<sp/>grouped;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>trip<sp/>:<sp/>trips)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>days<sp/>=<sp/>trip.duration_days();</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>bucket;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(days<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bucket<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;intraday&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(days<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bucket<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;1_day&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(days<sp/>&lt;=<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bucket<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;2-5_days&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(days<sp/>&lt;=<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bucket<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;6-10_days&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(days<sp/>&lt;=<sp/>21)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bucket<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;11-21_days&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(days<sp/>&lt;=<sp/>42)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bucket<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;22-42_days&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(days<sp/>&lt;=<sp/>63)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bucket<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;43-63_days&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bucket<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;64+_days&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grouped[bucket].push_back(trip);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>grouped;</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="dc/d4e/namespacepyfolio_1_1transactions_1aae9dcab036865e9b023c1b9464a65611" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;DataFrame&gt;</ref><sp/><ref refid="dc/d4e/namespacepyfolio_1_1transactions_1aae9dcab036865e9b023c1b9464a65611" kindref="member">round_trip_performance_by_period</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;RoundTrip&gt;&amp;<sp/>trips,<sp/><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92e" kindref="member">Frequency</ref><sp/>freq)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trips.empty())<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" kindref="member">Result&lt;DataFrame&gt;::error</ref>(<ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" kindref="member">ErrorCode::InsufficientData</ref>,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>round<sp/>trips<sp/>to<sp/>analyze&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Group<sp/>by<sp/>close<sp/>date<sp/>period</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;DateTime,<sp/>std::vector&lt;RoundTrip&gt;&gt;<sp/>period_trips;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>trip<sp/>:<sp/>trips)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref><sp/>period_start;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>close_date<sp/>=<sp/>trip.close_date.<ref refid="d6/d4f/classpyfolio_1_1DateTime_1a14bed41e6c19c2dfd9c0d36a5edcd29f" kindref="member">to_date</ref>();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(freq)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92ea9030e39f00132d583da4122532e509e9" kindref="member">Frequency::Monthly</ref>:</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>period_start<sp/>=<sp/><ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref>{close_date.year()<sp/>/<sp/>close_date.month()<sp/>/<sp/>std::chrono::day{1}};</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eabe92c62702dcec6751c101b5adb0ce3b" kindref="member">Frequency::Quarterly</ref>:<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>month<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>close_date.month();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>quarter_start_month<sp/>=<sp/>((</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(month)<sp/>-<sp/>1)<sp/>/<sp/>3)<sp/>*<sp/>3<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>period_start<sp/>=</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref>{close_date.year()<sp/>/<sp/>std::chrono::month{quarter_start_month}<sp/>/<sp/>std::chrono::day{1}};</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92eacf5ea7953dc47105e0eb179dbefaaf46" kindref="member">Frequency::Yearly</ref>:</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>period_start<sp/>=<sp/><ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref>{close_date.year()<sp/>/<sp/>std::chrono::January<sp/>/<sp/>std::chrono::day{1}};</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>period_start<sp/>=<sp/>trip.close_date;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>period_trips[period_start].push_back(trip);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>statistics<sp/>for<sp/>each<sp/>period</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;DateTime&gt;<sp/>periods;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>total_pnls;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>win_rates;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>avg_returns;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>trip_counts;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[period,<sp/>trips_in_period]<sp/>:<sp/>period_trips)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref><sp/>=<sp/><ref refid="d0/ddd/structpyfolio_1_1transactions_1_1RoundTripStatistics_1a4c27b81823966c6d5b55fd44a02334cd" kindref="member">RoundTripStatistics::calculate</ref>(trips_in_period);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.is_ok())<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>periods.push_back(period);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_pnls.push_back(<ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.value().total_pnl);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win_rates.push_back(<ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.value().win_rate);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>avg_returns.push_back(<ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.value().average_return);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trip_counts.push_back(<ref refid="d6/ddc/namespacepyfolio_1_1stats" kindref="compound">stats</ref>.value().total_trips);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="da/deb/classpyfolio_1_1DataFrame" kindref="compound">DataFrame</ref><sp/>df{periods};</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>df.<ref refid="da/deb/classpyfolio_1_1DataFrame_1ae16ceddcf917845c49128783794c109e" kindref="member">add_column</ref>(</highlight><highlight class="stringliteral">&quot;total_pnl&quot;</highlight><highlight class="normal">,<sp/>total_pnls);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>df.add_column(</highlight><highlight class="stringliteral">&quot;win_rate&quot;</highlight><highlight class="normal">,<sp/>win_rates);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>df.add_column(</highlight><highlight class="stringliteral">&quot;avg_return&quot;</highlight><highlight class="normal">,<sp/>avg_returns);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>df.add_column(</highlight><highlight class="stringliteral">&quot;trip_count&quot;</highlight><highlight class="normal">,<sp/>trip_counts);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" kindref="member">Result&lt;DataFrame&gt;::success</ref>(std::move(df));</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="353" refid="dc/d4e/namespacepyfolio_1_1transactions_1ae893dfcd1661353c20000ac7cf36a057" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::vector&lt;RoundTrip&gt;<sp/><ref refid="dc/d4e/namespacepyfolio_1_1transactions_1ae893dfcd1661353c20000ac7cf36a057" kindref="member">filter_round_trips</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;RoundTrip&gt;&amp;<sp/>trips,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip" kindref="compound">RoundTrip</ref>&amp;)&gt;&amp;<sp/>predicate)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;RoundTrip&gt;<sp/>filtered;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy_if(trips.begin(),<sp/>trips.end(),<sp/>std::back_inserter(filtered),<sp/>predicate);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filtered;</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="365" refid="dc/d4e/namespacepyfolio_1_1transactions_1a5002dc965910ad09b404e64aa84a5844" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::vector&lt;RoundTrip&gt;<sp/><ref refid="dc/d4e/namespacepyfolio_1_1transactions_1a5002dc965910ad09b404e64aa84a5844" kindref="member">top_round_trips</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;RoundTrip&gt;&amp;<sp/>trips,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;RoundTrip&gt;<sp/>sorted_trips<sp/>=<sp/>trips;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>std::partial_sort(sorted_trips.begin(),<sp/>sorted_trips.begin()<sp/>+<sp/>std::min(n,<sp/>sorted_trips.size()),<sp/>sorted_trips.end(),</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip" kindref="compound">RoundTrip</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="d7/d9d/structpyfolio_1_1transactions_1_1RoundTrip" kindref="compound">RoundTrip</ref>&amp;<sp/>b)<sp/>{<sp/>return<sp/>a.pnl()<sp/>&gt;<sp/>b.pnl();<sp/>});</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>sorted_trips.resize(std::min(n,<sp/>sorted_trips.size()));</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sorted_trips;</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>pyfolio::transactions</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/transactions/round_trips.h"/>
  </compounddef>
</doxygen>
