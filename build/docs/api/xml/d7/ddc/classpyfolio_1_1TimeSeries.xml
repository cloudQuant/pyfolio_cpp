<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d7/ddc/classpyfolio_1_1TimeSeries" kind="class" language="C++" prot="public">
    <compoundname>pyfolio::TimeSeries</compoundname>
    <includes refid="d8/d51/time__series_8h" local="no">time_series.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
    <sectiondef kind="public-type">
      <memberdef kind="typedef" id="d7/ddc/classpyfolio_1_1TimeSeries_1a9d9cdb98e0f041880fa5f76c64fc0116" prot="public" static="no">
        <type>T</type>
        <definition>using pyfolio::TimeSeries&lt; T &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>pyfolio::TimeSeries::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="45" column="5" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d7/ddc/classpyfolio_1_1TimeSeries_1ad0095a701f16fea4226b12cb4db01b48" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using pyfolio::TimeSeries&lt; T &gt;::size_type =  std::size_t</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>pyfolio::TimeSeries::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="46" column="5" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d7/ddc/classpyfolio_1_1TimeSeries_1aded88af78b3a73f0a49ba1282d43bb69" prot="public" static="no">
        <type>typename std::vector&lt; T &gt;::iterator</type>
        <definition>using pyfolio::TimeSeries&lt; T &gt;::iterator =  typename std::vector&lt;T&gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <qualifiedname>pyfolio::TimeSeries::iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="47" column="5" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d7/ddc/classpyfolio_1_1TimeSeries_1a75370c5ba8ebf59087e51110a045c62b" prot="public" static="no">
        <type>typename std::vector&lt; T &gt;::const_iterator</type>
        <definition>using pyfolio::TimeSeries&lt; T &gt;::const_iterator =  typename std::vector&lt;T&gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <qualifiedname>pyfolio::TimeSeries::const_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="48" column="5" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="48" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d7/ddc/classpyfolio_1_1TimeSeries_1afebd97b1f576d8dab24a3b9d97173003" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> &gt;</type>
        <definition>std::vector&lt;DateTime&gt; pyfolio::TimeSeries&lt; T &gt;::timestamps_</definition>
        <argsstring></argsstring>
        <name>timestamps_</name>
        <qualifiedname>pyfolio::TimeSeries::timestamps_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="24" column="17" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/ddc/classpyfolio_1_1TimeSeries_1a35bdbada179a223c590ee0c68fd1ae13" prot="private" static="no" mutable="no">
        <type>std::vector&lt; T &gt;</type>
        <definition>std::vector&lt;T&gt; pyfolio::TimeSeries&lt; T &gt;::values_</definition>
        <argsstring></argsstring>
        <name>values_</name>
        <qualifiedname>pyfolio::TimeSeries::values_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="25" column="17" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d7/ddc/classpyfolio_1_1TimeSeries_1ac6444a8cdfb457bbb0f55242b4dd2a70" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string pyfolio::TimeSeries&lt; T &gt;::name_</definition>
        <argsstring></argsstring>
        <name>name_</name>
        <qualifiedname>pyfolio::TimeSeries::name_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="26" column="17" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="26" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1af9884590f69dd612b4a5adc7bb3df918" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; void &gt;</type>
        <definition>Result&lt; void &gt; pyfolio::TimeSeries&lt; T &gt;::validate_consistency</definition>
        <argsstring>() const</argsstring>
        <name>validate_consistency</name>
        <qualifiedname>pyfolio::TimeSeries::validate_consistency</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="29" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="29" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a131f541a7974a35820a7fe0043d87c2f" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::TimeSeries&lt; T &gt;::validate_and_throw</definition>
        <argsstring>() const</argsstring>
        <name>validate_and_throw</name>
        <qualifiedname>pyfolio::TimeSeries::validate_and_throw</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="37" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="37" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a57f5bc381c234dc66040c8095c8ebf9b" prot="private" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool pyfolio::TimeSeries&lt; T &gt;::is_sorted_by_time</definition>
        <argsstring>() const noexcept</argsstring>
        <name>is_sorted_by_time</name>
        <qualifiedname>pyfolio::TimeSeries::is_sorted_by_time</qualifiedname>
        <briefdescription>
<para>Check if time series is already sorted by timestamp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="249" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="249" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a557977be9b5e83fa77d44b1739d057be" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::TimeSeries&lt; T &gt;::sort_by_time_small</definition>
        <argsstring>()</argsstring>
        <name>sort_by_time_small</name>
        <qualifiedname>pyfolio::TimeSeries::sort_by_time_small</qualifiedname>
        <briefdescription>
<para>Optimized sorting for small datasets using insertion sort. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="264" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="264" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a25a23789c7960328dea67749f0b16e8d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::TimeSeries&lt; T &gt;::sort_by_time_optimized</definition>
        <argsstring>()</argsstring>
        <name>sort_by_time_optimized</name>
        <qualifiedname>pyfolio::TimeSeries::sort_by_time_optimized</qualifiedname>
        <briefdescription>
<para>Optimized sorting for larger datasets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="285" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="285" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a45d308352c0946c231ac724f5cc68142" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref></type>
        <definition>DateTime pyfolio::TimeSeries&lt; T &gt;::get_period_start</definition>
        <argsstring>(const DateTime &amp;timestamp, Frequency freq) const</argsstring>
        <name>get_period_start</name>
        <qualifiedname>pyfolio::TimeSeries::get_period_start</qualifiedname>
        <param>
          <type>const <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> &amp;</type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92e" kindref="member">Frequency</ref></type>
          <declname>freq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="1197" column="14" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="1197" bodyend="1225"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1aa194feddd304eb863bfcb6f445769968" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pyfolio::TimeSeries&lt; T &gt;::TimeSeries</definition>
        <argsstring>()=default</argsstring>
        <name>TimeSeries</name>
        <qualifiedname>pyfolio::TimeSeries::TimeSeries</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="51" column="5"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1ab115af26ed8e54a93dd75a476d95ff99" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pyfolio::TimeSeries&lt; T &gt;::TimeSeries</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>TimeSeries</name>
        <qualifiedname>pyfolio::TimeSeries::TimeSeries</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="53" column="14" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1ab47f50836d650a1f8c1f27ee517ae44e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pyfolio::TimeSeries&lt; T &gt;::TimeSeries</definition>
        <argsstring>(const std::vector&lt; DateTime &gt; &amp;timestamps, const std::vector&lt; T &gt; &amp;values, const std::string &amp;name=&quot;&quot;)</argsstring>
        <name>TimeSeries</name>
        <qualifiedname>pyfolio::TimeSeries::TimeSeries</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> &gt; &amp;</type>
          <declname>timestamps</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="55" column="5" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="55" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1abb6f89aeb066415be4db3d1af1fdede6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pyfolio::TimeSeries&lt; T &gt;::TimeSeries</definition>
        <argsstring>(std::vector&lt; DateTime &gt; &amp;&amp;timestamps, std::vector&lt; T &gt; &amp;&amp;values, const std::string &amp;name=&quot;&quot;)</argsstring>
        <name>TimeSeries</name>
        <qualifiedname>pyfolio::TimeSeries::TimeSeries</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> &gt; &amp;&amp;</type>
          <declname>timestamps</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;&amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="61" column="5" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="61" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1ad0095a701f16fea4226b12cb4db01b48" kindref="member">size_type</ref></type>
        <definition>size_type pyfolio::TimeSeries&lt; T &gt;::size</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size</name>
        <qualifiedname>pyfolio::TimeSeries::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="102" column="25" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="102" bodyend="102"/>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1af30bc2537515dd9bf004768149ace4a4" compoundref="d5/db2/analytics_2statistics_8h" startline="478" endline="518">pyfolio::Statistics::alpha_beta</referencedby>
        <referencedby refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a0b79ac7ee0ea18fbb4280bdd518040f4" compoundref="d6/dfe/bayesian_8h" startline="228" endline="295">pyfolio::analytics::BayesianAnalyzer::analyze_performance</referencedby>
        <referencedby refid="dd/d26/classpyfolio_1_1analytics_1_1PerformanceAnalysisSuite_1a2a89a113f35927f33af40fa23ed44a70" compoundref="df/de7/performance__analysis__suite_8h" startline="255" endline="403">pyfolio::analytics::PerformanceAnalysisSuite::analyze_performance</referencedby>
        <referencedby refid="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite_1a7c39e9da13b225d9186ed324da6514d5" compoundref="dd/d71/parallel__performance__suite_8h" startline="158" endline="334">pyfolio::analytics::ParallelPerformanceAnalysisSuite::analyze_performance_parallel</referencedby>
        <referencedby refid="d3/d3c/classpyfolio_1_1analytics_1_1MarketIndicatorsAnalyzer_1aced12b9d93e86d925c9259daeb0d65fc" compoundref="d4/d7b/market__indicators_8h" startline="291" endline="359">pyfolio::analytics::MarketIndicatorsAnalyzer::analyze_regime_indicators</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a6a1add6f9d8fea40487d684d6566addc" compoundref="d8/d51/time__series_8h" startline="568" endline="575">pyfolio::TimeSeries&lt; MarketIndicators &gt;::at</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7d98d0027ba1c14dbcbcfe4428aa8024" compoundref="d8/d51/time__series_8h" startline="176" endline="213">pyfolio::TimeSeries&lt; MarketIndicators &gt;::bulk_insert</referencedby>
        <referencedby refid="d9/dc2/classpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1aa1a010f21d746f4b5ca020320a4ad529" compoundref="da/dd4/attribution_8h" startline="417" endline="484">pyfolio::attribution::AlphaBetaAnalysis::calculate</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aee9b783d9de6756d4fd9c98c86274b05" compoundref="d4/d73/returns_8h" startline="275" endline="296">pyfolio::performance::calculate_cagr</referencedby>
        <referencedby refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1af897e871af916ea97b6e63d64d016be8" compoundref="db/d26/capacity_8h" startline="315" endline="346">pyfolio::capacity::CapacityAnalyzer::calculate_capacity_decay</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a0643c69995dcd3f223563def5f3efb99" compoundref="d4/d73/returns_8h" startline="102" endline="120">pyfolio::performance::calculate_cumulative_returns</referencedby>
        <referencedby refid="df/da3/namespacepyfolio_1_1visualization_1_1utils_1aafd4e895a7ae4f6f02efa417bfaf70a7" compoundref="d3/df8/plotting_8h" startline="223" endline="234">pyfolio::visualization::utils::calculate_cumulative_returns</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a0b36bd99af8d88af1dc5578ef684c6e8" compoundref="d4/d73/returns_8h" startline="83" endline="97">pyfolio::performance::calculate_excess_returns</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aa845ba07f3b5467f5cac8d9fc83e2368" compoundref="d4/d73/returns_8h" startline="49" endline="78">pyfolio::performance::calculate_log_returns</referencedby>
        <referencedby refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a0e3a4ce0474850feced4c15ca589cb97" compoundref="d4/dc1/cached__performance__metrics_8h" startline="412" endline="438">pyfolio::analytics::CachedPerformanceCalculator::calculate_performance_metrics</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aba556ae09a3dbbdad98c878c5b84be4a" compoundref="d4/d73/returns_8h" startline="15" endline="44">pyfolio::performance::calculate_returns</referencedby>
        <referencedby refid="d3/d3c/classpyfolio_1_1analytics_1_1MarketIndicatorsAnalyzer_1a360e26609fdcd35ddfb586b19864b435" compoundref="d4/d7b/market__indicators_8h" startline="161" endline="196">pyfolio::analytics::MarketIndicatorsAnalyzer::calculate_vix_regime</referencedby>
        <referencedby refid="d3/d3c/classpyfolio_1_1analytics_1_1MarketIndicatorsAnalyzer_1a53249535e8c8f38e79c77105fb7e5728" compoundref="d4/d7b/market__indicators_8h" startline="201" endline="239">pyfolio::analytics::MarketIndicatorsAnalyzer::calculate_yield_curve_slope</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aea9501b23c640378f687a97c51874232" compoundref="d4/d73/returns_8h" startline="301" endline="311">pyfolio::performance::convert_returns</referencedby>
        <referencedby refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1ae8d11622fcee575f2c19849d443dbb94" compoundref="d4/dc1/cached__performance__metrics_8h" startline="333" endline="356">pyfolio::analytics::CachedPerformanceCalculator::correlation</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a41ce57e7df0fc468024c1fb40b2c773a" compoundref="d8/d51/time__series_8h" startline="1152" endline="1194">pyfolio::TimeSeries&lt; MarketIndicators &gt;::correlation</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a16547ab9cbc2a80fb6ca5e8436688c0d" compoundref="d8/d51/time__series_8h" startline="515" endline="526">pyfolio::TimeSeries&lt; MarketIndicators &gt;::cumprod</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1aabcf1a46e463e3a482632eacb0265394" compoundref="d8/d51/time__series_8h" startline="499" endline="510">pyfolio::TimeSeries&lt; MarketIndicators &gt;::cumsum</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a5cae2e774b3eeab9c87e2e2a44ee532a" compoundref="d8/d51/time__series_8h" startline="855" endline="874">pyfolio::TimeSeries&lt; MarketIndicators &gt;::cumulative_returns</referencedby>
        <referencedby refid="d0/dfb/classpyfolio_1_1analytics_1_1RegimeDetector_1a064970a0664b36d4aaa708d9e749d628" compoundref="d2/dfc/regime__detection_8h" startline="228" endline="272">pyfolio::analytics::RegimeDetector::detect_regimes</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1ace0a88e334558363898722abd949922b" compoundref="d8/d51/time__series_8h" startline="1126" endline="1147">pyfolio::TimeSeries&lt; MarketIndicators &gt;::dot</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1af0769c2f121e004e306b237bc78d6806" compoundref="d8/d51/time__series_8h" startline="531" endline="546">pyfolio::TimeSeries&lt; MarketIndicators &gt;::dropna</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a72a6639531f459b9963884e4d4ac571e" compoundref="d7/d06/ratios_8h" startline="164" endline="212">pyfolio::performance::information_ratio</referencedby>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1a0fd32c54eb1fea5a675633d5f85b7fc0" compoundref="d5/db2/analytics_2statistics_8h" startline="522" endline="561">pyfolio::Statistics::information_ratio</referencedby>
        <referencedby refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1ae12cd4f5a2e889c8d7ff4ac4ab513f5e" compoundref="d4/dc1/cached__performance__metrics_8h" startline="483" endline="516">pyfolio::analytics::CachedPerformanceCalculator::max_drawdown</referencedby>
        <referencedby refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a8bc981bc9cbd284d47b40f4ce72c14a5" compoundref="d4/dc1/cached__performance__metrics_8h" startline="282" endline="302">pyfolio::analytics::CachedPerformanceCalculator::mean</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1aad798a4da69bff9c8bb9d335eaba6ec6" compoundref="d8/d51/time__series_8h" startline="778" endline="797">pyfolio::TimeSeries&lt; MarketIndicators &gt;::mean</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab9d28c69b57f3f05b5c70416989e727f" compoundref="d8/d51/time__series_8h" startline="1070" endline="1096">pyfolio::TimeSeries&lt; MarketIndicators &gt;::operator*</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1acb95f2faa1e3cfe36d2d6ead77b82873" compoundref="d8/d51/time__series_8h" startline="1101" endline="1121">pyfolio::TimeSeries&lt; MarketIndicators &gt;::operator*</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a825f0e34f5a5da409278b5bed99f52c1" compoundref="d8/d51/time__series_8h" startline="1010" endline="1035">pyfolio::TimeSeries&lt; MarketIndicators &gt;::operator+</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0045682c4ad12712fdb45eff3f707928" compoundref="d8/d51/time__series_8h" startline="1040" endline="1065">pyfolio::TimeSeries&lt; MarketIndicators &gt;::operator-</referencedby>
        <referencedby refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a92b8d67fd5072f6ff834101212b172fa" compoundref="d9/d36/parallel__algorithms_8h" startline="314" endline="384">pyfolio::parallel::ParallelAlgorithms::parallel_correlation</referencedby>
        <referencedby refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a108b4651f0cd7b9335eb935f57b67ad3" compoundref="d9/d36/parallel__algorithms_8h" startline="390" endline="451">pyfolio::parallel::ParallelAlgorithms::parallel_rolling_operation</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a434b80c0be5078bf91933e48b3fd48c3" compoundref="d8/d51/time__series_8h" startline="473" endline="494">pyfolio::TimeSeries&lt; MarketIndicators &gt;::pct_change</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1aa62c243abee449a12d03b6039807bc5d" compoundref="d8/d51/time__series_8h" startline="368" endline="392">pyfolio::TimeSeries&lt; MarketIndicators &gt;::resample</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a74758165855945e1aca6706f6758c691" compoundref="d8/d51/time__series_8h" startline="829" endline="850">pyfolio::TimeSeries&lt; MarketIndicators &gt;::returns</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a4d4c9d331becbed701eacccc2b29ae15" compoundref="d8/d51/time__series_8h" startline="398" endline="431">pyfolio::TimeSeries&lt; MarketIndicators &gt;::rolling</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1ac2b9a1c0db8437da1ec1417c01e06919" compoundref="d8/d51/time__series_8h" startline="728" endline="773">pyfolio::TimeSeries&lt; MarketIndicators &gt;::rolling_max</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a07f089ab270bd9a2daf14c4802966942" compoundref="d8/de8/drawdown_8h" startline="319" endline="354">pyfolio::performance::rolling_max_drawdown</referencedby>
        <referencedby refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a86abd7db22a354c6ef057158864d41bf" compoundref="d4/dc1/cached__performance__metrics_8h" startline="362" endline="381">pyfolio::analytics::CachedPerformanceCalculator::rolling_mean</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a09b5e0db91c49c4ef4b768f34e838a6e" compoundref="d8/d51/time__series_8h" startline="580" endline="618">pyfolio::TimeSeries&lt; MarketIndicators &gt;::rolling_mean</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a90865bd0cd710c92dfb90263d348a012" compoundref="d8/d51/time__series_8h" startline="678" endline="723">pyfolio::TimeSeries&lt; MarketIndicators &gt;::rolling_min</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a5e53c9105f237045953172393a34c5c2" compoundref="d4/d73/returns_8h" startline="175" endline="197">pyfolio::performance::rolling_returns</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a65aa70a47c152e3dbb1e73ea2dd1f0c4" compoundref="d7/d06/ratios_8h" startline="330" endline="368">pyfolio::performance::rolling_sharpe_ratio</referencedby>
        <referencedby refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a42bf7ecca30cbf723515dc06df7ba678" compoundref="d4/dc1/cached__performance__metrics_8h" startline="387" endline="406">pyfolio::analytics::CachedPerformanceCalculator::rolling_std</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1aa7bb9fb26a605ffa13f550d8597c968d" compoundref="d8/d51/time__series_8h" startline="623" endline="673">pyfolio::TimeSeries&lt; MarketIndicators &gt;::rolling_std</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a8a0797d8f8603e3757181fb825c960b8" compoundref="d4/d73/returns_8h" startline="225" endline="254">pyfolio::performance::rolling_volatility</referencedby>
        <referencedby refid="db/db8/classpyfolio_1_1web_1_1JsonSerializer_1a7adc5b913cadb3d0cc93d5ad7b2b93fd" compoundref="d4/d45/json__serializer_8h" startline="41" endline="56">pyfolio::web::JsonSerializer::serialize_time_series</referencedby>
        <referencedby refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a78e06e24b176ddec6dc0640e175bdd1f" compoundref="d4/dc1/cached__performance__metrics_8h" startline="444" endline="477">pyfolio::analytics::CachedPerformanceCalculator::sharpe_ratio</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a1fb9b999f09567e14ffdb202f4047b6a" compoundref="d8/d51/time__series_8h" startline="436" endline="468">pyfolio::TimeSeries&lt; MarketIndicators &gt;::shift</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a6aef72caa37febb0f72b802ef26d15dd" compoundref="d8/d51/time__series_8h" startline="226" endline="243">pyfolio::TimeSeries&lt; MarketIndicators &gt;::sort_by_time</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82439ade72c213e3ffd477dd6a2058e5" compoundref="d8/d51/time__series_8h" startline="802" endline="824">pyfolio::TimeSeries&lt; MarketIndicators &gt;::std</referencedby>
        <referencedby refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1ae2b363deb9d87338d104b96de4ae3a7f" compoundref="d4/dc1/cached__performance__metrics_8h" startline="308" endline="327">pyfolio::analytics::CachedPerformanceCalculator::std_deviation</referencedby>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1a2e0bb5b9b5052088b4ec146150811489" compoundref="d5/db2/analytics_2statistics_8h" startline="564" endline="598">pyfolio::Statistics::tracking_error</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1ae0eb073ae0b6cba1b6f6ed684179da8c" compoundref="d7/d06/ratios_8h" startline="256" endline="325">pyfolio::performance::treynor_ratio</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool pyfolio::TimeSeries&lt; T &gt;::empty</definition>
        <argsstring>() const noexcept</argsstring>
        <name>empty</name>
        <qualifiedname>pyfolio::TimeSeries::empty</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="103" column="20" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="103" bodyend="103"/>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1acabfd3a56cd8250c87a2f50b76d4ed4b" compoundref="d4/d73/returns_8h" startline="147" endline="170">pyfolio::performance::aggregate_returns</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a8bcf83a00202a1aa143a985b51c93d90" compoundref="d8/d51/time__series_8h" startline="892" endline="922">pyfolio::TimeSeries&lt; MarketIndicators &gt;::align</referencedby>
        <referencedby refid="dc/d21/namespacepyfolio_1_1analytics_1_1statistics_1a8ebe063865d4f8a44de34903ced7fabc" compoundref="d5/db2/analytics_2statistics_8h" startline="187" endline="236">pyfolio::analytics::statistics::analyze_correlation</referencedby>
        <referencedby refid="dc/d21/namespacepyfolio_1_1analytics_1_1statistics_1a50482d1bd36f2cb5c64daa034eeabbe3" compoundref="d5/db2/analytics_2statistics_8h" startline="123" endline="169">pyfolio::analytics::statistics::analyze_distribution</referencedby>
        <referencedby refid="d3/d3c/classpyfolio_1_1analytics_1_1MarketIndicatorsAnalyzer_1aced12b9d93e86d925c9259daeb0d65fc" compoundref="d4/d7b/market__indicators_8h" startline="291" endline="359">pyfolio::analytics::MarketIndicatorsAnalyzer::analyze_regime_indicators</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a570a25f1233fa82e4d5c237cca260e59" compoundref="d4/d73/returns_8h" startline="125" endline="142">pyfolio::performance::annualize_returns</referencedby>
        <referencedby refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a23872e94eff2db6230bdd21ab0793a12" compoundref="d6/dfe/bayesian_8h" startline="383" endline="437">pyfolio::analytics::BayesianAnalyzer::bayesian_var</referencedby>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1a9c6b1c2cee5eb1b6d0dd8298557b5f22" compoundref="d5/db2/analytics_2statistics_8h" startline="277" endline="283">pyfolio::Statistics::calculate_basic_stats</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aee9b783d9de6756d4fd9c98c86274b05" compoundref="d4/d73/returns_8h" startline="275" endline="296">pyfolio::performance::calculate_cagr</referencedby>
        <referencedby refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1af897e871af916ea97b6e63d64d016be8" compoundref="db/d26/capacity_8h" startline="315" endline="346">pyfolio::capacity::CapacityAnalyzer::calculate_capacity_decay</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1ac3157a75ae2536e6e77a7561917be03e" compoundref="df/d46/var_8h" startline="252" endline="302">pyfolio::risk::VaRCalculator::calculate_cornish_fisher_var</referencedby>
        <referencedby refid="d3/d3c/classpyfolio_1_1analytics_1_1MarketIndicatorsAnalyzer_1a48fd089e90d09096a868303d8223348d" compoundref="d4/d7b/market__indicators_8h" startline="244" endline="286">pyfolio::analytics::MarketIndicatorsAnalyzer::calculate_credit_spreads</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a0643c69995dcd3f223563def5f3efb99" compoundref="d4/d73/returns_8h" startline="102" endline="120">pyfolio::performance::calculate_cumulative_returns</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a485b4a7f1c9f3090402383fda316c8f6" compoundref="d8/de8/drawdown_8h" startline="28" endline="61">pyfolio::performance::calculate_drawdowns</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a5355f08aadc5dc96a9bc0443d70eb93b" compoundref="df/d46/var_8h" startline="144" endline="199">pyfolio::risk::VaRCalculator::calculate_historical_var</referencedby>
        <referencedby refid="d3/d3c/classpyfolio_1_1analytics_1_1MarketIndicatorsAnalyzer_1acaab80ec9422b4295fa59061cfba1f9e" compoundref="d4/d7b/market__indicators_8h" startline="364" endline="408">pyfolio::analytics::MarketIndicatorsAnalyzer::calculate_indicator_correlations</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a297d2eb32efafc48a09197a2cd0dd2ab" compoundref="df/d46/var_8h" startline="307" endline="363">pyfolio::risk::VaRCalculator::calculate_monte_carlo_var</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a1c475db5eee0c7ae9a7472688f7bb8fc" compoundref="df/d46/var_8h" startline="204" endline="247">pyfolio::risk::VaRCalculator::calculate_parametric_var</referencedby>
        <referencedby refid="dc/d21/namespacepyfolio_1_1analytics_1_1statistics_1a03d3ac2bfd1691d61e27da8e7d951c22" compoundref="d5/db2/analytics_2statistics_8h" startline="42" endline="104">pyfolio::analytics::statistics::calculate_summary</referencedby>
        <referencedby refid="d3/d3c/classpyfolio_1_1analytics_1_1MarketIndicatorsAnalyzer_1a360e26609fdcd35ddfb586b19864b435" compoundref="d4/d7b/market__indicators_8h" startline="161" endline="196">pyfolio::analytics::MarketIndicatorsAnalyzer::calculate_vix_regime</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a187ff948556631bd1ebbe0c3c87bdb76" compoundref="d4/d73/returns_8h" startline="202" endline="220">pyfolio::performance::calculate_volatility</referencedby>
        <referencedby refid="d3/d3c/classpyfolio_1_1analytics_1_1MarketIndicatorsAnalyzer_1a53249535e8c8f38e79c77105fb7e5728" compoundref="d4/d7b/market__indicators_8h" startline="201" endline="239">pyfolio::analytics::MarketIndicatorsAnalyzer::calculate_yield_curve_slope</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a9bb5c04c5c7d86d34a5867ebcbc2ec9c" compoundref="d7/d06/ratios_8h" startline="116" endline="159">pyfolio::performance::calmar_ratio</referencedby>
        <referencedby refid="d7/d68/namespacepyfolio_1_1reporting_1a958bce537a9c62b948257a4c6953425f" compoundref="d3/d66/tears_8h" startline="368" endline="422">pyfolio::reporting::create_simple_tear_sheet</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a16547ab9cbc2a80fb6ca5e8436688c0d" compoundref="d8/d51/time__series_8h" startline="515" endline="526">pyfolio::TimeSeries&lt; MarketIndicators &gt;::cumprod</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1aabcf1a46e463e3a482632eacb0265394" compoundref="d8/d51/time__series_8h" startline="499" endline="510">pyfolio::TimeSeries&lt; MarketIndicators &gt;::cumsum</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a5cae2e774b3eeab9c87e2e2a44ee532a" compoundref="d8/d51/time__series_8h" startline="855" endline="874">pyfolio::TimeSeries&lt; MarketIndicators &gt;::cumulative_returns</referencedby>
        <referencedby refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a20ed44cf22769cfb68ec394a8f95d47d" compoundref="d6/dfe/bayesian_8h" startline="300" endline="330">pyfolio::analytics::BayesianAnalyzer::detect_regimes</referencedby>
        <referencedby refid="d0/dfb/classpyfolio_1_1analytics_1_1RegimeDetector_1a064970a0664b36d4aaa708d9e749d628" compoundref="d2/dfc/regime__detection_8h" startline="228" endline="272">pyfolio::analytics::RegimeDetector::detect_regimes</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1ace0a88e334558363898722abd949922b" compoundref="d8/d51/time__series_8h" startline="1126" endline="1147">pyfolio::TimeSeries&lt; MarketIndicators &gt;::dot</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a95ab1789aea3818a1e9e07c746280c53" compoundref="d8/de8/drawdown_8h" startline="166" endline="200">pyfolio::performance::drawdown_duration</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a946c290d6f1a27558b1f7a4da4a6cf5c" compoundref="d8/d51/time__series_8h" startline="927" endline="1003">pyfolio::TimeSeries&lt; MarketIndicators &gt;::fill_missing</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1ae62f81fa57da6d511eea88d11e4128ae" compoundref="d8/de8/drawdown_8h" startline="205" endline="281">pyfolio::performance::find_drawdown_periods</referencedby>
        <referencedby refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a7eceaad081c1c0baebefd3ffa8762459" compoundref="d6/dfe/bayesian_8h" startline="335" endline="378">pyfolio::analytics::BayesianAnalyzer::forecast_returns</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a72a6639531f459b9963884e4d4ac571e" compoundref="d7/d06/ratios_8h" startline="164" endline="212">pyfolio::performance::information_ratio</referencedby>
        <referencedby refid="d0/dfb/classpyfolio_1_1analytics_1_1RegimeDetector_1a2233d9e06edde686d5b6620a2830130a" compoundref="d2/dfc/regime__detection_8h" startline="382" endline="478">pyfolio::analytics::RegimeDetector::markov_switching_detection</referencedby>
        <referencedby refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1ae12cd4f5a2e889c8d7ff4ac4ab513f5e" compoundref="d4/dc1/cached__performance__metrics_8h" startline="483" endline="516">pyfolio::analytics::CachedPerformanceCalculator::max_drawdown</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aff3558ae3dd3ed4381a805f730d47b53" compoundref="d8/de8/drawdown_8h" startline="86" endline="161">pyfolio::performance::max_drawdown_info</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1aad798a4da69bff9c8bb9d335eaba6ec6" compoundref="d8/d51/time__series_8h" startline="778" endline="797">pyfolio::TimeSeries&lt; MarketIndicators &gt;::mean</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a376eed0b5df19f13f64b76230fdf6718" compoundref="d7/d06/ratios_8h" startline="217" endline="251">pyfolio::performance::omega_ratio</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab9d28c69b57f3f05b5c70416989e727f" compoundref="d8/d51/time__series_8h" startline="1070" endline="1096">pyfolio::TimeSeries&lt; MarketIndicators &gt;::operator*</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1acb95f2faa1e3cfe36d2d6ead77b82873" compoundref="d8/d51/time__series_8h" startline="1101" endline="1121">pyfolio::TimeSeries&lt; MarketIndicators &gt;::operator*</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a825f0e34f5a5da409278b5bed99f52c1" compoundref="d8/d51/time__series_8h" startline="1010" endline="1035">pyfolio::TimeSeries&lt; MarketIndicators &gt;::operator+</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0045682c4ad12712fdb45eff3f707928" compoundref="d8/d51/time__series_8h" startline="1040" endline="1065">pyfolio::TimeSeries&lt; MarketIndicators &gt;::operator-</referencedby>
        <referencedby refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a92b8d67fd5072f6ff834101212b172fa" compoundref="d9/d36/parallel__algorithms_8h" startline="314" endline="384">pyfolio::parallel::ParallelAlgorithms::parallel_correlation</referencedby>
        <referencedby refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1af891348d5d6cc6b7f50308ef2e29201c" compoundref="d9/d36/parallel__algorithms_8h" startline="268" endline="281">pyfolio::parallel::ParallelAlgorithms::parallel_mean</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1aa62c243abee449a12d03b6039807bc5d" compoundref="d8/d51/time__series_8h" startline="368" endline="392">pyfolio::TimeSeries&lt; MarketIndicators &gt;::resample</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aa8dd6ffc556adc3f76dc32645ec6b57c" compoundref="d7/d06/ratios_8h" startline="15" endline="57">pyfolio::performance::sharpe_ratio</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a1fb9b999f09567e14ffdb202f4047b6a" compoundref="d8/d51/time__series_8h" startline="436" endline="468">pyfolio::TimeSeries&lt; MarketIndicators &gt;::shift</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a6aef72caa37febb0f72b802ef26d15dd" compoundref="d8/d51/time__series_8h" startline="226" endline="243">pyfolio::TimeSeries&lt; MarketIndicators &gt;::sort_by_time</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a2b9a9772352ff85db5af94511638114f" compoundref="d7/d06/ratios_8h" startline="62" endline="111">pyfolio::performance::sortino_ratio</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82439ade72c213e3ffd477dd6a2058e5" compoundref="d8/d51/time__series_8h" startline="802" endline="824">pyfolio::TimeSeries&lt; MarketIndicators &gt;::std</referencedby>
        <referencedby refid="d0/dfb/classpyfolio_1_1analytics_1_1RegimeDetector_1a774beb5ef6d09f2a32210cda918d25e7" compoundref="d2/dfc/regime__detection_8h" startline="491" endline="574">pyfolio::analytics::RegimeDetector::structural_break_detection</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a6bc9f0c706b2d89a0eb6c539eddef077" compoundref="d4/d73/returns_8h" startline="259" endline="270">pyfolio::performance::total_return</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1ae0eb073ae0b6cba1b6f6ed684179da8c" compoundref="d7/d06/ratios_8h" startline="256" endline="325">pyfolio::performance::treynor_ratio</referencedby>
        <referencedby refid="d5/d2b/namespacepyfolio_1_1utils_1a370230a288b281c76873fb0472d69841" compoundref="db/d38/validation_8h" startline="22" endline="34">pyfolio::utils::validate_prices</referencedby>
        <referencedby refid="d5/dc0/namespacepyfolio_1_1io_1_1validation_1abcc020a32adbc5f5cf4f5497992bd947" compoundref="d2/db9/data__loader_8h" startline="488" endline="493">pyfolio::io::validation::validate_returns</referencedby>
        <referencedby refid="d5/d2b/namespacepyfolio_1_1utils_1afea61375d6757436d1f01bed259c58a3" compoundref="db/d38/validation_8h" startline="11" endline="17">pyfolio::utils::validate_returns</referencedby>
        <referencedby refid="d0/dfb/classpyfolio_1_1analytics_1_1RegimeDetector_1ab8f25fc631e3be5209e6375a9777d9d5" compoundref="d2/dfc/regime__detection_8h" startline="579" endline="647">pyfolio::analytics::RegimeDetector::volatility_regime_detection</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a0299648a8469a9a82dfa15f9f035a704" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::TimeSeries&lt; T &gt;::reserve</definition>
        <argsstring>(size_type n)</argsstring>
        <name>reserve</name>
        <qualifiedname>pyfolio::TimeSeries::reserve</qualifiedname>
        <param>
          <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1ad0095a701f16fea4226b12cb4db01b48" kindref="member">size_type</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="104" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1ab474b0dcb39ddecd2f399fe527b27a27" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; pyfolio::TimeSeries&lt; T &gt;::operator[]</definition>
        <argsstring>(size_type index) const noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>pyfolio::TimeSeries::operator[]</qualifiedname>
        <param>
          <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1ad0095a701f16fea4226b12cb4db01b48" kindref="member">size_type</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="110" column="23" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a9c7be369ce119442e4cbed8ab29eedd9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; pyfolio::TimeSeries&lt; T &gt;::operator[]</definition>
        <argsstring>(size_type index) noexcept</argsstring>
        <name>operator[]</name>
        <qualifiedname>pyfolio::TimeSeries::operator[]</qualifiedname>
        <param>
          <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1ad0095a701f16fea4226b12cb4db01b48" kindref="member">size_type</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="111" column="17" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a6c04137ff6f6c3447bb29eac26ecebdf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; pyfolio::TimeSeries&lt; T &gt;::at</definition>
        <argsstring>(size_type index) const</argsstring>
        <name>at</name>
        <qualifiedname>pyfolio::TimeSeries::at</qualifiedname>
        <param>
          <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1ad0095a701f16fea4226b12cb4db01b48" kindref="member">size_type</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="113" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1ab16213192b396ac9ff616393b3842fe5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; pyfolio::TimeSeries&lt; T &gt;::at</definition>
        <argsstring>(size_type index)</argsstring>
        <name>at</name>
        <qualifiedname>pyfolio::TimeSeries::at</qualifiedname>
        <param>
          <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1ad0095a701f16fea4226b12cb4db01b48" kindref="member">size_type</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="114" column="7" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1af71d2714bd7245ee0f6f272d2019ec3e" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; pyfolio::TimeSeries&lt; T &gt;::front</definition>
        <argsstring>() const noexcept</argsstring>
        <name>front</name>
        <qualifiedname>pyfolio::TimeSeries::front</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="116" column="23" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1aaa58702b82df2d7ede504e7d97f66f7a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; pyfolio::TimeSeries&lt; T &gt;::front</definition>
        <argsstring>() noexcept</argsstring>
        <name>front</name>
        <qualifiedname>pyfolio::TimeSeries::front</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="117" column="17" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a4e8f9787b69fe091f49359f84b7696c5" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; pyfolio::TimeSeries&lt; T &gt;::back</definition>
        <argsstring>() const noexcept</argsstring>
        <name>back</name>
        <qualifiedname>pyfolio::TimeSeries::back</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="119" column="23" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="119" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a8c44d7d3a10364910d34b32453c1e73a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; pyfolio::TimeSeries&lt; T &gt;::back</definition>
        <argsstring>() noexcept</argsstring>
        <name>back</name>
        <qualifiedname>pyfolio::TimeSeries::back</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="120" column="17" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a119004323be19c9490f882830f2e8de5" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> &amp;</type>
        <definition>const DateTime &amp; pyfolio::TimeSeries&lt; T &gt;::timestamp</definition>
        <argsstring>(size_type index) const</argsstring>
        <name>timestamp</name>
        <qualifiedname>pyfolio::TimeSeries::timestamp</qualifiedname>
        <param>
          <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1ad0095a701f16fea4226b12cb4db01b48" kindref="member">size_type</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="123" column="30" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="123" bodyend="123"/>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aa845ba07f3b5467f5cac8d9fc83e2368" compoundref="d4/d73/returns_8h" startline="49" endline="78">pyfolio::performance::calculate_log_returns</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aba556ae09a3dbbdad98c878c5b84be4a" compoundref="d4/d73/returns_8h" startline="15" endline="44">pyfolio::performance::calculate_returns</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1ae62f81fa57da6d511eea88d11e4128ae" compoundref="d8/de8/drawdown_8h" startline="205" endline="281">pyfolio::performance::find_drawdown_periods</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aff3558ae3dd3ed4381a805f730d47b53" compoundref="d8/de8/drawdown_8h" startline="86" endline="161">pyfolio::performance::max_drawdown_info</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a07f089ab270bd9a2daf14c4802966942" compoundref="d8/de8/drawdown_8h" startline="319" endline="354">pyfolio::performance::rolling_max_drawdown</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a65aa70a47c152e3dbb1e73ea2dd1f0c4" compoundref="d7/d06/ratios_8h" startline="330" endline="368">pyfolio::performance::rolling_sharpe_ratio</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a8a0797d8f8603e3757181fb825c960b8" compoundref="d4/d73/returns_8h" startline="225" endline="254">pyfolio::performance::rolling_volatility</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a0374bbc62bd808749ac476b3af4b0ead" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; DateTime &gt; &amp; pyfolio::TimeSeries&lt; T &gt;::timestamps</definition>
        <argsstring>() const noexcept</argsstring>
        <name>timestamps</name>
        <qualifiedname>pyfolio::TimeSeries::timestamps</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="124" column="33" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="124" bodyend="124"/>
        <referencedby refid="dc/d21/namespacepyfolio_1_1analytics_1_1statistics_1a889089f7fd60c14f22940dd7cc955c3c" compoundref="d5/db2/analytics_2statistics_8h" startline="242" endline="263">pyfolio::analytics::statistics::align_series</referencedby>
        <referencedby refid="dd/d26/classpyfolio_1_1analytics_1_1PerformanceAnalysisSuite_1a2a89a113f35927f33af40fa23ed44a70" compoundref="df/de7/performance__analysis__suite_8h" startline="255" endline="403">pyfolio::analytics::PerformanceAnalysisSuite::analyze_performance</referencedby>
        <referencedby refid="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite_1a7c39e9da13b225d9186ed324da6514d5" compoundref="dd/d71/parallel__performance__suite_8h" startline="158" endline="334">pyfolio::analytics::ParallelPerformanceAnalysisSuite::analyze_performance_parallel</referencedby>
        <referencedby refid="d3/d3c/classpyfolio_1_1analytics_1_1MarketIndicatorsAnalyzer_1aced12b9d93e86d925c9259daeb0d65fc" compoundref="d4/d7b/market__indicators_8h" startline="291" endline="359">pyfolio::analytics::MarketIndicatorsAnalyzer::analyze_regime_indicators</referencedby>
        <referencedby refid="df/da3/namespacepyfolio_1_1visualization_1_1utils_1aa8c1ebb6ad8ad64f26aa632ba12bf499" compoundref="d3/df8/plotting_8h" startline="236" endline="263">pyfolio::visualization::utils::calculate_annual_returns</referencedby>
        <referencedby refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1af897e871af916ea97b6e63d64d016be8" compoundref="db/d26/capacity_8h" startline="315" endline="346">pyfolio::capacity::CapacityAnalyzer::calculate_capacity_decay</referencedby>
        <referencedby refid="d3/d3c/classpyfolio_1_1analytics_1_1MarketIndicatorsAnalyzer_1a48fd089e90d09096a868303d8223348d" compoundref="d4/d7b/market__indicators_8h" startline="244" endline="286">pyfolio::analytics::MarketIndicatorsAnalyzer::calculate_credit_spreads</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a0643c69995dcd3f223563def5f3efb99" compoundref="d4/d73/returns_8h" startline="102" endline="120">pyfolio::performance::calculate_cumulative_returns</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a0b36bd99af8d88af1dc5578ef684c6e8" compoundref="d4/d73/returns_8h" startline="83" endline="97">pyfolio::performance::calculate_excess_returns</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a280b239f05564bffadd2ab759aa7b668" compoundref="d3/d7e/rolling__metrics_8h" startline="140" endline="196">pyfolio::performance::calculate_rolling_beta</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aa7d52fa28e4c97c9de78af729f8cc761" compoundref="d3/d7e/rolling__metrics_8h" startline="207" endline="255">pyfolio::performance::calculate_rolling_correlation</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a2429f7c5cdda810bc8008f0ea6b567cd" compoundref="d3/d7e/rolling__metrics_8h" startline="398" endline="440">pyfolio::performance::calculate_rolling_downside_deviation</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a5651391142d782fdb6931399027d0c98" compoundref="d3/d7e/rolling__metrics_8h" startline="265" endline="310">pyfolio::performance::calculate_rolling_max_drawdown</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a77cf1b59bc8f7770d2f1e7df6df96c86" compoundref="d3/d7e/rolling__metrics_8h" startline="76" endline="127">pyfolio::performance::calculate_rolling_sharpe</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a4e5a00565b6f3da166dbcb1a57b53fec" compoundref="d3/d7e/rolling__metrics_8h" startline="322" endline="386">pyfolio::performance::calculate_rolling_sortino</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a048c0615bdec480c0e1574fe8c7c1129" compoundref="d3/d7e/rolling__metrics_8h" startline="25" endline="64">pyfolio::performance::calculate_rolling_volatility</referencedby>
        <referencedby refid="d3/d3c/classpyfolio_1_1analytics_1_1MarketIndicatorsAnalyzer_1a360e26609fdcd35ddfb586b19864b435" compoundref="d4/d7b/market__indicators_8h" startline="161" endline="196">pyfolio::analytics::MarketIndicatorsAnalyzer::calculate_vix_regime</referencedby>
        <referencedby refid="d3/d3c/classpyfolio_1_1analytics_1_1MarketIndicatorsAnalyzer_1a53249535e8c8f38e79c77105fb7e5728" compoundref="d4/d7b/market__indicators_8h" startline="201" endline="239">pyfolio::analytics::MarketIndicatorsAnalyzer::calculate_yield_curve_slope</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aea9501b23c640378f687a97c51874232" compoundref="d4/d73/returns_8h" startline="301" endline="311">pyfolio::performance::convert_returns</referencedby>
        <referencedby refid="d0/dfb/classpyfolio_1_1analytics_1_1RegimeDetector_1a064970a0664b36d4aaa708d9e749d628" compoundref="d2/dfc/regime__detection_8h" startline="228" endline="272">pyfolio::analytics::RegimeDetector::detect_regimes</referencedby>
        <referencedby refid="d7/d98/classpyfolio_1_1PerformanceMetrics_1ac8fe98c7b6ddff19757e5d534aa15844" compoundref="de/d88/performance__metrics_8h" startline="286" endline="291">pyfolio::PerformanceMetrics::drawdown_series</referencedby>
        <referencedby refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a7eceaad081c1c0baebefd3ffa8762459" compoundref="d6/dfe/bayesian_8h" startline="335" endline="378">pyfolio::analytics::BayesianAnalyzer::forecast_returns</referencedby>
        <referencedby refid="d0/dfb/classpyfolio_1_1analytics_1_1RegimeDetector_1a2233d9e06edde686d5b6620a2830130a" compoundref="d2/dfc/regime__detection_8h" startline="382" endline="478">pyfolio::analytics::RegimeDetector::markov_switching_detection</referencedby>
        <referencedby refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a108b4651f0cd7b9335eb935f57b67ad3" compoundref="d9/d36/parallel__algorithms_8h" startline="390" endline="451">pyfolio::parallel::ParallelAlgorithms::parallel_rolling_operation</referencedby>
        <referencedby refid="d8/ddb/namespacepyfolio_1_1io_1ac5936d5d5b52389eca310e60b1e799b1" compoundref="d2/db9/data__loader_8h" startline="274" endline="298">pyfolio::io::save_returns_to_csv</referencedby>
        <referencedby refid="db/db8/classpyfolio_1_1web_1_1JsonSerializer_1a7adc5b913cadb3d0cc93d5ad7b2b93fd" compoundref="d4/d45/json__serializer_8h" startline="41" endline="56">pyfolio::web::JsonSerializer::serialize_time_series</referencedby>
        <referencedby refid="d0/dfb/classpyfolio_1_1analytics_1_1RegimeDetector_1a774beb5ef6d09f2a32210cda918d25e7" compoundref="d2/dfc/regime__detection_8h" startline="491" endline="574">pyfolio::analytics::RegimeDetector::structural_break_detection</referencedby>
        <referencedby refid="df/da3/namespacepyfolio_1_1visualization_1_1utils_1addf5f76ba7cac9175e083d48d7bce498" compoundref="d3/df8/plotting_8h" startline="213" endline="221">pyfolio::visualization::utils::timeseries_to_plotdata</referencedby>
        <referencedby refid="d0/dfb/classpyfolio_1_1analytics_1_1RegimeDetector_1ab8f25fc631e3be5209e6375a9777d9d5" compoundref="d2/dfc/regime__detection_8h" startline="579" endline="647">pyfolio::analytics::RegimeDetector::volatility_regime_detection</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const std::vector&lt; T &gt; &amp;</type>
        <definition>const std::vector&lt; T &gt; &amp; pyfolio::TimeSeries&lt; T &gt;::values</definition>
        <argsstring>() const noexcept</argsstring>
        <name>values</name>
        <qualifiedname>pyfolio::TimeSeries::values</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="125" column="33" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="125" bodyend="125"/>
        <referencedby refid="dc/d21/namespacepyfolio_1_1analytics_1_1statistics_1a889089f7fd60c14f22940dd7cc955c3c" compoundref="d5/db2/analytics_2statistics_8h" startline="242" endline="263">pyfolio::analytics::statistics::align_series</referencedby>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1af30bc2537515dd9bf004768149ace4a4" compoundref="d5/db2/analytics_2statistics_8h" startline="478" endline="518">pyfolio::Statistics::alpha_beta</referencedby>
        <referencedby refid="dc/d21/namespacepyfolio_1_1analytics_1_1statistics_1a50482d1bd36f2cb5c64daa034eeabbe3" compoundref="d5/db2/analytics_2statistics_8h" startline="123" endline="169">pyfolio::analytics::statistics::analyze_distribution</referencedby>
        <referencedby refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a0b79ac7ee0ea18fbb4280bdd518040f4" compoundref="d6/dfe/bayesian_8h" startline="228" endline="295">pyfolio::analytics::BayesianAnalyzer::analyze_performance</referencedby>
        <referencedby refid="dd/d26/classpyfolio_1_1analytics_1_1PerformanceAnalysisSuite_1a2a89a113f35927f33af40fa23ed44a70" compoundref="df/de7/performance__analysis__suite_8h" startline="255" endline="403">pyfolio::analytics::PerformanceAnalysisSuite::analyze_performance</referencedby>
        <referencedby refid="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite_1a7c39e9da13b225d9186ed324da6514d5" compoundref="dd/d71/parallel__performance__suite_8h" startline="158" endline="334">pyfolio::analytics::ParallelPerformanceAnalysisSuite::analyze_performance_parallel</referencedby>
        <referencedby refid="d3/d3c/classpyfolio_1_1analytics_1_1MarketIndicatorsAnalyzer_1aced12b9d93e86d925c9259daeb0d65fc" compoundref="d4/d7b/market__indicators_8h" startline="291" endline="359">pyfolio::analytics::MarketIndicatorsAnalyzer::analyze_regime_indicators</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a570a25f1233fa82e4d5c237cca260e59" compoundref="d4/d73/returns_8h" startline="125" endline="142">pyfolio::performance::annualize_returns</referencedby>
        <referencedby refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a23872e94eff2db6230bdd21ab0793a12" compoundref="d6/dfe/bayesian_8h" startline="383" endline="437">pyfolio::analytics::BayesianAnalyzer::bayesian_var</referencedby>
        <referencedby refid="d9/dc2/classpyfolio_1_1attribution_1_1AlphaBetaAnalysis_1aa1a010f21d746f4b5ca020320a4ad529" compoundref="da/dd4/attribution_8h" startline="417" endline="484">pyfolio::attribution::AlphaBetaAnalysis::calculate</referencedby>
        <referencedby refid="df/da3/namespacepyfolio_1_1visualization_1_1utils_1aa8c1ebb6ad8ad64f26aa632ba12bf499" compoundref="d3/df8/plotting_8h" startline="236" endline="263">pyfolio::visualization::utils::calculate_annual_returns</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1ac3157a75ae2536e6e77a7561917be03e" compoundref="df/d46/var_8h" startline="252" endline="302">pyfolio::risk::VaRCalculator::calculate_cornish_fisher_var</referencedby>
        <referencedby refid="d3/d3c/classpyfolio_1_1analytics_1_1MarketIndicatorsAnalyzer_1a48fd089e90d09096a868303d8223348d" compoundref="d4/d7b/market__indicators_8h" startline="244" endline="286">pyfolio::analytics::MarketIndicatorsAnalyzer::calculate_credit_spreads</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a5355f08aadc5dc96a9bc0443d70eb93b" compoundref="df/d46/var_8h" startline="144" endline="199">pyfolio::risk::VaRCalculator::calculate_historical_var</referencedby>
        <referencedby refid="d3/d3c/classpyfolio_1_1analytics_1_1MarketIndicatorsAnalyzer_1acaab80ec9422b4295fa59061cfba1f9e" compoundref="d4/d7b/market__indicators_8h" startline="364" endline="408">pyfolio::analytics::MarketIndicatorsAnalyzer::calculate_indicator_correlations</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a297d2eb32efafc48a09197a2cd0dd2ab" compoundref="df/d46/var_8h" startline="307" endline="363">pyfolio::risk::VaRCalculator::calculate_monte_carlo_var</referencedby>
        <referencedby refid="da/da9/classpyfolio_1_1risk_1_1VaRCalculator_1a1c475db5eee0c7ae9a7472688f7bb8fc" compoundref="df/d46/var_8h" startline="204" endline="247">pyfolio::risk::VaRCalculator::calculate_parametric_var</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a280b239f05564bffadd2ab759aa7b668" compoundref="d3/d7e/rolling__metrics_8h" startline="140" endline="196">pyfolio::performance::calculate_rolling_beta</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aa7d52fa28e4c97c9de78af729f8cc761" compoundref="d3/d7e/rolling__metrics_8h" startline="207" endline="255">pyfolio::performance::calculate_rolling_correlation</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a2429f7c5cdda810bc8008f0ea6b567cd" compoundref="d3/d7e/rolling__metrics_8h" startline="398" endline="440">pyfolio::performance::calculate_rolling_downside_deviation</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a5651391142d782fdb6931399027d0c98" compoundref="d3/d7e/rolling__metrics_8h" startline="265" endline="310">pyfolio::performance::calculate_rolling_max_drawdown</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a77cf1b59bc8f7770d2f1e7df6df96c86" compoundref="d3/d7e/rolling__metrics_8h" startline="76" endline="127">pyfolio::performance::calculate_rolling_sharpe</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a4e5a00565b6f3da166dbcb1a57b53fec" compoundref="d3/d7e/rolling__metrics_8h" startline="322" endline="386">pyfolio::performance::calculate_rolling_sortino</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a048c0615bdec480c0e1574fe8c7c1129" compoundref="d3/d7e/rolling__metrics_8h" startline="25" endline="64">pyfolio::performance::calculate_rolling_volatility</referencedby>
        <referencedby refid="dc/d21/namespacepyfolio_1_1analytics_1_1statistics_1a03d3ac2bfd1691d61e27da8e7d951c22" compoundref="d5/db2/analytics_2statistics_8h" startline="42" endline="104">pyfolio::analytics::statistics::calculate_summary</referencedby>
        <referencedby refid="d3/d3c/classpyfolio_1_1analytics_1_1MarketIndicatorsAnalyzer_1a360e26609fdcd35ddfb586b19864b435" compoundref="d4/d7b/market__indicators_8h" startline="161" endline="196">pyfolio::analytics::MarketIndicatorsAnalyzer::calculate_vix_regime</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a187ff948556631bd1ebbe0c3c87bdb76" compoundref="d4/d73/returns_8h" startline="202" endline="220">pyfolio::performance::calculate_volatility</referencedby>
        <referencedby refid="d3/d3c/classpyfolio_1_1analytics_1_1MarketIndicatorsAnalyzer_1a53249535e8c8f38e79c77105fb7e5728" compoundref="d4/d7b/market__indicators_8h" startline="201" endline="239">pyfolio::analytics::MarketIndicatorsAnalyzer::calculate_yield_curve_slope</referencedby>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1a9aa2d1314ebd348e3cabf7c294d4b6a3" compoundref="d5/db2/analytics_2statistics_8h" startline="621" endline="626">pyfolio::Statistics::conditional_value_at_risk</referencedby>
        <referencedby refid="d7/d68/namespacepyfolio_1_1reporting_1a958bce537a9c62b948257a4c6953425f" compoundref="d3/d66/tears_8h" startline="368" endline="422">pyfolio::reporting::create_simple_tear_sheet</referencedby>
        <referencedby refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a20ed44cf22769cfb68ec394a8f95d47d" compoundref="d6/dfe/bayesian_8h" startline="300" endline="330">pyfolio::analytics::BayesianAnalyzer::detect_regimes</referencedby>
        <referencedby refid="d0/dfb/classpyfolio_1_1analytics_1_1RegimeDetector_1a064970a0664b36d4aaa708d9e749d628" compoundref="d2/dfc/regime__detection_8h" startline="228" endline="272">pyfolio::analytics::RegimeDetector::detect_regimes</referencedby>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1af281becf792a699a5d4fff96339b89e3" compoundref="d5/db2/analytics_2statistics_8h" startline="455" endline="474">pyfolio::Statistics::downside_deviation</referencedby>
        <referencedby refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer_1a7eceaad081c1c0baebefd3ffa8762459" compoundref="d6/dfe/bayesian_8h" startline="335" endline="378">pyfolio::analytics::BayesianAnalyzer::forecast_returns</referencedby>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1a0fd32c54eb1fea5a675633d5f85b7fc0" compoundref="d5/db2/analytics_2statistics_8h" startline="522" endline="561">pyfolio::Statistics::information_ratio</referencedby>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1a2984e04c4fd9c5c0686ebc586e8499b5" compoundref="d5/db2/analytics_2statistics_8h" startline="607" endline="610">pyfolio::Statistics::kurtosis</referencedby>
        <referencedby refid="d0/dfb/classpyfolio_1_1analytics_1_1RegimeDetector_1a2233d9e06edde686d5b6620a2830130a" compoundref="d2/dfc/regime__detection_8h" startline="382" endline="478">pyfolio::analytics::RegimeDetector::markov_switching_detection</referencedby>
        <referencedby refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a92b8d67fd5072f6ff834101212b172fa" compoundref="d9/d36/parallel__algorithms_8h" startline="314" endline="384">pyfolio::parallel::ParallelAlgorithms::parallel_correlation</referencedby>
        <referencedby refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1af891348d5d6cc6b7f50308ef2e29201c" compoundref="d9/d36/parallel__algorithms_8h" startline="268" endline="281">pyfolio::parallel::ParallelAlgorithms::parallel_mean</referencedby>
        <referencedby refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a108b4651f0cd7b9335eb935f57b67ad3" compoundref="d9/d36/parallel__algorithms_8h" startline="390" endline="451">pyfolio::parallel::ParallelAlgorithms::parallel_rolling_operation</referencedby>
        <referencedby refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1ad92d62a79d4044197fdf6532ea08eb8f" compoundref="d9/d36/parallel__algorithms_8h" startline="287" endline="308">pyfolio::parallel::ParallelAlgorithms::parallel_std_deviation</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a8a0797d8f8603e3757181fb825c960b8" compoundref="d4/d73/returns_8h" startline="225" endline="254">pyfolio::performance::rolling_volatility</referencedby>
        <referencedby refid="d8/ddb/namespacepyfolio_1_1io_1ac5936d5d5b52389eca310e60b1e799b1" compoundref="d2/db9/data__loader_8h" startline="274" endline="298">pyfolio::io::save_returns_to_csv</referencedby>
        <referencedby refid="db/db8/classpyfolio_1_1web_1_1JsonSerializer_1a7adc5b913cadb3d0cc93d5ad7b2b93fd" compoundref="d4/d45/json__serializer_8h" startline="41" endline="56">pyfolio::web::JsonSerializer::serialize_time_series</referencedby>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1ad472ba19872dc8bba0dbe864dc65d0f9" compoundref="d5/db2/analytics_2statistics_8h" startline="601" endline="604">pyfolio::Statistics::skewness</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a2b9a9772352ff85db5af94511638114f" compoundref="d7/d06/ratios_8h" startline="62" endline="111">pyfolio::performance::sortino_ratio</referencedby>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1ae3abd35508b1c2c76a918a8d58338e41" compoundref="d5/db2/analytics_2statistics_8h" startline="309" endline="342">pyfolio::Statistics::sortino_ratio</referencedby>
        <referencedby refid="d0/dfb/classpyfolio_1_1analytics_1_1RegimeDetector_1a774beb5ef6d09f2a32210cda918d25e7" compoundref="d2/dfc/regime__detection_8h" startline="491" endline="574">pyfolio::analytics::RegimeDetector::structural_break_detection</referencedby>
        <referencedby refid="df/da3/namespacepyfolio_1_1visualization_1_1utils_1addf5f76ba7cac9175e083d48d7bce498" compoundref="d3/df8/plotting_8h" startline="213" endline="221">pyfolio::visualization::utils::timeseries_to_plotdata</referencedby>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1a2e0bb5b9b5052088b4ec146150811489" compoundref="d5/db2/analytics_2statistics_8h" startline="564" endline="598">pyfolio::Statistics::tracking_error</referencedby>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1a9ede57ac57b34082eaf024beabbc5304" compoundref="d5/db2/analytics_2statistics_8h" startline="613" endline="618">pyfolio::Statistics::value_at_risk_historical</referencedby>
        <referencedby refid="d0/dfb/classpyfolio_1_1analytics_1_1RegimeDetector_1ab8f25fc631e3be5209e6375a9777d9d5" compoundref="d2/dfc/regime__detection_8h" startline="579" endline="647">pyfolio::analytics::RegimeDetector::volatility_regime_detection</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a3828248027c39f8e340c86ad847d9ea9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1aded88af78b3a73f0a49ba1282d43bb69" kindref="member">iterator</ref></type>
        <definition>iterator pyfolio::TimeSeries&lt; T &gt;::begin</definition>
        <argsstring>() noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>pyfolio::TimeSeries::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="128" column="24" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1aec28afca44df95cc6d38e13f106b66e0" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1a75370c5ba8ebf59087e51110a045c62b" kindref="member">const_iterator</ref></type>
        <definition>const_iterator pyfolio::TimeSeries&lt; T &gt;::begin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>begin</name>
        <qualifiedname>pyfolio::TimeSeries::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="129" column="30" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a092c340c53684c40636f142c14817cbd" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1a75370c5ba8ebf59087e51110a045c62b" kindref="member">const_iterator</ref></type>
        <definition>const_iterator pyfolio::TimeSeries&lt; T &gt;::cbegin</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cbegin</name>
        <qualifiedname>pyfolio::TimeSeries::cbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="130" column="30" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a39fb49cf0a9c6742658b503c1f8e04e2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1aded88af78b3a73f0a49ba1282d43bb69" kindref="member">iterator</ref></type>
        <definition>iterator pyfolio::TimeSeries&lt; T &gt;::end</definition>
        <argsstring>() noexcept</argsstring>
        <name>end</name>
        <qualifiedname>pyfolio::TimeSeries::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="132" column="24" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="132" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1accc09eb2e5ac90c575e206eac1bb78a6" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1a75370c5ba8ebf59087e51110a045c62b" kindref="member">const_iterator</ref></type>
        <definition>const_iterator pyfolio::TimeSeries&lt; T &gt;::end</definition>
        <argsstring>() const noexcept</argsstring>
        <name>end</name>
        <qualifiedname>pyfolio::TimeSeries::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="133" column="30" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a9e4e60cfa0a78036c05f92214dd7a955" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1a75370c5ba8ebf59087e51110a045c62b" kindref="member">const_iterator</ref></type>
        <definition>const_iterator pyfolio::TimeSeries&lt; T &gt;::cend</definition>
        <argsstring>() const noexcept</argsstring>
        <name>cend</name>
        <qualifiedname>pyfolio::TimeSeries::cend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="134" column="30" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="134" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a14dc0c14e60203348e7a7a474f086a49" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; pyfolio::TimeSeries&lt; T &gt;::name</definition>
        <argsstring>() const noexcept</argsstring>
        <name>name</name>
        <qualifiedname>pyfolio::TimeSeries::name</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="137" column="33" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="137" bodyend="137"/>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1acabfd3a56cd8250c87a2f50b76d4ed4b" compoundref="d4/d73/returns_8h" startline="147" endline="170">pyfolio::performance::aggregate_returns</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a0643c69995dcd3f223563def5f3efb99" compoundref="d4/d73/returns_8h" startline="102" endline="120">pyfolio::performance::calculate_cumulative_returns</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a485b4a7f1c9f3090402383fda316c8f6" compoundref="d8/de8/drawdown_8h" startline="28" endline="61">pyfolio::performance::calculate_drawdowns</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a0b36bd99af8d88af1dc5578ef684c6e8" compoundref="d4/d73/returns_8h" startline="83" endline="97">pyfolio::performance::calculate_excess_returns</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aa845ba07f3b5467f5cac8d9fc83e2368" compoundref="d4/d73/returns_8h" startline="49" endline="78">pyfolio::performance::calculate_log_returns</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aba556ae09a3dbbdad98c878c5b84be4a" compoundref="d4/d73/returns_8h" startline="15" endline="44">pyfolio::performance::calculate_returns</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aea9501b23c640378f687a97c51874232" compoundref="d4/d73/returns_8h" startline="301" endline="311">pyfolio::performance::convert_returns</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a95ab1789aea3818a1e9e07c746280c53" compoundref="d8/de8/drawdown_8h" startline="166" endline="200">pyfolio::performance::drawdown_duration</referencedby>
        <referencedby refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a108b4651f0cd7b9335eb935f57b67ad3" compoundref="d9/d36/parallel__algorithms_8h" startline="390" endline="451">pyfolio::parallel::ParallelAlgorithms::parallel_rolling_operation</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a07f089ab270bd9a2daf14c4802966942" compoundref="d8/de8/drawdown_8h" startline="319" endline="354">pyfolio::performance::rolling_max_drawdown</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a5e53c9105f237045953172393a34c5c2" compoundref="d4/d73/returns_8h" startline="175" endline="197">pyfolio::performance::rolling_returns</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a65aa70a47c152e3dbb1e73ea2dd1f0c4" compoundref="d7/d06/ratios_8h" startline="330" endline="368">pyfolio::performance::rolling_sharpe_ratio</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a8a0797d8f8603e3757181fb825c960b8" compoundref="d4/d73/returns_8h" startline="225" endline="254">pyfolio::performance::rolling_volatility</referencedby>
        <referencedby refid="db/db8/classpyfolio_1_1web_1_1JsonSerializer_1a7adc5b913cadb3d0cc93d5ad7b2b93fd" compoundref="d4/d45/json__serializer_8h" startline="41" endline="56">pyfolio::web::JsonSerializer::serialize_time_series</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a429262cd96d2ba45e96bfb6302cb581e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::TimeSeries&lt; T &gt;::set_name</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>set_name</name>
        <qualifiedname>pyfolio::TimeSeries::set_name</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="138" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a165f6a4758d61017bdcfb78f2457ba24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::TimeSeries&lt; T &gt;::push_back</definition>
        <argsstring>(const DateTime &amp;timestamp, const T &amp;value)</argsstring>
        <name>push_back</name>
        <qualifiedname>pyfolio::TimeSeries::push_back</qualifiedname>
        <param>
          <type>const <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> &amp;</type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Add a data point. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="143" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="143" bodyend="146"/>
        <referencedby refid="dc/d21/namespacepyfolio_1_1analytics_1_1statistics_1a889089f7fd60c14f22940dd7cc955c3c" compoundref="d5/db2/analytics_2statistics_8h" startline="242" endline="263">pyfolio::analytics::statistics::align_series</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a280b239f05564bffadd2ab759aa7b668" compoundref="d3/d7e/rolling__metrics_8h" startline="140" endline="196">pyfolio::performance::calculate_rolling_beta</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1aa7d52fa28e4c97c9de78af729f8cc761" compoundref="d3/d7e/rolling__metrics_8h" startline="207" endline="255">pyfolio::performance::calculate_rolling_correlation</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a2429f7c5cdda810bc8008f0ea6b567cd" compoundref="d3/d7e/rolling__metrics_8h" startline="398" endline="440">pyfolio::performance::calculate_rolling_downside_deviation</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a5651391142d782fdb6931399027d0c98" compoundref="d3/d7e/rolling__metrics_8h" startline="265" endline="310">pyfolio::performance::calculate_rolling_max_drawdown</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a77cf1b59bc8f7770d2f1e7df6df96c86" compoundref="d3/d7e/rolling__metrics_8h" startline="76" endline="127">pyfolio::performance::calculate_rolling_sharpe</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a4e5a00565b6f3da166dbcb1a57b53fec" compoundref="d3/d7e/rolling__metrics_8h" startline="322" endline="386">pyfolio::performance::calculate_rolling_sortino</referencedby>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a048c0615bdec480c0e1574fe8c7c1129" compoundref="d3/d7e/rolling__metrics_8h" startline="25" endline="64">pyfolio::performance::calculate_rolling_volatility</referencedby>
        <referencedby refid="db/d43/namespacepyfolio_1_1io_1_1sample__data_1ab2b9f93e4bdf502964ca4c30adf8354d" compoundref="d2/db9/data__loader_8h" startline="437" endline="446">pyfolio::io::sample_data::generate_random_returns</referencedby>
        <referencedby refid="d8/ddb/namespacepyfolio_1_1io_1ab23fad32cbb2df97533bd91e60e98b0a" compoundref="d2/db9/data__loader_8h" startline="360" endline="403">pyfolio::io::load_returns_from_csv</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a2633632ebe894962ce2863adbf2a7b55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::TimeSeries&lt; T &gt;::emplace_back</definition>
        <argsstring>(const DateTime &amp;timestamp, T &amp;&amp;value)</argsstring>
        <name>emplace_back</name>
        <qualifiedname>pyfolio::TimeSeries::emplace_back</qualifiedname>
        <param>
          <type>const <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> &amp;</type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="148" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="148" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1aa0d2f984a31a4e1aa0c38955db2b3930" prot="public" static="no" nodiscard="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; void &gt;</type>
        <definition>Result&lt; void &gt; pyfolio::TimeSeries&lt; T &gt;::try_push_back</definition>
        <argsstring>(const DateTime &amp;timestamp, const T &amp;value)</argsstring>
        <name>try_push_back</name>
        <qualifiedname>pyfolio::TimeSeries::try_push_back</qualifiedname>
        <param>
          <type>const <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> &amp;</type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Add a data point with validation (<ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result&lt;T&gt;</ref> API) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="156" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="156" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a7d98d0027ba1c14dbcbcfe4428aa8024" prot="public" static="no" nodiscard="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TimestampIter</type>
          </param>
          <param>
            <type>typename ValueIter</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; void &gt;</type>
        <definition>Result&lt; void &gt; pyfolio::TimeSeries&lt; T &gt;::bulk_insert</definition>
        <argsstring>(TimestampIter timestamps_begin, TimestampIter timestamps_end, ValueIter values_begin, ValueIter values_end)</argsstring>
        <name>bulk_insert</name>
        <qualifiedname>pyfolio::TimeSeries::bulk_insert</qualifiedname>
        <param>
          <type>TimestampIter</type>
          <declname>timestamps_begin</declname>
        </param>
        <param>
          <type>TimestampIter</type>
          <declname>timestamps_end</declname>
        </param>
        <param>
          <type>ValueIter</type>
          <declname>values_begin</declname>
        </param>
        <param>
          <type>ValueIter</type>
          <declname>values_end</declname>
        </param>
        <briefdescription>
<para>Bulk insert data points (optimized for multiple additions) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="176" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="176" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a9e70bc9e7a6bf7393663c7b66ceff037" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::TimeSeries&lt; T &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>pyfolio::TimeSeries::clear</qualifiedname>
        <briefdescription>
<para>Clear all data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="218" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a6aef72caa37febb0f72b802ef26d15dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::TimeSeries&lt; T &gt;::sort_by_time</definition>
        <argsstring>()</argsstring>
        <name>sort_by_time</name>
        <qualifiedname>pyfolio::TimeSeries::sort_by_time</qualifiedname>
        <briefdescription>
<para>Sort by timestamp (maintains time series integrity) - Optimized. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="226" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="226" bodyend="243"/>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7d98d0027ba1c14dbcbcfe4428aa8024" compoundref="d8/d51/time__series_8h" startline="176" endline="213">pyfolio::TimeSeries&lt; MarketIndicators &gt;::bulk_insert</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a729141cccb1544762ac2069d734929d0" compoundref="d8/d51/time__series_8h" startline="68" endline="83">pyfolio::TimeSeries&lt; MarketIndicators &gt;::create</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a26c5167a43a7d850969f2ddf6c2745b0" compoundref="d8/d51/time__series_8h" startline="85" endline="99">pyfolio::TimeSeries&lt; MarketIndicators &gt;::create</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab47f50836d650a1f8c1f27ee517ae44e" compoundref="d8/d51/time__series_8h" startline="55" endline="59">pyfolio::TimeSeries&lt; MarketIndicators &gt;::TimeSeries</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1abb6f89aeb066415be4db3d1af1fdede6" compoundref="d8/d51/time__series_8h" startline="61" endline="65">pyfolio::TimeSeries&lt; MarketIndicators &gt;::TimeSeries</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a39a12989a144ef0b2ec705cb76d82713" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; T &gt;</type>
        <definition>Result&lt; T &gt; pyfolio::TimeSeries&lt; T &gt;::at_time</definition>
        <argsstring>(const DateTime &amp;timestamp) const</argsstring>
        <name>at_time</name>
        <qualifiedname>pyfolio::TimeSeries::at_time</qualifiedname>
        <param>
          <type>const <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> &amp;</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
<para>Find value at specific timestamp. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="310" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="310" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1aad1f951db77554e95f2e71d7f9e405fe" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::slice</definition>
        <argsstring>(const DateTime &amp;start, const DateTime &amp;end) const</argsstring>
        <name>slice</name>
        <qualifiedname>pyfolio::TimeSeries::slice</qualifiedname>
        <param>
          <type>const <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> &amp;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> &amp;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Get slice of time series between dates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="324" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="324" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1aa11c11bab5196315aebc59e03ff7ae24" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::resample</definition>
        <argsstring>(Frequency target_freq) const</argsstring>
        <name>resample</name>
        <qualifiedname>pyfolio::TimeSeries::resample</qualifiedname>
        <param>
          <type><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92e" kindref="member">Frequency</ref></type>
          <declname>target_freq</declname>
        </param>
    <requiresclause>std::floating_point&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>Resample to different frequency (with default mean aggregator) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="349" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="349" bodyend="363"/>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1acabfd3a56cd8250c87a2f50b76d4ed4b" compoundref="d4/d73/returns_8h" startline="147" endline="170">pyfolio::performance::aggregate_returns</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1aa11c11bab5196315aebc59e03ff7ae24" compoundref="d8/d51/time__series_8h" startline="349" endline="363">pyfolio::TimeSeries&lt; MarketIndicators &gt;::resample</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1aa62c243abee449a12d03b6039807bc5d" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::resample</definition>
        <argsstring>(Frequency target_freq, const std::function&lt; T(const std::vector&lt; T &gt; &amp;)&gt; &amp;aggregator) const</argsstring>
        <name>resample</name>
        <qualifiedname>pyfolio::TimeSeries::resample</qualifiedname>
        <param>
          <type><ref refid="d7/df8/namespacepyfolio_1ad4beb384aab829428a007308f1d0c92e" kindref="member">Frequency</ref></type>
          <declname>target_freq</declname>
        </param>
        <param>
          <type>const std::function&lt; T(const std::vector&lt; T &gt; &amp;)&gt; &amp;</type>
          <declname>aggregator</declname>
        </param>
        <briefdescription>
<para>Resample to different frequency. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="368" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="368" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a4d4c9d331becbed701eacccc2b29ae15" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::rolling</definition>
        <argsstring>(size_type window_size, F &amp;&amp;func) const</argsstring>
        <name>rolling</name>
        <qualifiedname>pyfolio::TimeSeries::rolling</qualifiedname>
        <param>
          <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1ad0095a701f16fea4226b12cb4db01b48" kindref="member">size_type</ref></type>
          <declname>window_size</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Rolling window operation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="398" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="398" bodyend="431"/>
        <referencedby refid="d8/dd9/namespacepyfolio_1_1performance_1a5e53c9105f237045953172393a34c5c2" compoundref="d4/d73/returns_8h" startline="175" endline="197">pyfolio::performance::rolling_returns</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a1fb9b999f09567e14ffdb202f4047b6a" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::shift</definition>
        <argsstring>(int periods) const</argsstring>
        <name>shift</name>
        <qualifiedname>pyfolio::TimeSeries::shift</qualifiedname>
        <param>
          <type>int</type>
          <declname>periods</declname>
        </param>
        <briefdescription>
<para>Shift values by n periods. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="436" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="436" bodyend="468"/>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a434b80c0be5078bf91933e48b3fd48c3" compoundref="d8/d51/time__series_8h" startline="473" endline="494">pyfolio::TimeSeries&lt; MarketIndicators &gt;::pct_change</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a434b80c0be5078bf91933e48b3fd48c3" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::pct_change</definition>
        <argsstring>(int periods=1) const</argsstring>
        <name>pct_change</name>
        <qualifiedname>pyfolio::TimeSeries::pct_change</qualifiedname>
        <param>
          <type>int</type>
          <declname>periods</declname>
          <defval>1</defval>
        </param>
    <requiresclause>std::floating_point&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>Percentage change. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="473" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="473" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1aabcf1a46e463e3a482632eacb0265394" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::cumsum</definition>
        <argsstring>() const</argsstring>
        <name>cumsum</name>
        <qualifiedname>pyfolio::TimeSeries::cumsum</qualifiedname>
        <briefdescription>
<para>Cumulative sum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="499" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="499" bodyend="510"/>
        <referencedby refid="dd/d26/classpyfolio_1_1analytics_1_1PerformanceAnalysisSuite_1a2a89a113f35927f33af40fa23ed44a70" compoundref="df/de7/performance__analysis__suite_8h" startline="255" endline="403">pyfolio::analytics::PerformanceAnalysisSuite::analyze_performance</referencedby>
        <referencedby refid="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite_1a7c39e9da13b225d9186ed324da6514d5" compoundref="dd/d71/parallel__performance__suite_8h" startline="158" endline="334">pyfolio::analytics::ParallelPerformanceAnalysisSuite::analyze_performance_parallel</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a16547ab9cbc2a80fb6ca5e8436688c0d" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::cumprod</definition>
        <argsstring>() const</argsstring>
        <name>cumprod</name>
        <qualifiedname>pyfolio::TimeSeries::cumprod</qualifiedname>
        <briefdescription>
<para>Cumulative product. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="515" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="515" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1af0769c2f121e004e306b237bc78d6806" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::dropna</definition>
        <argsstring>() const</argsstring>
        <name>dropna</name>
        <qualifiedname>pyfolio::TimeSeries::dropna</qualifiedname>
    <requiresclause>std::floating_point&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>Drop NaN values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="531" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="531" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a648fe3ce52eabb6702e221e0e57f490a" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::fillna</definition>
        <argsstring>(const T &amp;fill_value) const</argsstring>
        <name>fillna</name>
        <qualifiedname>pyfolio::TimeSeries::fillna</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>fill_value</declname>
        </param>
    <requiresclause>std::floating_point&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>Fill NaN values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="551" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="551" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a6a1add6f9d8fea40487d684d6566addc" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; T &gt;</type>
        <definition>Result&lt; T &gt; pyfolio::TimeSeries&lt; T &gt;::at</definition>
        <argsstring>(const DateTime &amp;timestamp) const</argsstring>
        <name>at</name>
        <qualifiedname>pyfolio::TimeSeries::at</qualifiedname>
        <param>
          <type>const <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> &amp;</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
<para>Find value at specific <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> (additional overload) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="568" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="568" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a09b5e0db91c49c4ef4b768f34e838a6e" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::rolling_mean</definition>
        <argsstring>(size_type window) const</argsstring>
        <name>rolling_mean</name>
        <qualifiedname>pyfolio::TimeSeries::rolling_mean</qualifiedname>
        <param>
          <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1ad0095a701f16fea4226b12cb4db01b48" kindref="member">size_type</ref></type>
          <declname>window</declname>
        </param>
    <requiresclause>std::floating_point&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>Calculate rolling mean (optimized) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="580" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="580" bodyend="618"/>
        <referencedby refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a86abd7db22a354c6ef057158864d41bf" compoundref="d4/dc1/cached__performance__metrics_8h" startline="362" endline="381">pyfolio::analytics::CachedPerformanceCalculator::rolling_mean</referencedby>
        <referencedby refid="d7/d98/classpyfolio_1_1PerformanceMetrics_1ad2969f9a4fbc7c5670a4916854ed97b0" compoundref="de/d88/performance__metrics_8h" startline="294" endline="298">pyfolio::PerformanceMetrics::rolling_sharpe</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1aa7bb9fb26a605ffa13f550d8597c968d" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::rolling_std</definition>
        <argsstring>(size_type window) const</argsstring>
        <name>rolling_std</name>
        <qualifiedname>pyfolio::TimeSeries::rolling_std</qualifiedname>
        <param>
          <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1ad0095a701f16fea4226b12cb4db01b48" kindref="member">size_type</ref></type>
          <declname>window</declname>
        </param>
    <requiresclause>std::floating_point&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>Calculate rolling standard deviation (optimized) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="623" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="623" bodyend="673"/>
        <referencedby refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a42bf7ecca30cbf723515dc06df7ba678" compoundref="d4/dc1/cached__performance__metrics_8h" startline="387" endline="406">pyfolio::analytics::CachedPerformanceCalculator::rolling_std</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a90865bd0cd710c92dfb90263d348a012" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::rolling_min</definition>
        <argsstring>(size_type window) const</argsstring>
        <name>rolling_min</name>
        <qualifiedname>pyfolio::TimeSeries::rolling_min</qualifiedname>
        <param>
          <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1ad0095a701f16fea4226b12cb4db01b48" kindref="member">size_type</ref></type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Calculate rolling minimum (optimized with deque) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="678" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="678" bodyend="723"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1ac2b9a1c0db8437da1ec1417c01e06919" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::rolling_max</definition>
        <argsstring>(size_type window) const</argsstring>
        <name>rolling_max</name>
        <qualifiedname>pyfolio::TimeSeries::rolling_max</qualifiedname>
        <param>
          <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries_1ad0095a701f16fea4226b12cb4db01b48" kindref="member">size_type</ref></type>
          <declname>window</declname>
        </param>
        <briefdescription>
<para>Calculate rolling maximum (optimized with deque) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="728" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="728" bodyend="773"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1aad798a4da69bff9c8bb9d335eaba6ec6" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; T &gt;</type>
        <definition>Result&lt; T &gt; pyfolio::TimeSeries&lt; T &gt;::mean</definition>
        <argsstring>() const</argsstring>
        <name>mean</name>
        <qualifiedname>pyfolio::TimeSeries::mean</qualifiedname>
    <requiresclause>std::floating_point&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>Calculate mean of all values (SIMD-optimized for double) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="778" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="778" bodyend="797"/>
        <referencedby refid="d7/d98/classpyfolio_1_1PerformanceMetrics_1a98139e1c2481720f61ac7a7f2959d9af" compoundref="de/d88/performance__metrics_8h" startline="175" endline="183">pyfolio::PerformanceMetrics::annual_return</referencedby>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1ad65c7ac81b945bde674200d8ca6b389b" compoundref="d5/db2/analytics_2statistics_8h" startline="346" endline="378">pyfolio::Statistics::calmar_ratio</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a41ce57e7df0fc468024c1fb40b2c773a" compoundref="d8/d51/time__series_8h" startline="1152" endline="1194">pyfolio::TimeSeries&lt; MarketIndicators &gt;::correlation</referencedby>
        <referencedby refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a8bc981bc9cbd284d47b40f4ce72c14a5" compoundref="d4/dc1/cached__performance__metrics_8h" startline="282" endline="302">pyfolio::analytics::CachedPerformanceCalculator::mean</referencedby>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1add05d2ec066eecbb3feb17b3ecab1fe8" compoundref="d5/db2/analytics_2statistics_8h" startline="287" endline="305">pyfolio::Statistics::sharpe_ratio</referencedby>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1ae3abd35508b1c2c76a918a8d58338e41" compoundref="d5/db2/analytics_2statistics_8h" startline="309" endline="342">pyfolio::Statistics::sortino_ratio</referencedby>
        <referencedby refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82439ade72c213e3ffd477dd6a2058e5" compoundref="d8/d51/time__series_8h" startline="802" endline="824">pyfolio::TimeSeries&lt; MarketIndicators &gt;::std</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a82439ade72c213e3ffd477dd6a2058e5" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; T &gt;</type>
        <definition>Result&lt; T &gt; pyfolio::TimeSeries&lt; T &gt;::std</definition>
        <argsstring>() const</argsstring>
        <name>std</name>
        <qualifiedname>pyfolio::TimeSeries::std</qualifiedname>
    <requiresclause>std::floating_point&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>Calculate standard deviation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="802" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="802" bodyend="824"/>
        <referencedby refid="d7/d98/classpyfolio_1_1PerformanceMetrics_1a6f7e64c2f975ec5facdf779b6d27533a" compoundref="de/d88/performance__metrics_8h" startline="186" endline="194">pyfolio::PerformanceMetrics::annual_volatility</referencedby>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1add05d2ec066eecbb3feb17b3ecab1fe8" compoundref="d5/db2/analytics_2statistics_8h" startline="287" endline="305">pyfolio::Statistics::sharpe_ratio</referencedby>
        <referencedby refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1ae2b363deb9d87338d104b96de4ae3a7f" compoundref="d4/dc1/cached__performance__metrics_8h" startline="308" endline="327">pyfolio::analytics::CachedPerformanceCalculator::std_deviation</referencedby>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1ac3ca6d5a593f245b088abe5097c2466d" compoundref="d5/db2/analytics_2statistics_8h" startline="449" endline="451">pyfolio::Statistics::volatility</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a74758165855945e1aca6706f6758c691" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; Return &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::returns</definition>
        <argsstring>() const</argsstring>
        <name>returns</name>
        <qualifiedname>pyfolio::TimeSeries::returns</qualifiedname>
    <requiresclause>std::floating_point&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>Calculate returns (percentage change) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="829" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="829" bodyend="850"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a5cae2e774b3eeab9c87e2e2a44ee532a" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::cumulative_returns</definition>
        <argsstring>() const</argsstring>
        <name>cumulative_returns</name>
        <qualifiedname>pyfolio::TimeSeries::cumulative_returns</qualifiedname>
    <requiresclause>std::floating_point&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>Calculate cumulative returns. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="855" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="855" bodyend="874"/>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1ad65c7ac81b945bde674200d8ca6b389b" compoundref="d5/db2/analytics_2statistics_8h" startline="346" endline="378">pyfolio::Statistics::calmar_ratio</referencedby>
        <referencedby refid="d7/d98/classpyfolio_1_1PerformanceMetrics_1a535ca9f451f9d1ab1a2b96bb77a9b717" compoundref="de/d88/performance__metrics_8h" startline="281" endline="283">pyfolio::PerformanceMetrics::cumulative_returns</referencedby>
        <referencedby refid="da/d0a/classpyfolio_1_1Statistics_1a6950e63814c3d0f2985058afa6d045de" compoundref="d5/db2/analytics_2statistics_8h" startline="397" endline="445">pyfolio::Statistics::max_drawdown</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1acc8af9272d26204d07b3e050ec3872d2" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::initialize</definition>
        <argsstring>(const std::vector&lt; DateTime &gt; &amp;new_timestamps, const std::vector&lt; T &gt; &amp;new_values) const</argsstring>
        <name>initialize</name>
        <qualifiedname>pyfolio::TimeSeries::initialize</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> &gt; &amp;</type>
          <declname>new_timestamps</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>new_values</declname>
        </param>
        <briefdescription>
<para>Initialize with new data (for test compatibility) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="879" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="879" bodyend="887"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a8bcf83a00202a1aa143a985b51c93d90" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; std::pair&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt;, <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt; &gt;</type>
        <definition>Result&lt; std::pair&lt; TimeSeries&lt; T &gt;, TimeSeries&lt; T &gt; &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::align</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;other) const</argsstring>
        <name>align</name>
        <qualifiedname>pyfolio::TimeSeries::align</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Align two time series by finding common dates. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="892" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="892" bodyend="922"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a946c290d6f1a27558b1f7a4da4a6cf5c" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::fill_missing</definition>
        <argsstring>(const std::vector&lt; DateTime &gt; &amp;target_dates, FillMethod method) const</argsstring>
        <name>fill_missing</name>
        <qualifiedname>pyfolio::TimeSeries::fill_missing</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> &gt; &amp;</type>
          <declname>target_dates</declname>
        </param>
        <param>
          <type><ref refid="d7/df8/namespacepyfolio_1a3d46f8329f981a02b2794451931e6c03" kindref="member">FillMethod</ref></type>
          <declname>method</declname>
        </param>
        <briefdescription>
<para>Fill missing values using specified method. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="927" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="927" bodyend="1003"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a825f0e34f5a5da409278b5bed99f52c1" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::operator+</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;other) const</argsstring>
        <name>operator+</name>
        <qualifiedname>pyfolio::TimeSeries::operator+</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
    <requiresclause>std::floating_point&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>Element-wise addition (SIMD-optimized) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="1010" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="1010" bodyend="1035"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a0045682c4ad12712fdb45eff3f707928" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::operator-</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;other) const</argsstring>
        <name>operator-</name>
        <qualifiedname>pyfolio::TimeSeries::operator-</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
    <requiresclause>std::floating_point&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>Element-wise subtraction (SIMD-optimized) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="1040" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="1040" bodyend="1065"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1ab9d28c69b57f3f05b5c70416989e727f" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::operator*</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;other) const</argsstring>
        <name>operator*</name>
        <qualifiedname>pyfolio::TimeSeries::operator*</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
    <requiresclause>std::floating_point&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>Element-wise multiplication (SIMD-optimized) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="1070" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="1070" bodyend="1096"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1acb95f2faa1e3cfe36d2d6ead77b82873" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::operator*</definition>
        <argsstring>(T scalar) const</argsstring>
        <name>operator*</name>
        <qualifiedname>pyfolio::TimeSeries::operator*</qualifiedname>
        <param>
          <type>T</type>
          <declname>scalar</declname>
        </param>
    <requiresclause>std::floating_point&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>Scalar multiplication (SIMD-optimized) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="1101" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="1101" bodyend="1121"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1ace0a88e334558363898722abd949922b" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; T &gt;</type>
        <definition>Result&lt; T &gt; pyfolio::TimeSeries&lt; T &gt;::dot</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;other) const</argsstring>
        <name>dot</name>
        <qualifiedname>pyfolio::TimeSeries::dot</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
    <requiresclause>std::floating_point&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>Dot product with another time series (SIMD-optimized) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="1126" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="1126" bodyend="1147"/>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a41ce57e7df0fc468024c1fb40b2c773a" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::TimeSeries&lt; T &gt;::correlation</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;other) const</argsstring>
        <name>correlation</name>
        <qualifiedname>pyfolio::TimeSeries::correlation</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
    <requiresclause>std::floating_point&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>Correlation with another time series (SIMD-optimized) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="1152" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="1152" bodyend="1194"/>
        <referencedby refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1ae8d11622fcee575f2c19849d443dbb94" compoundref="d4/dc1/cached__performance__metrics_8h" startline="333" endline="356">pyfolio::analytics::CachedPerformanceCalculator::correlation</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a729141cccb1544762ac2069d734929d0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>static Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::create</definition>
        <argsstring>(const std::vector&lt; DateTime &gt; &amp;timestamps, const std::vector&lt; T &gt; &amp;values, const std::string &amp;name=&quot;&quot;)</argsstring>
        <name>create</name>
        <qualifiedname>pyfolio::TimeSeries::create</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> &gt; &amp;</type>
          <declname>timestamps</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="68" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="68" bodyend="83"/>
        <referencedby refid="d7/d5f/plotly__enhanced__example_8cpp_1a127f4b66b63cd12df905cc57aece66c4" compoundref="d7/d5f/plotly__enhanced__example_8cpp" startline="27" endline="49">generate_sample_data</referencedby>
        <referencedby refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a108b4651f0cd7b9335eb935f57b67ad3" compoundref="d9/d36/parallel__algorithms_8h" startline="390" endline="451">pyfolio::parallel::ParallelAlgorithms::parallel_rolling_operation</referencedby>
        <referencedby refid="db/db8/classpyfolio_1_1web_1_1JsonSerializer_1a939bc654f97aca0244439bf4b2e6ec47" compoundref="d4/d45/json__serializer_8h" startline="199" endline="231">pyfolio::web::JsonSerializer::parse_time_series</referencedby>
      </memberdef>
      <memberdef kind="function" id="d7/ddc/classpyfolio_1_1TimeSeries_1a26c5167a43a7d850969f2ddf6c2745b0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>static Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::TimeSeries&lt; T &gt;::create</definition>
        <argsstring>(std::vector&lt; DateTime &gt; &amp;&amp;timestamps, std::vector&lt; T &gt; &amp;&amp;values, const std::string &amp;name=&quot;&quot;)</argsstring>
        <name>create</name>
        <qualifiedname>pyfolio::TimeSeries::create</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="d6/d4f/classpyfolio_1_1DateTime" kindref="compound">DateTime</ref> &gt; &amp;&amp;</type>
          <declname>timestamps</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;&amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="85" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="85" bodyend="99"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>High-performance time series container for financial data. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" line="22" column="1" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/core/time_series.h" bodystart="22" bodyend="1226"/>
    <listofallmembers>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a8bcf83a00202a1aa143a985b51c93d90" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>align</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a6c04137ff6f6c3447bb29eac26ecebdf" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>at</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab16213192b396ac9ff616393b3842fe5" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>at</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a6a1add6f9d8fea40487d684d6566addc" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>at</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a39a12989a144ef0b2ec705cb76d82713" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>at_time</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a4e8f9787b69fe091f49359f84b7696c5" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>back</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a8c44d7d3a10364910d34b32453c1e73a" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>back</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a3828248027c39f8e340c86ad847d9ea9" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>begin</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1aec28afca44df95cc6d38e13f106b66e0" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>begin</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7d98d0027ba1c14dbcbcfe4428aa8024" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>bulk_insert</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a092c340c53684c40636f142c14817cbd" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>cbegin</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a9e4e60cfa0a78036c05f92214dd7a955" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>cend</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a9e70bc9e7a6bf7393663c7b66ceff037" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>clear</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a75370c5ba8ebf59087e51110a045c62b" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>const_iterator</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a41ce57e7df0fc468024c1fb40b2c773a" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>correlation</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a729141cccb1544762ac2069d734929d0" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>create</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a26c5167a43a7d850969f2ddf6c2745b0" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>create</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a16547ab9cbc2a80fb6ca5e8436688c0d" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>cumprod</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1aabcf1a46e463e3a482632eacb0265394" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>cumsum</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a5cae2e774b3eeab9c87e2e2a44ee532a" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>cumulative_returns</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1ace0a88e334558363898722abd949922b" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>dot</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1af0769c2f121e004e306b237bc78d6806" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>dropna</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a2633632ebe894962ce2863adbf2a7b55" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>emplace_back</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>empty</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a39fb49cf0a9c6742658b503c1f8e04e2" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>end</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1accc09eb2e5ac90c575e206eac1bb78a6" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>end</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a946c290d6f1a27558b1f7a4da4a6cf5c" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>fill_missing</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a648fe3ce52eabb6702e221e0e57f490a" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>fillna</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1af71d2714bd7245ee0f6f272d2019ec3e" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>front</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1aaa58702b82df2d7ede504e7d97f66f7a" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>front</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a45d308352c0946c231ac724f5cc68142" prot="private" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>get_period_start</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1acc8af9272d26204d07b3e050ec3872d2" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>initialize</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a57f5bc381c234dc66040c8095c8ebf9b" prot="private" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>is_sorted_by_time</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1aded88af78b3a73f0a49ba1282d43bb69" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>iterator</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1aad798a4da69bff9c8bb9d335eaba6ec6" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>mean</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a14dc0c14e60203348e7a7a474f086a49" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>name</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1ac6444a8cdfb457bbb0f55242b4dd2a70" prot="private" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>name_</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab9d28c69b57f3f05b5c70416989e727f" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>operator*</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1acb95f2faa1e3cfe36d2d6ead77b82873" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>operator*</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a825f0e34f5a5da409278b5bed99f52c1" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>operator+</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0045682c4ad12712fdb45eff3f707928" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>operator-</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab474b0dcb39ddecd2f399fe527b27a27" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>operator[]</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a9c7be369ce119442e4cbed8ab29eedd9" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>operator[]</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a434b80c0be5078bf91933e48b3fd48c3" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>pct_change</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a165f6a4758d61017bdcfb78f2457ba24" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>push_back</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1aa11c11bab5196315aebc59e03ff7ae24" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>resample</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1aa62c243abee449a12d03b6039807bc5d" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>resample</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0299648a8469a9a82dfa15f9f035a704" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>reserve</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a74758165855945e1aca6706f6758c691" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>returns</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a4d4c9d331becbed701eacccc2b29ae15" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>rolling</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1ac2b9a1c0db8437da1ec1417c01e06919" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>rolling_max</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a09b5e0db91c49c4ef4b768f34e838a6e" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>rolling_mean</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a90865bd0cd710c92dfb90263d348a012" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>rolling_min</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1aa7bb9fb26a605ffa13f550d8597c968d" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>rolling_std</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a429262cd96d2ba45e96bfb6302cb581e" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>set_name</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a1fb9b999f09567e14ffdb202f4047b6a" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>shift</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>size</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1ad0095a701f16fea4226b12cb4db01b48" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>size_type</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1aad1f951db77554e95f2e71d7f9e405fe" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>slice</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a6aef72caa37febb0f72b802ef26d15dd" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>sort_by_time</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a25a23789c7960328dea67749f0b16e8d" prot="private" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>sort_by_time_optimized</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a557977be9b5e83fa77d44b1739d057be" prot="private" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>sort_by_time_small</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82439ade72c213e3ffd477dd6a2058e5" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>std</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1aa194feddd304eb863bfcb6f445769968" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>TimeSeries</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab115af26ed8e54a93dd75a476d95ff99" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>TimeSeries</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab47f50836d650a1f8c1f27ee517ae44e" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>TimeSeries</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1abb6f89aeb066415be4db3d1af1fdede6" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>TimeSeries</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a119004323be19c9490f882830f2e8de5" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>timestamp</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0374bbc62bd808749ac476b3af4b0ead" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>timestamps</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1afebd97b1f576d8dab24a3b9d97173003" prot="private" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>timestamps_</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1aa0d2f984a31a4e1aa0c38955db2b3930" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>try_push_back</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a131f541a7974a35820a7fe0043d87c2f" prot="private" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>validate_and_throw</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1af9884590f69dd612b4a5adc7bb3df918" prot="private" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>validate_consistency</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a9d9cdb98e0f041880fa5f76c64fc0116" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>value_type</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" prot="public" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>values</name></member>
      <member refid="d7/ddc/classpyfolio_1_1TimeSeries_1a35bdbada179a223c590ee0c68fd1ae13" prot="private" virt="non-virtual"><scope>pyfolio::TimeSeries</scope><name>values_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
