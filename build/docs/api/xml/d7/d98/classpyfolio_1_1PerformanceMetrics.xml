<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d7/d98/classpyfolio_1_1PerformanceMetrics" kind="class" language="C++" prot="public">
    <compoundname>pyfolio::PerformanceMetrics</compoundname>
    <includes refid="de/d88/performance__metrics_8h" local="no">performance_metrics.h</includes>
    <innerclass refid="d9/d17/structpyfolio_1_1PerformanceMetrics_1_1CaptureRatioResult" prot="public">pyfolio::PerformanceMetrics::CaptureRatioResult</innerclass>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="d7/d98/classpyfolio_1_1PerformanceMetrics_1a98139e1c2481720f61ac7a7f2959d9af" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>static Result&lt; double &gt; pyfolio::PerformanceMetrics::annual_return</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns)</argsstring>
        <name>annual_return</name>
        <qualifiedname>pyfolio::PerformanceMetrics::annual_return</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" line="175" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" bodystart="175" bodyend="183"/>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1aad798a4da69bff9c8bb9d335eaba6ec6" compoundref="d8/d51/time__series_8h" startline="778" endline="797">pyfolio::TimeSeries&lt; T &gt;::mean</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="db/d9c/namespacepyfolio_1_1constants_1accf4b9e8a1c9179437b61a3f9a0e2e53" compoundref="d9/d49/types_8h" startline="59">pyfolio::constants::TRADING_DAYS_PER_YEAR</references>
      </memberdef>
      <memberdef kind="function" id="d7/d98/classpyfolio_1_1PerformanceMetrics_1a6f7e64c2f975ec5facdf779b6d27533a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>static Result&lt; double &gt; pyfolio::PerformanceMetrics::annual_volatility</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns)</argsstring>
        <name>annual_volatility</name>
        <qualifiedname>pyfolio::PerformanceMetrics::annual_volatility</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" line="186" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" bodystart="186" bodyend="194"/>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82439ade72c213e3ffd477dd6a2058e5" compoundref="d8/d51/time__series_8h" startline="802" endline="824">pyfolio::TimeSeries&lt; T &gt;::std</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="db/d9c/namespacepyfolio_1_1constants_1accf4b9e8a1c9179437b61a3f9a0e2e53" compoundref="d9/d49/types_8h" startline="59">pyfolio::constants::TRADING_DAYS_PER_YEAR</references>
      </memberdef>
      <memberdef kind="function" id="d7/d98/classpyfolio_1_1PerformanceMetrics_1a5b09b3706a11359c2364d3d6149eba17" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>static Result&lt; double &gt; pyfolio::PerformanceMetrics::sharpe_ratio</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns, double risk_free_rate=0.0)</argsstring>
        <name>sharpe_ratio</name>
        <qualifiedname>pyfolio::PerformanceMetrics::sharpe_ratio</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>double</type>
          <declname>risk_free_rate</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" line="197" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" bodystart="197" bodyend="199"/>
        <references refid="da/d0a/classpyfolio_1_1Statistics_1add05d2ec066eecbb3feb17b3ecab1fe8" compoundref="d5/db2/analytics_2statistics_8h" startline="287" endline="305">pyfolio::Statistics::sharpe_ratio</references>
      </memberdef>
      <memberdef kind="function" id="d7/d98/classpyfolio_1_1PerformanceMetrics_1a904b5c53def9cd48ffb1be5fb776480e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>static Result&lt; double &gt; pyfolio::PerformanceMetrics::sortino_ratio</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns, double risk_free_rate=0.0)</argsstring>
        <name>sortino_ratio</name>
        <qualifiedname>pyfolio::PerformanceMetrics::sortino_ratio</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>double</type>
          <declname>risk_free_rate</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" line="202" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" bodystart="202" bodyend="204"/>
        <references refid="da/d0a/classpyfolio_1_1Statistics_1ae3abd35508b1c2c76a918a8d58338e41" compoundref="d5/db2/analytics_2statistics_8h" startline="309" endline="342">pyfolio::Statistics::sortino_ratio</references>
      </memberdef>
      <memberdef kind="function" id="d7/d98/classpyfolio_1_1PerformanceMetrics_1a205605b4205561b43b0b8e052999ec55" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>static Result&lt; double &gt; pyfolio::PerformanceMetrics::calmar_ratio</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns)</argsstring>
        <name>calmar_ratio</name>
        <qualifiedname>pyfolio::PerformanceMetrics::calmar_ratio</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" line="207" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" bodystart="207" bodyend="209"/>
        <references refid="da/d0a/classpyfolio_1_1Statistics_1ad65c7ac81b945bde674200d8ca6b389b" compoundref="d5/db2/analytics_2statistics_8h" startline="346" endline="378">pyfolio::Statistics::calmar_ratio</references>
      </memberdef>
      <memberdef kind="function" id="d7/d98/classpyfolio_1_1PerformanceMetrics_1a74e8559b754a6682d584e5083a97742e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d5/dff/structpyfolio_1_1Statistics_1_1SimpleDrawdownInfo" kindref="compound">Statistics::SimpleDrawdownInfo</ref> &gt;</type>
        <definition>static Result&lt; Statistics::SimpleDrawdownInfo &gt; pyfolio::PerformanceMetrics::max_drawdown</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns)</argsstring>
        <name>max_drawdown</name>
        <qualifiedname>pyfolio::PerformanceMetrics::max_drawdown</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" line="212" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" bodystart="212" bodyend="214"/>
        <references refid="da/d0a/classpyfolio_1_1Statistics_1a6950e63814c3d0f2985058afa6d045de" compoundref="d5/db2/analytics_2statistics_8h" startline="397" endline="445">pyfolio::Statistics::max_drawdown</references>
      </memberdef>
      <memberdef kind="function" id="d7/d98/classpyfolio_1_1PerformanceMetrics_1a992b93ae03ec1d0da0fb55c985b70465" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="de/d82/structpyfolio_1_1Statistics_1_1AlphaBetaResult" kindref="compound">Statistics::AlphaBetaResult</ref> &gt;</type>
        <definition>static Result&lt; Statistics::AlphaBetaResult &gt; pyfolio::PerformanceMetrics::alpha_beta</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns, const TimeSeries&lt; T &gt; &amp;benchmark_returns, double risk_free_rate=0.0)</argsstring>
        <name>alpha_beta</name>
        <qualifiedname>pyfolio::PerformanceMetrics::alpha_beta</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>benchmark_returns</declname>
        </param>
        <param>
          <type>double</type>
          <declname>risk_free_rate</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" line="217" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" bodystart="217" bodyend="221"/>
        <references refid="da/d0a/classpyfolio_1_1Statistics_1af30bc2537515dd9bf004768149ace4a4" compoundref="d5/db2/analytics_2statistics_8h" startline="478" endline="518">pyfolio::Statistics::alpha_beta</references>
      </memberdef>
      <memberdef kind="function" id="d7/d98/classpyfolio_1_1PerformanceMetrics_1ab87361fe59e60bb0b0de03856beb1ed5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>static Result&lt; double &gt; pyfolio::PerformanceMetrics::information_ratio</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns, const TimeSeries&lt; T &gt; &amp;benchmark_returns)</argsstring>
        <name>information_ratio</name>
        <qualifiedname>pyfolio::PerformanceMetrics::information_ratio</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>benchmark_returns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" line="224" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" bodystart="224" bodyend="226"/>
        <references refid="da/d0a/classpyfolio_1_1Statistics_1a0fd32c54eb1fea5a675633d5f85b7fc0" compoundref="d5/db2/analytics_2statistics_8h" startline="522" endline="561">pyfolio::Statistics::information_ratio</references>
      </memberdef>
      <memberdef kind="function" id="d7/d98/classpyfolio_1_1PerformanceMetrics_1a9fdc757f9aed9be60ee1beb1bc1d0e6f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>static Result&lt; double &gt; pyfolio::PerformanceMetrics::tracking_error</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns, const TimeSeries&lt; T &gt; &amp;benchmark_returns)</argsstring>
        <name>tracking_error</name>
        <qualifiedname>pyfolio::PerformanceMetrics::tracking_error</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>benchmark_returns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" line="229" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" bodystart="229" bodyend="231"/>
        <references refid="da/d0a/classpyfolio_1_1Statistics_1a2e0bb5b9b5052088b4ec146150811489" compoundref="d5/db2/analytics_2statistics_8h" startline="564" endline="598">pyfolio::Statistics::tracking_error</references>
      </memberdef>
      <memberdef kind="function" id="d7/d98/classpyfolio_1_1PerformanceMetrics_1a73f78d1e5ebebe459b1e9b8c2f5c695f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d9/d17/structpyfolio_1_1PerformanceMetrics_1_1CaptureRatioResult" kindref="compound">CaptureRatioResult</ref> &gt;</type>
        <definition>static Result&lt; CaptureRatioResult &gt; pyfolio::PerformanceMetrics::up_down_capture_ratio</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns, const TimeSeries&lt; T &gt; &amp;benchmark_returns)</argsstring>
        <name>up_down_capture_ratio</name>
        <qualifiedname>pyfolio::PerformanceMetrics::up_down_capture_ratio</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>benchmark_returns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" line="241" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" bodystart="241" bodyend="248"/>
        <references refid="d9/d17/structpyfolio_1_1PerformanceMetrics_1_1CaptureRatioResult_1ac54d2dd45243b8be558a5cee6e96ddc6" compoundref="de/d88/performance__metrics_8h" startline="236">pyfolio::PerformanceMetrics::CaptureRatioResult::down_capture</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d9/d17/structpyfolio_1_1PerformanceMetrics_1_1CaptureRatioResult_1a1ab7bc92a3c7d720df2b4b0964e8bdb0" compoundref="de/d88/performance__metrics_8h" startline="235">pyfolio::PerformanceMetrics::CaptureRatioResult::up_capture</references>
      </memberdef>
      <memberdef kind="function" id="d7/d98/classpyfolio_1_1PerformanceMetrics_1ac6c146bcc32eea3eca50844ceb910a9b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>static Result&lt; double &gt; pyfolio::PerformanceMetrics::tail_ratio</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns, double confidence_level=0.05)</argsstring>
        <name>tail_ratio</name>
        <qualifiedname>pyfolio::PerformanceMetrics::tail_ratio</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>double</type>
          <declname>confidence_level</declname>
          <defval>0.05</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" line="251" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" bodystart="251" bodyend="254"/>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
      </memberdef>
      <memberdef kind="function" id="d7/d98/classpyfolio_1_1PerformanceMetrics_1a411a637e64ea20e90ff6ad18248fbc4d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>static Result&lt; double &gt; pyfolio::PerformanceMetrics::common_sense_ratio</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns)</argsstring>
        <name>common_sense_ratio</name>
        <qualifiedname>pyfolio::PerformanceMetrics::common_sense_ratio</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" line="257" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" bodystart="257" bodyend="260"/>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
      </memberdef>
      <memberdef kind="function" id="d7/d98/classpyfolio_1_1PerformanceMetrics_1a5784ddc0d8e243ae533e21f2f9b5054a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>static Result&lt; double &gt; pyfolio::PerformanceMetrics::stability_of_timeseries</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns)</argsstring>
        <name>stability_of_timeseries</name>
        <qualifiedname>pyfolio::PerformanceMetrics::stability_of_timeseries</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" line="263" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" bodystart="263" bodyend="266"/>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
      </memberdef>
      <memberdef kind="function" id="d7/d98/classpyfolio_1_1PerformanceMetrics_1af08f7acfb54afc6584e949d822c895ce" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="de/d2e/structpyfolio_1_1analytics_1_1PerformanceMetrics" kindref="compound">pyfolio::analytics::PerformanceMetrics</ref> &gt;</type>
        <definition>static Result&lt; pyfolio::analytics::PerformanceMetrics &gt; pyfolio::PerformanceMetrics::calculate_comprehensive_metrics</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns, const TimeSeries&lt; T &gt; &amp;benchmark_returns, double risk_free_rate=0.0)</argsstring>
        <name>calculate_comprehensive_metrics</name>
        <qualifiedname>pyfolio::PerformanceMetrics::calculate_comprehensive_metrics</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>benchmark_returns</declname>
        </param>
        <param>
          <type>double</type>
          <declname>risk_free_rate</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" line="269" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" bodystart="269" bodyend="278"/>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="de/d2e/structpyfolio_1_1analytics_1_1PerformanceMetrics_1a3e502eb4760ff637704b95fc0cf4add1" compoundref="de/d88/performance__metrics_8h" startline="71">pyfolio::analytics::PerformanceMetrics::total_return</references>
      </memberdef>
      <memberdef kind="function" id="d7/d98/classpyfolio_1_1PerformanceMetrics_1a535ca9f451f9d1ab1a2b96bb77a9b717" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>static Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::PerformanceMetrics::cumulative_returns</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns)</argsstring>
        <name>cumulative_returns</name>
        <qualifiedname>pyfolio::PerformanceMetrics::cumulative_returns</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" line="281" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" bodystart="281" bodyend="283"/>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a5cae2e774b3eeab9c87e2e2a44ee532a" compoundref="d8/d51/time__series_8h" startline="855" endline="874">pyfolio::TimeSeries&lt; T &gt;::cumulative_returns</references>
      </memberdef>
      <memberdef kind="function" id="d7/d98/classpyfolio_1_1PerformanceMetrics_1ac8fe98c7b6ddff19757e5d534aa15844" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>static Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::PerformanceMetrics::drawdown_series</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns)</argsstring>
        <name>drawdown_series</name>
        <qualifiedname>pyfolio::PerformanceMetrics::drawdown_series</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" line="286" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" bodystart="286" bodyend="291"/>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0374bbc62bd808749ac476b3af4b0ead" compoundref="d8/d51/time__series_8h" startline="124" endline="124">pyfolio::TimeSeries&lt; T &gt;::timestamps</references>
      </memberdef>
      <memberdef kind="function" id="d7/d98/classpyfolio_1_1PerformanceMetrics_1ad2969f9a4fbc7c5670a4916854ed97b0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>static Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::PerformanceMetrics::rolling_sharpe</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns, int window, double risk_free_rate=0.0)</argsstring>
        <name>rolling_sharpe</name>
        <qualifiedname>pyfolio::PerformanceMetrics::rolling_sharpe</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>int</type>
          <declname>window</declname>
        </param>
        <param>
          <type>double</type>
          <declname>risk_free_rate</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" line="294" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" bodystart="294" bodyend="298"/>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a09b5e0db91c49c4ef4b768f34e838a6e" compoundref="d8/d51/time__series_8h" startline="580" endline="618">pyfolio::TimeSeries&lt; T &gt;::rolling_mean</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Static wrapper for <ref refid="d7/d98/classpyfolio_1_1PerformanceMetrics" kindref="compound">PerformanceMetrics</ref> expected by tests. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" line="172" column="1" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" bodystart="172" bodyend="299"/>
    <listofallmembers>
      <member refid="d7/d98/classpyfolio_1_1PerformanceMetrics_1a992b93ae03ec1d0da0fb55c985b70465" prot="public" virt="non-virtual"><scope>pyfolio::PerformanceMetrics</scope><name>alpha_beta</name></member>
      <member refid="d7/d98/classpyfolio_1_1PerformanceMetrics_1a98139e1c2481720f61ac7a7f2959d9af" prot="public" virt="non-virtual"><scope>pyfolio::PerformanceMetrics</scope><name>annual_return</name></member>
      <member refid="d7/d98/classpyfolio_1_1PerformanceMetrics_1a6f7e64c2f975ec5facdf779b6d27533a" prot="public" virt="non-virtual"><scope>pyfolio::PerformanceMetrics</scope><name>annual_volatility</name></member>
      <member refid="d7/d98/classpyfolio_1_1PerformanceMetrics_1af08f7acfb54afc6584e949d822c895ce" prot="public" virt="non-virtual"><scope>pyfolio::PerformanceMetrics</scope><name>calculate_comprehensive_metrics</name></member>
      <member refid="d7/d98/classpyfolio_1_1PerformanceMetrics_1a205605b4205561b43b0b8e052999ec55" prot="public" virt="non-virtual"><scope>pyfolio::PerformanceMetrics</scope><name>calmar_ratio</name></member>
      <member refid="d7/d98/classpyfolio_1_1PerformanceMetrics_1a411a637e64ea20e90ff6ad18248fbc4d" prot="public" virt="non-virtual"><scope>pyfolio::PerformanceMetrics</scope><name>common_sense_ratio</name></member>
      <member refid="d7/d98/classpyfolio_1_1PerformanceMetrics_1a535ca9f451f9d1ab1a2b96bb77a9b717" prot="public" virt="non-virtual"><scope>pyfolio::PerformanceMetrics</scope><name>cumulative_returns</name></member>
      <member refid="d7/d98/classpyfolio_1_1PerformanceMetrics_1ac8fe98c7b6ddff19757e5d534aa15844" prot="public" virt="non-virtual"><scope>pyfolio::PerformanceMetrics</scope><name>drawdown_series</name></member>
      <member refid="d7/d98/classpyfolio_1_1PerformanceMetrics_1ab87361fe59e60bb0b0de03856beb1ed5" prot="public" virt="non-virtual"><scope>pyfolio::PerformanceMetrics</scope><name>information_ratio</name></member>
      <member refid="d7/d98/classpyfolio_1_1PerformanceMetrics_1a74e8559b754a6682d584e5083a97742e" prot="public" virt="non-virtual"><scope>pyfolio::PerformanceMetrics</scope><name>max_drawdown</name></member>
      <member refid="d7/d98/classpyfolio_1_1PerformanceMetrics_1ad2969f9a4fbc7c5670a4916854ed97b0" prot="public" virt="non-virtual"><scope>pyfolio::PerformanceMetrics</scope><name>rolling_sharpe</name></member>
      <member refid="d7/d98/classpyfolio_1_1PerformanceMetrics_1a5b09b3706a11359c2364d3d6149eba17" prot="public" virt="non-virtual"><scope>pyfolio::PerformanceMetrics</scope><name>sharpe_ratio</name></member>
      <member refid="d7/d98/classpyfolio_1_1PerformanceMetrics_1a904b5c53def9cd48ffb1be5fb776480e" prot="public" virt="non-virtual"><scope>pyfolio::PerformanceMetrics</scope><name>sortino_ratio</name></member>
      <member refid="d7/d98/classpyfolio_1_1PerformanceMetrics_1a5784ddc0d8e243ae533e21f2f9b5054a" prot="public" virt="non-virtual"><scope>pyfolio::PerformanceMetrics</scope><name>stability_of_timeseries</name></member>
      <member refid="d7/d98/classpyfolio_1_1PerformanceMetrics_1ac6c146bcc32eea3eca50844ceb910a9b" prot="public" virt="non-virtual"><scope>pyfolio::PerformanceMetrics</scope><name>tail_ratio</name></member>
      <member refid="d7/d98/classpyfolio_1_1PerformanceMetrics_1a9fdc757f9aed9be60ee1beb1bc1d0e6f" prot="public" virt="non-virtual"><scope>pyfolio::PerformanceMetrics</scope><name>tracking_error</name></member>
      <member refid="d7/d98/classpyfolio_1_1PerformanceMetrics_1a73f78d1e5ebebe459b1e9b8c2f5c695f" prot="public" virt="non-virtual"><scope>pyfolio::PerformanceMetrics</scope><name>up_down_capture_ratio</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
