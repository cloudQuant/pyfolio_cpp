<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d9/d8e/structpyfolio_1_1memory_1_1PoolStats" kind="struct" language="C++" prot="public">
    <compoundname>pyfolio::memory::PoolStats</compoundname>
    <includes refid="df/d9d/pool__allocator_8h" local="no">pool_allocator.h</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1a1a7605bc4ca140295ea793b7f8ee0f48" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t pyfolio::memory::PoolStats::total_allocated_bytes</definition>
        <argsstring></argsstring>
        <name>total_allocated_bytes</name>
        <qualifiedname>pyfolio::memory::PoolStats::total_allocated_bytes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="33" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="33" bodyend="-1"/>
        <referencedby refid="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1a162063f9d304ff29a684bc75a260e8ea" compoundref="df/d9d/pool__allocator_8h" startline="45" endline="49">efficiency</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1ad0a07585188b87e53aab755eb2587e35" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t pyfolio::memory::PoolStats::used_bytes</definition>
        <argsstring></argsstring>
        <name>used_bytes</name>
        <qualifiedname>pyfolio::memory::PoolStats::used_bytes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="34" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="34" bodyend="-1"/>
        <referencedby refid="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1a162063f9d304ff29a684bc75a260e8ea" compoundref="df/d9d/pool__allocator_8h" startline="45" endline="49">efficiency</referencedby>
      </memberdef>
      <memberdef kind="variable" id="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1a5dfd0b66da676d53cd8fddd5c847b552" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t pyfolio::memory::PoolStats::free_bytes</definition>
        <argsstring></argsstring>
        <name>free_bytes</name>
        <qualifiedname>pyfolio::memory::PoolStats::free_bytes</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="35" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1ae98238f8775b0e919c6b4d8215d4e74e" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t pyfolio::memory::PoolStats::num_allocations</definition>
        <argsstring></argsstring>
        <name>num_allocations</name>
        <qualifiedname>pyfolio::memory::PoolStats::num_allocations</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="36" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1a6a6ccdc9194e596a04a5a081ddd46fba" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t pyfolio::memory::PoolStats::num_deallocations</definition>
        <argsstring></argsstring>
        <name>num_deallocations</name>
        <qualifiedname>pyfolio::memory::PoolStats::num_deallocations</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="37" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1a69f137bcce1d66f2627342ae67c6201c" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t pyfolio::memory::PoolStats::num_pools</definition>
        <argsstring></argsstring>
        <name>num_pools</name>
        <qualifiedname>pyfolio::memory::PoolStats::num_pools</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="38" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1a110ba406e14dfb0957a33b1b3fb8f6ba" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t pyfolio::memory::PoolStats::largest_allocation</definition>
        <argsstring></argsstring>
        <name>largest_allocation</name>
        <qualifiedname>pyfolio::memory::PoolStats::largest_allocation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="39" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1a1059a26d60f94bb7296623ca71a3c257" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double pyfolio::memory::PoolStats::fragmentation_ratio</definition>
        <argsstring></argsstring>
        <name>fragmentation_ratio</name>
        <qualifiedname>pyfolio::memory::PoolStats::fragmentation_ratio</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="40" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="40" bodyend="-1"/>
        <referencedby refid="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1af8e4dca54a125eb3ec577f95dd5b050b" compoundref="df/d9d/pool__allocator_8h" startline="54" endline="54">needs_cleanup</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1a162063f9d304ff29a684bc75a260e8ea" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>double</type>
        <definition>double pyfolio::memory::PoolStats::efficiency</definition>
        <argsstring>() const noexcept</argsstring>
        <name>efficiency</name>
        <qualifiedname>pyfolio::memory::PoolStats::efficiency</qualifiedname>
        <briefdescription>
<para>Get memory efficiency percentage. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="45" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="45" bodyend="49"/>
        <references refid="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1a1a7605bc4ca140295ea793b7f8ee0f48" compoundref="df/d9d/pool__allocator_8h" startline="33">total_allocated_bytes</references>
        <references refid="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1ad0a07585188b87e53aab755eb2587e35" compoundref="df/d9d/pool__allocator_8h" startline="34">used_bytes</references>
        <referencedby refid="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1af8e4dca54a125eb3ec577f95dd5b050b" compoundref="df/d9d/pool__allocator_8h" startline="54" endline="54">needs_cleanup</referencedby>
      </memberdef>
      <memberdef kind="function" id="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1af8e4dca54a125eb3ec577f95dd5b050b" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool pyfolio::memory::PoolStats::needs_cleanup</definition>
        <argsstring>() const noexcept</argsstring>
        <name>needs_cleanup</name>
        <qualifiedname>pyfolio::memory::PoolStats::needs_cleanup</qualifiedname>
        <briefdescription>
<para>Check if pool needs cleanup. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="54" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="54" bodyend="54"/>
        <references refid="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1a162063f9d304ff29a684bc75a260e8ea" compoundref="df/d9d/pool__allocator_8h" startline="45" endline="49">efficiency</references>
        <references refid="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1a1059a26d60f94bb7296623ca71a3c257" compoundref="df/d9d/pool__allocator_8h" startline="40">fragmentation_ratio</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>High-performance memory pool allocator for financial data structures. </para>
    </briefdescription>
    <detaileddescription>
<para>This allocator is designed for high-frequency trading scenarios where allocation speed is critical and memory fragmentation must be minimized.</para>
<para>Features:<itemizedlist>
<listitem><para>O(1) allocation and deallocation</para>
</listitem><listitem><para>Thread-safe operations</para>
</listitem><listitem><para>Memory alignment support</para>
</listitem><listitem><para>Configurable pool sizes</para>
</listitem><listitem><para>Memory usage tracking</para>
</listitem><listitem><para>Automatic growth when needed</para>
</listitem></itemizedlist>
</para>
<para>Memory pool statistics </para>
    </detaileddescription>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" line="32" column="1" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/memory/pool_allocator.h" bodystart="32" bodyend="55"/>
    <listofallmembers>
      <member refid="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1a162063f9d304ff29a684bc75a260e8ea" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolStats</scope><name>efficiency</name></member>
      <member refid="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1a1059a26d60f94bb7296623ca71a3c257" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolStats</scope><name>fragmentation_ratio</name></member>
      <member refid="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1a5dfd0b66da676d53cd8fddd5c847b552" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolStats</scope><name>free_bytes</name></member>
      <member refid="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1a110ba406e14dfb0957a33b1b3fb8f6ba" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolStats</scope><name>largest_allocation</name></member>
      <member refid="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1af8e4dca54a125eb3ec577f95dd5b050b" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolStats</scope><name>needs_cleanup</name></member>
      <member refid="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1ae98238f8775b0e919c6b4d8215d4e74e" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolStats</scope><name>num_allocations</name></member>
      <member refid="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1a6a6ccdc9194e596a04a5a081ddd46fba" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolStats</scope><name>num_deallocations</name></member>
      <member refid="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1a69f137bcce1d66f2627342ae67c6201c" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolStats</scope><name>num_pools</name></member>
      <member refid="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1a1a7605bc4ca140295ea793b7f8ee0f48" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolStats</scope><name>total_allocated_bytes</name></member>
      <member refid="d9/d8e/structpyfolio_1_1memory_1_1PoolStats_1ad0a07585188b87e53aab755eb2587e35" prot="public" virt="non-virtual"><scope>pyfolio::memory::PoolStats</scope><name>used_bytes</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
