<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d2/dff/API__REFERENCE_8md" kind="file" language="Markdown">
    <compoundname>API_REFERENCE.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>Pyfolio<sp/>C++<sp/>API<sp/>Reference</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Complete<sp/>reference<sp/>for<sp/>the<sp/>Pyfolio<sp/>C++<sp/>financial<sp/>analysis<sp/>library.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Quick<sp/>Navigation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>[Core<sp/>Components](#core-components)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[Performance<sp/>Analysis](#performance-analysis)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[Risk<sp/>Management](#risk-management)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[Portfolio<sp/>Attribution](#portfolio-attribution)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[Data<sp/>Structures](#data-structures)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[Utilities](#utilities)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[Examples](#examples)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Core<sp/>Components</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>TimeSeries&lt;T&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">High-performance<sp/>time<sp/>series<sp/>container<sp/>optimized<sp/>for<sp/>financial<sp/>data.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pyfolio/core/time_series.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>TimeSeries<sp/>{</highlight></codeline>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Construction</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TimeSeries();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TimeSeries(const<sp/>std::vector&lt;DateTime&gt;&amp;<sp/>timestamps,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::vector&lt;T&gt;&amp;<sp/>values,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::string&amp;<sp/>name<sp/>=<sp/>&quot;&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Factory<sp/>methods<sp/>(preferred)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Result&lt;TimeSeries&lt;T&gt;&gt;<sp/>create(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::vector&lt;DateTime&gt;&amp;<sp/>timestamps,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::vector&lt;T&gt;&amp;<sp/>values,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::string&amp;<sp/>name<sp/>=<sp/>&quot;&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Capacity</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>size_type<sp/>size()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>bool<sp/>empty()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>reserve(size_type<sp/>n);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Element<sp/>access</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>const<sp/>T&amp;<sp/>operator[](size_type<sp/>index)<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>T&amp;<sp/>at(size_type<sp/>index)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>const<sp/>DateTime&amp;<sp/>timestamp(size_type<sp/>index)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Modifiers</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>push_back(const<sp/>DateTime&amp;<sp/>timestamp,<sp/>const<sp/>T&amp;<sp/>value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;void&gt;<sp/>try_push_back(const<sp/>DateTime&amp;<sp/>timestamp,<sp/>const<sp/>T&amp;<sp/>value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Operations</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;TimeSeries&lt;T&gt;&gt;<sp/>slice(const<sp/>DateTime&amp;<sp/>start,<sp/>const<sp/>DateTime&amp;<sp/>end)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;TimeSeries&lt;T&gt;&gt;<sp/>resample(Frequency<sp/>target_freq)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Rolling<sp/>operations<sp/>(O(n)<sp/>complexity)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;TimeSeries&lt;T&gt;&gt;<sp/>rolling_mean(size_type<sp/>window)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;TimeSeries&lt;T&gt;&gt;<sp/>rolling_std(size_type<sp/>window)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;TimeSeries&lt;T&gt;&gt;<sp/>rolling_min(size_type<sp/>window)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;TimeSeries&lt;T&gt;&gt;<sp/>rolling_max(size_type<sp/>window)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Statistical<sp/>operations<sp/>(SIMD-optimized)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;T&gt;<sp/>mean()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;T&gt;<sp/>std()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;double&gt;<sp/>correlation(const<sp/>TimeSeries&lt;T&gt;&amp;<sp/>other)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Financial<sp/>operations</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;TimeSeries&lt;Return&gt;&gt;<sp/>returns()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;TimeSeries&lt;T&gt;&gt;<sp/>cumulative_returns()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Alignment<sp/>and<sp/>missing<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;std::pair&lt;TimeSeries&lt;T&gt;,<sp/>TimeSeries&lt;T&gt;&gt;&gt;<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>align(const<sp/>TimeSeries&lt;T&gt;&amp;<sp/>other)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;TimeSeries&lt;T&gt;&gt;<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill_missing(const<sp/>std::vector&lt;DateTime&gt;&amp;<sp/>target_dates,<sp/>FillMethod<sp/>method)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>SIMD<sp/>arithmetic<sp/>operations</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;TimeSeries&lt;T&gt;&gt;<sp/>operator+(const<sp/>TimeSeries&lt;T&gt;&amp;<sp/>other)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;TimeSeries&lt;T&gt;&gt;<sp/>operator-(const<sp/>TimeSeries&lt;T&gt;&amp;<sp/>other)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;TimeSeries&lt;T&gt;&gt;<sp/>operator*(const<sp/>TimeSeries&lt;T&gt;&amp;<sp/>other)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;TimeSeries&lt;T&gt;&gt;<sp/>operator*(T<sp/>scalar)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;T&gt;<sp/>dot(const<sp/>TimeSeries&lt;T&gt;&amp;<sp/>other)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Performance<sp/>Notes:**</highlight></codeline>
<codeline><highlight class="normal">-<sp/>All<sp/>operations<sp/>are<sp/>SIMD-optimized<sp/>for<sp/>`double`<sp/>type</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Rolling<sp/>operations<sp/>use<sp/>O(n)<sp/>algorithms<sp/>with<sp/>efficient<sp/>sliding<sp/>windows</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Memory<sp/>layout<sp/>optimized<sp/>for<sp/>cache<sp/>efficiency</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Result&lt;T&gt;<sp/>Error<sp/>Handling</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Robust<sp/>error<sp/>handling<sp/>without<sp/>exceptions.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pyfolio/core/error_handling.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>Result<sp/>{</highlight></codeline>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>state</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>bool<sp/>is_ok()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>bool<sp/>is_error()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Access<sp/>value<sp/>(only<sp/>when<sp/>is_ok())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>const<sp/>T&amp;<sp/>value()<sp/>const<sp/>&amp;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>T&amp;<sp/>value()<sp/>&amp;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>T&amp;&amp;<sp/>value()<sp/>&amp;&amp;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Access<sp/>error<sp/>(only<sp/>when<sp/>is_error())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>const<sp/>Error&amp;<sp/>error()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Factory<sp/>methods</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Result&lt;T&gt;<sp/>success(T&amp;&amp;<sp/>value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Result&lt;T&gt;<sp/>error(ErrorCode<sp/>code,<sp/>const<sp/>std::string&amp;<sp/>message);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Monadic<sp/>operations</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>F&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>map(F&amp;&amp;<sp/>func)<sp/>const<sp/>-&gt;<sp/>Result&lt;decltype(func(value()))&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>F&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>and_then(F&amp;&amp;<sp/>func)<sp/>const<sp/>-&gt;<sp/>decltype(func(value()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>value_or(const<sp/>T&amp;<sp/>default_value)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Common<sp/>usage<sp/>pattern</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>result<sp/>=<sp/>risky_operation();</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(result.is_error())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;Error:<sp/>&quot;<sp/>&lt;&lt;<sp/>result.error().message<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>value<sp/>=<sp/>result.value();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>DateTime<sp/>Handling</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Financial<sp/>calendar-aware<sp/>date/time<sp/>operations.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pyfolio/core/datetime.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">class<sp/>DateTime<sp/>{</highlight></codeline>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Construction</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DateTime();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>explicit<sp/>DateTime(std::chrono::system_clock::time_point<sp/>tp);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DateTime(int<sp/>year,<sp/>int<sp/>month,<sp/>int<sp/>day);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Parsing</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Result&lt;DateTime&gt;<sp/>parse(const<sp/>std::string&amp;<sp/>date_str);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>Result&lt;DateTime&gt;<sp/>parse(const<sp/>std::string&amp;<sp/>date_str,<sp/>const<sp/>std::string&amp;<sp/>format);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Conversion</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>to_string()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::system_clock::time_point<sp/>to_time_point()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::year_month_day<sp/>to_date()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Business<sp/>day<sp/>operations</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DateTime<sp/>next_business_day()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DateTime<sp/>previous_business_day()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>is_business_day()<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Calendar<sp/>operations</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DateTime<sp/>add_days(int<sp/>days)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DateTime<sp/>add_months(int<sp/>months)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>DateTime<sp/>add_years(int<sp/>years)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Comparison</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>operator&lt;=&gt;(const<sp/>DateTime&amp;<sp/>other)<sp/>const<sp/>=<sp/>default;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Performance<sp/>Analysis</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Basic<sp/>Metrics</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pyfolio/performance/ratios.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>pyfolio::performance<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Risk-adjusted<sp/>returns</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;double&gt;<sp/>sharpe_ratio(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>risk_free_rate<sp/>=<sp/>0.02);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;double&gt;<sp/>sortino_ratio(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>target_return<sp/>=<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;double&gt;<sp/>calmar_ratio(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;double&gt;<sp/>information_ratio(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>portfolio_returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>benchmark_returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Basic<sp/>metrics</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;double&gt;<sp/>total_return(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;double&gt;<sp/>annual_return(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>periods_per_year<sp/>=<sp/>252);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;double&gt;<sp/>volatility(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>periods_per_year<sp/>=<sp/>252);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Advanced<sp/>metrics</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;double&gt;<sp/>omega_ratio(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>threshold<sp/>=<sp/>0.0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;double&gt;<sp/>tail_ratio(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Drawdown<sp/>Analysis</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pyfolio/performance/drawdown.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>pyfolio::performance<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>DrawdownInfo<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>max_drawdown;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///&lt;<sp/>Maximum<sp/>drawdown<sp/>value</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DateTime<sp/>peak_date;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///&lt;<sp/>Date<sp/>of<sp/>peak<sp/>before<sp/>drawdown</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DateTime<sp/>trough_date;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///&lt;<sp/>Date<sp/>of<sp/>maximum<sp/>drawdown</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DateTime<sp/>recovery_date;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>///&lt;<sp/>Date<sp/>of<sp/>recovery<sp/>(if<sp/>any)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>duration_days;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///&lt;<sp/>Duration<sp/>in<sp/>days</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>recovered;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///&lt;<sp/>Whether<sp/>drawdown<sp/>recovered</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;double&gt;<sp/>max_drawdown(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;TimeSeries&lt;double&gt;&gt;<sp/>drawdown_series(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;std::vector&lt;DrawdownInfo&gt;&gt;<sp/>drawdown_periods(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>min_drawdown<sp/>=<sp/>0.01);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;DrawdownInfo&gt;<sp/>worst_drawdown(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Comprehensive<sp/>Analysis</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pyfolio/analytics/performance_metrics.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>pyfolio::analytics<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>PerformanceMetrics<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>total_return;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///&lt;<sp/>Cumulative<sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>annual_return;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>///&lt;<sp/>Annualized<sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>annual_volatility;<sp/><sp/><sp/>///&lt;<sp/>Annualized<sp/>volatility</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>sharpe_ratio;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///&lt;<sp/>Sharpe<sp/>ratio</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>sortino_ratio;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>///&lt;<sp/>Sortino<sp/>ratio</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>max_drawdown;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///&lt;<sp/>Maximum<sp/>drawdown</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>calmar_ratio;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///&lt;<sp/>Calmar<sp/>ratio</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>skewness;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///&lt;<sp/>Return<sp/>skewness</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>kurtosis;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///&lt;<sp/>Return<sp/>kurtosis</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>var_95;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///&lt;<sp/>95%<sp/>Value<sp/>at<sp/>Risk</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>var_99;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///&lt;<sp/>99%<sp/>Value<sp/>at<sp/>Risk</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>beta;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///&lt;<sp/>Beta<sp/>vs<sp/>benchmark</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>alpha;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///&lt;<sp/>Alpha<sp/>vs<sp/>benchmark</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>information_ratio;<sp/><sp/><sp/>///&lt;<sp/>Information<sp/>ratio</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>...<sp/>additional<sp/>metrics</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;PerformanceMetrics&gt;<sp/>calculate_performance_metrics(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::optional&lt;TimeSeries&lt;Return&gt;&gt;&amp;<sp/>benchmark<sp/>=<sp/>std::nullopt,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>risk_free_rate<sp/>=<sp/>0.02,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>periods_per_year<sp/>=<sp/>252);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;TimeSeries&lt;PerformanceMetrics&gt;&gt;<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calculate_rolling_performance_metrics(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>window<sp/>=<sp/>252,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::optional&lt;TimeSeries&lt;Return&gt;&gt;&amp;<sp/>benchmark<sp/>=<sp/>std::nullopt,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>risk_free_rate<sp/>=<sp/>0.02);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Risk<sp/>Management</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Value<sp/>at<sp/>Risk</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pyfolio/risk/var.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>pyfolio::risk<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>class<sp/>VaRMethod<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Historical,<sp/><sp/><sp/><sp/><sp/>///&lt;<sp/>Historical<sp/>simulation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parametric,<sp/><sp/><sp/><sp/><sp/>///&lt;<sp/>Normal<sp/>distribution<sp/>assumption</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MonteCarlo<sp/><sp/><sp/><sp/><sp/><sp/>///&lt;<sp/>Monte<sp/>Carlo<sp/>simulation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;double&gt;<sp/>value_at_risk(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>confidence_level<sp/>=<sp/>0.95,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VaRMethod<sp/>method<sp/>=<sp/>VaRMethod::Historical);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;double&gt;<sp/>conditional_var(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>confidence_level<sp/>=<sp/>0.95,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VaRMethod<sp/>method<sp/>=<sp/>VaRMethod::Historical);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;TimeSeries&lt;double&gt;&gt;<sp/>rolling_var(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>window<sp/>=<sp/>252,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>confidence_level<sp/>=<sp/>0.95);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Stress<sp/>testing</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;std::map&lt;std::string,<sp/>double&gt;&gt;<sp/>stress_test(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::vector&lt;std::pair&lt;std::string,<sp/>TimeSeries&lt;Return&gt;&gt;&gt;&amp;<sp/>scenarios);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Factor<sp/>Exposure</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pyfolio/risk/factor_exposure.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>pyfolio::risk<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>FactorExposure<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>double&gt;<sp/>exposures;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>r_squared;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>tracking_error;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimeSeries&lt;double&gt;<sp/>residuals;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;FactorExposure&gt;<sp/>calculate_factor_exposure(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>portfolio_returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::map&lt;std::string,<sp/>TimeSeries&lt;Return&gt;&gt;&amp;<sp/>factor_returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;double&gt;<sp/>beta(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>portfolio_returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>market_returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;double&gt;<sp/>alpha(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>portfolio_returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>market_returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>risk_free_rate<sp/>=<sp/>0.02);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Portfolio<sp/>Attribution</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Brinson<sp/>Attribution</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pyfolio/attribution/brinson.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>pyfolio::attribution<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>AttributionResult<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>allocation_effect;<sp/><sp/><sp/>///&lt;<sp/>Asset<sp/>allocation<sp/>effect</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>selection_effect;<sp/><sp/><sp/><sp/>///&lt;<sp/>Security<sp/>selection<sp/>effect</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>interaction_effect;<sp/><sp/>///&lt;<sp/>Interaction<sp/>effect</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>total_active_return;<sp/>///&lt;<sp/>Total<sp/>active<sp/>return</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;AttributionResult&gt;<sp/>brinson_attribution(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>portfolio_returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>benchmark_returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;std::map&lt;std::string,<sp/>double&gt;&gt;&amp;<sp/>portfolio_weights,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;std::map&lt;std::string,<sp/>double&gt;&gt;&amp;<sp/>benchmark_weights,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;std::map&lt;std::string,<sp/>Return&gt;&gt;&amp;<sp/>sector_returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Multi-period<sp/>attribution</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;TimeSeries&lt;AttributionResult&gt;&gt;<sp/>rolling_attribution(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>portfolio_returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>benchmark_returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>PositionSeries&amp;<sp/>positions,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>window<sp/>=<sp/>252);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Data<sp/>Structures</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Core<sp/>Types</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pyfolio/core/types.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Financial<sp/>value<sp/>types</highlight></codeline>
<codeline><highlight class="normal">using<sp/>Price<sp/>=<sp/>double;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>Return<sp/>=<sp/>double;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>Volume<sp/>=<sp/>double;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>Shares<sp/>=<sp/>double;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>Weight<sp/>=<sp/>double;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Time<sp/>types</highlight></codeline>
<codeline><highlight class="normal">using<sp/>TimePoint<sp/>=<sp/>std::chrono::system_clock::time_point;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>Duration<sp/>=<sp/>std::chrono::system_clock::duration;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Position<sp/>data</highlight></codeline>
<codeline><highlight class="normal">struct<sp/>Position<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Symbol<sp/>symbol;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Shares<sp/>shares;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Price<sp/>price;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Weight<sp/>weight;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TimePoint<sp/>timestamp;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Transaction<sp/>data</highlight></codeline>
<codeline><highlight class="normal">struct<sp/>Transaction<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Symbol<sp/>symbol;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Shares<sp/>shares;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Price<sp/>price;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TimePoint<sp/>timestamp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Currency<sp/>currency;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>commission<sp/>=<sp/>0.0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TransactionSide<sp/>side<sp/>=<sp/>TransactionSide::Buy;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Enumerations</highlight></codeline>
<codeline><highlight class="normal">enum<sp/>class<sp/>Frequency<sp/>{<sp/>Daily,<sp/>Weekly,<sp/>Monthly,<sp/>Quarterly,<sp/>Yearly<sp/>};</highlight></codeline>
<codeline><highlight class="normal">enum<sp/>class<sp/>FillMethod<sp/>{<sp/>Forward,<sp/>Backward,<sp/>Interpolate,<sp/>Drop<sp/>};</highlight></codeline>
<codeline><highlight class="normal">enum<sp/>class<sp/>TransactionSide<sp/>{<sp/>Buy,<sp/>Sell<sp/>};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Strong<sp/>Types</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Type-safe<sp/>financial<sp/>values</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>T,<sp/>typename<sp/>Tag&gt;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>StrongType<sp/>{</highlight></codeline>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>explicit<sp/>constexpr<sp/>StrongType(const<sp/>T&amp;<sp/>value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>const<sp/>T&amp;<sp/>get()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>operator<sp/>const<sp/>T&amp;()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Arithmetic<sp/>operations</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>StrongType<sp/>operator+(const<sp/>StrongType&amp;<sp/>other)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>StrongType<sp/>operator-(const<sp/>StrongType&amp;<sp/>other)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>StrongType<sp/>operator*(const<sp/>StrongType&amp;<sp/>other)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>StrongType<sp/>operator/(const<sp/>StrongType&amp;<sp/>other)<sp/>const;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>StrongPrice<sp/>=<sp/>StrongType&lt;double,<sp/>PriceTag&gt;;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>StrongReturn<sp/>=<sp/>StrongType&lt;double,<sp/>ReturnTag&gt;;</highlight></codeline>
<codeline><highlight class="normal">using<sp/>StrongVolume<sp/>=<sp/>StrongType&lt;double,<sp/>VolumeTag&gt;;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Utilities</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Data<sp/>Loading</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pyfolio/io/data_loader.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>pyfolio::io<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;TimeSeries&lt;Return&gt;&gt;<sp/>load_returns_csv(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::string&amp;<sp/>filename,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::string&amp;<sp/>date_column<sp/>=<sp/>&quot;Date&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::string&amp;<sp/>return_column<sp/>=<sp/>&quot;Return&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;std::vector&lt;Position&gt;&gt;<sp/>load_positions_csv(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::string&amp;<sp/>filename);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;std::vector&lt;Transaction&gt;&gt;<sp/>load_transactions_csv(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::string&amp;<sp/>filename);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Save<sp/>functions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Result&lt;void&gt;<sp/>save_returns_csv(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::string&amp;<sp/>filename);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Result&lt;void&gt;<sp/>save_metrics_json(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>analytics::PerformanceMetrics&amp;<sp/>metrics,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::string&amp;<sp/>filename);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Validation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pyfolio/utils/validation.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>pyfolio::validation<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;void&gt;<sp/>validate_returns(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;void&gt;<sp/>validate_positions(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::vector&lt;Position&gt;&amp;<sp/>positions);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;void&gt;<sp/>validate_transactions(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::vector&lt;Transaction&gt;&amp;<sp/>transactions);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>for<sp/>data<sp/>quality<sp/>issues</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>struct<sp/>DataQualityReport<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>missing_values;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>outliers;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>duplicate_dates;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>warnings;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;DataQualityReport&gt;<sp/>data_quality_check(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>outlier_threshold<sp/>=<sp/>3.0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Parallel<sp/>Processing</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pyfolio/core/parallel_algorithms.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>pyfolio::parallel<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Parallel<sp/>metric<sp/>calculation</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;analytics::PerformanceMetrics&gt;<sp/>calculate_metrics(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>num_threads<sp/>=<sp/>std::thread::hardware_concurrency());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Parallel<sp/>rolling<sp/>operations</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>F&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;TimeSeries&lt;double&gt;&gt;<sp/>parallel_rolling(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>window,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F&amp;&amp;<sp/>func,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>num_threads<sp/>=<sp/>std::thread::hardware_concurrency());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Monte<sp/>Carlo<sp/>simulations</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;std::vector&lt;double&gt;&gt;<sp/>monte_carlo_var(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>TimeSeries&lt;Return&gt;&amp;<sp/>returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>confidence_level,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>num_simulations<sp/>=<sp/>10000,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>num_threads<sp/>=<sp/>std::thread::hardware_concurrency());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Examples</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Complete<sp/>Portfolio<sp/>Analysis</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pyfolio/pyfolio.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>complete_analysis_example()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>pyfolio;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Load<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>returns<sp/>=<sp/>io::load_returns_csv(&quot;portfolio.csv&quot;).value();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>benchmark<sp/>=<sp/>io::load_returns_csv(&quot;sp500.csv&quot;).value();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>positions<sp/>=<sp/>io::load_positions_csv(&quot;positions.csv&quot;).value();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Calculate<sp/>comprehensive<sp/>metrics</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>metrics<sp/>=<sp/>analytics::calculate_performance_metrics(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>returns,<sp/>benchmark,<sp/>0.025,<sp/>252).value();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;===<sp/>Portfolio<sp/>Analysis<sp/>===&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Annual<sp/>Return:<sp/>&quot;<sp/>&lt;&lt;<sp/>metrics.annual_return<sp/>*<sp/>100<sp/>&lt;&lt;<sp/>&quot;%&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Volatility:<sp/>&quot;<sp/>&lt;&lt;<sp/>metrics.annual_volatility<sp/>*<sp/>100<sp/>&lt;&lt;<sp/>&quot;%&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Sharpe<sp/>Ratio:<sp/>&quot;<sp/>&lt;&lt;<sp/>metrics.sharpe_ratio<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Max<sp/>Drawdown:<sp/>&quot;<sp/>&lt;&lt;<sp/>metrics.max_drawdown<sp/>*<sp/>100<sp/>&lt;&lt;<sp/>&quot;%&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Beta:<sp/>&quot;<sp/>&lt;&lt;<sp/>metrics.beta<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Alpha:<sp/>&quot;<sp/>&lt;&lt;<sp/>metrics.alpha<sp/>*<sp/>100<sp/>&lt;&lt;<sp/>&quot;%&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Risk<sp/>analysis</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>var_95<sp/>=<sp/>risk::value_at_risk(returns,<sp/>0.95).value();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>cvar_95<sp/>=<sp/>risk::conditional_var(returns,<sp/>0.95).value();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;\n===<sp/>Risk<sp/>Metrics<sp/>===&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;VaR<sp/>(95%):<sp/>&quot;<sp/>&lt;&lt;<sp/>var_95<sp/>*<sp/>100<sp/>&lt;&lt;<sp/>&quot;%&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;CVaR<sp/>(95%):<sp/>&quot;<sp/>&lt;&lt;<sp/>cvar_95<sp/>*<sp/>100<sp/>&lt;&lt;<sp/>&quot;%&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Save<sp/>results</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io::save_metrics_json(metrics,<sp/>&quot;analysis_results.json&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>High-Frequency<sp/>Analysis</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>high_frequency_example()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>pyfolio;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Pre-allocate<sp/>for<sp/>performance</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TimeSeries&lt;Return&gt;<sp/>returns;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>returns.reserve(100000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Use<sp/>memory<sp/>pool<sp/>for<sp/>transactions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>memory::PoolAllocator&lt;Transaction&gt;<sp/>tx_allocator(1000000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>SIMD-optimized<sp/>operations</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>correlation_matrix<sp/>=<sp/>simd::calculate_correlation_matrix(returns_matrix);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Parallel<sp/>processing</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>rolling_metrics<sp/>=<sp/>parallel::parallel_rolling(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>returns,<sp/>252,<sp/>[](auto<sp/>window)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>calculate_sharpe_ratio(window);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},<sp/>8);<sp/><sp/>//<sp/>8<sp/>threads</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Real-time<sp/>Monitoring</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;pyfolio/rest/api_server.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>real_time_example()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>namespace<sp/>pyfolio;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Create<sp/>REST<sp/>API<sp/>server</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rest::APIServer<sp/>server(8080);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Add<sp/>endpoints</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>server.add_endpoint(&quot;/metrics&quot;,<sp/>[](const<sp/>auto&amp;<sp/>returns_data)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>returns<sp/>=<sp/>parse_returns_json(returns_data);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>metrics<sp/>=<sp/>analytics::calculate_performance_metrics(returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>metrics_to_json(metrics.value());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>server.add_endpoint(&quot;/risk&quot;,<sp/>[](const<sp/>auto&amp;<sp/>returns_data)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>returns<sp/>=<sp/>parse_returns_json(returns_data);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>var<sp/>=<sp/>risk::value_at_risk(returns,<sp/>0.95);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>risk_to_json(var.value());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Start<sp/>server</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>server.start();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;API<sp/>server<sp/>running<sp/>on<sp/>http://localhost:8080&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Error<sp/>Handling<sp/>Best<sp/>Practices</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Always<sp/>check<sp/>Result&lt;T&gt;<sp/>return<sp/>values</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>result<sp/>=<sp/>risky_operation();</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(result.is_error())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>&quot;Error<sp/>[&quot;<sp/>&lt;&lt;<sp/>static_cast&lt;int&gt;(result.error().code)<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;]:<sp/>&quot;<sp/>&lt;&lt;<sp/>result.error().message<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Use<sp/>monadic<sp/>operations<sp/>for<sp/>chaining</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>final_result<sp/>=<sp/>load_data(&quot;file.csv&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.and_then([](const<sp/>auto&amp;<sp/>data)<sp/>{<sp/>return<sp/>validate_data(data);<sp/>})</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.and_then([](const<sp/>auto&amp;<sp/>data)<sp/>{<sp/>return<sp/>calculate_metrics(data);<sp/>})</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>.map([](const<sp/>auto&amp;<sp/>metrics)<sp/>{<sp/>return<sp/>format_output(metrics);<sp/>});</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Provide<sp/>default<sp/>values<sp/>when<sp/>appropriate</highlight></codeline>
<codeline><highlight class="normal">auto<sp/>sharpe<sp/>=<sp/>calculate_sharpe_ratio(returns).value_or(0.0);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>API<sp/>reference<sp/>provides<sp/>comprehensive<sp/>coverage<sp/>of<sp/>all<sp/>major<sp/>components<sp/>in<sp/>Pyfolio<sp/>C++.<sp/>For<sp/>detailed<sp/>implementation<sp/>examples,<sp/>see<sp/>the<sp/>`examples/`<sp/>directory<sp/>and<sp/>the<sp/>generated<sp/>Doxygen<sp/>documentation.</highlight></codeline>
    </programlisting>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/docs/API_REFERENCE.md"/>
  </compounddef>
</doxygen>
