<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer" kind="class" language="C++" prot="public">
    <compoundname>pyfolio::capacity::CapacityAnalyzer</compoundname>
    <includes refid="db/d26/capacity_8h" local="no">capacity.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a67a1cd462fa7c92507ce3f725c7af916" prot="private" static="no" mutable="no">
        <type><ref refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints" kindref="compound">CapacityConstraints</ref></type>
        <definition>CapacityConstraints pyfolio::capacity::CapacityAnalyzer::constraints_</definition>
        <argsstring></argsstring>
        <name>constraints_</name>
        <qualifiedname>pyfolio::capacity::CapacityAnalyzer::constraints_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" line="160" column="25" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a1c2565b19c6e5340e27b3579684b8810" prot="private" static="no" mutable="no">
        <type>std::map&lt; <ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref>, <ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure" kindref="compound">MarketMicrostructure</ref> &gt;</type>
        <definition>std::map&lt;Symbol, MarketMicrostructure&gt; pyfolio::capacity::CapacityAnalyzer::market_data_</definition>
        <argsstring></argsstring>
        <name>market_data_</name>
        <qualifiedname>pyfolio::capacity::CapacityAnalyzer::market_data_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" line="161" column="14" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1af3a8ddeb3205318d3f2dd680744b2535" prot="private" static="no" mutable="no">
        <type><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a27e2b8adc90a52a68f79f453f4cfcb70" kindref="member">ImpactModel</ref></type>
        <definition>ImpactModel pyfolio::capacity::CapacityAnalyzer::impact_model_</definition>
        <argsstring></argsstring>
        <name>impact_model_</name>
        <qualifiedname>pyfolio::capacity::CapacityAnalyzer::impact_model_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" line="162" column="17" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" bodystart="162" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a65533c7e82c1834b4dca14495689ccd3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pyfolio::capacity::CapacityAnalyzer::CapacityAnalyzer</definition>
        <argsstring>()</argsstring>
        <name>CapacityAnalyzer</name>
        <qualifiedname>pyfolio::capacity::CapacityAnalyzer::CapacityAnalyzer</qualifiedname>
        <briefdescription>
<para>Constructor with default constraints. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" line="168" column="5" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" bodystart="168" bodyend="168"/>
        <references refid="de/d7a/namespacepyfolio_1_1capacity_1a27e2b8adc90a52a68f79f453f4cfcb70ae6c1b4ee758a2636a6eaf99105103c56" compoundref="db/d26/capacity_8h" startline="20">pyfolio::capacity::SquareRoot</references>
      </memberdef>
      <memberdef kind="function" id="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a32ea7df8cd129b97da3e5c0353a16a66" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pyfolio::capacity::CapacityAnalyzer::CapacityAnalyzer</definition>
        <argsstring>(const CapacityConstraints &amp;constraints, ImpactModel model=ImpactModel::SquareRoot)</argsstring>
        <name>CapacityAnalyzer</name>
        <qualifiedname>pyfolio::capacity::CapacityAnalyzer::CapacityAnalyzer</qualifiedname>
        <param>
          <type>const <ref refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints" kindref="compound">CapacityConstraints</ref> &amp;</type>
          <declname>constraints</declname>
        </param>
        <param>
          <type><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a27e2b8adc90a52a68f79f453f4cfcb70" kindref="member">ImpactModel</ref></type>
          <declname>model</declname>
          <defval><ref refid="de/d7a/namespacepyfolio_1_1capacity_1a27e2b8adc90a52a68f79f453f4cfcb70ae6c1b4ee758a2636a6eaf99105103c56" kindref="member">ImpactModel::SquareRoot</ref></defval>
        </param>
        <briefdescription>
<para>Constructor with custom constraints. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" line="173" column="14" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" bodystart="173" bodyend="174"/>
        <references refid="de/d7a/namespacepyfolio_1_1capacity_1a27e2b8adc90a52a68f79f453f4cfcb70ae6c1b4ee758a2636a6eaf99105103c56" compoundref="db/d26/capacity_8h" startline="20">pyfolio::capacity::SquareRoot</references>
      </memberdef>
      <memberdef kind="function" id="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1adef17e1c3d7e502c966f1c94ae485807" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::capacity::CapacityAnalyzer::set_market_data</definition>
        <argsstring>(const std::map&lt; Symbol, MarketMicrostructure &gt; &amp;market_data)</argsstring>
        <name>set_market_data</name>
        <qualifiedname>pyfolio::capacity::CapacityAnalyzer::set_market_data</qualifiedname>
        <param>
          <type>const std::map&lt; <ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref>, <ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure" kindref="compound">MarketMicrostructure</ref> &gt; &amp;</type>
          <declname>market_data</declname>
        </param>
        <briefdescription>
<para>Set market microstructure data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" line="179" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" bodystart="179" bodyend="179"/>
        <referencedby refid="d1/db6/capacity__analysis__example_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="d1/db6/capacity__analysis__example_8cpp" startline="8" endline="298">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a694cef8e19c011f3d8df240f87122128" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::capacity::CapacityAnalyzer::set_constraints</definition>
        <argsstring>(const CapacityConstraints &amp;constraints)</argsstring>
        <name>set_constraints</name>
        <qualifiedname>pyfolio::capacity::CapacityAnalyzer::set_constraints</qualifiedname>
        <param>
          <type>const <ref refid="d8/de4/structpyfolio_1_1capacity_1_1CapacityConstraints" kindref="compound">CapacityConstraints</ref> &amp;</type>
          <declname>constraints</declname>
        </param>
        <briefdescription>
<para>Update constraints. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" line="184" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" bodystart="184" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a520ddf5e6d98e79e3db51abca6520e6f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult" kindref="compound">SecurityCapacityResult</ref> &gt;</type>
        <definition>Result&lt; SecurityCapacityResult &gt; pyfolio::capacity::CapacityAnalyzer::analyze_security_capacity</definition>
        <argsstring>(const Symbol &amp;symbol, double target_position_dollars, double current_price) const</argsstring>
        <name>analyze_security_capacity</name>
        <qualifiedname>pyfolio::capacity::CapacityAnalyzer::analyze_security_capacity</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref> &amp;</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>double</type>
          <declname>target_position_dollars</declname>
        </param>
        <param>
          <type>double</type>
          <declname>current_price</declname>
        </param>
        <briefdescription>
<para>Analyze capacity for a single security. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" line="189" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" bodystart="189" bodyend="248"/>
        <references refid="de/d7a/namespacepyfolio_1_1capacity_1a47fe4ae8e1af66983423eb3a65e794d2a6affe9fb84fe77609721559509385e9f" compoundref="db/d26/capacity_8h" startline="27">pyfolio::capacity::ADVMultiple</references>
        <references refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a389a3702a53db9eff776beb706deb4d4" compoundref="db/d26/capacity_8h" startline="100">pyfolio::capacity::SecurityCapacityResult::binding_constraint</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ac8b314f8260631194c00bb76436691be" compoundref="db/d26/capacity_8h" startline="96">pyfolio::capacity::SecurityCapacityResult::estimated_impact_cost</references>
        <references refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ab479ef8d4422dd806e80b15e192a9712" compoundref="db/d26/capacity_8h" startline="97">pyfolio::capacity::SecurityCapacityResult::estimated_spread_cost</references>
        <references refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ab252e22ddd9776712d14e3a504258ac7" compoundref="db/d26/capacity_8h" startline="99">pyfolio::capacity::SecurityCapacityResult::estimated_trading_days</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad492e2c2490fcbf8a16aba55f377dc76" compoundref="d3/d11/error__handling_8h" startline="24">pyfolio::InvalidSymbol</references>
        <references refid="de/d7a/namespacepyfolio_1_1capacity_1a47fe4ae8e1af66983423eb3a65e794d2abbcd884c8def404daf754bd9c4a14b73" compoundref="db/d26/capacity_8h" startline="29">pyfolio::capacity::MarketCapPercent</references>
        <references refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a966e1e155dd9eb03509fa5caeacc5ec2" compoundref="db/d26/capacity_8h" startline="95">pyfolio::capacity::SecurityCapacityResult::max_daily_trade_dollars</references>
        <references refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a2145a89f4266bb8541491b55b28af4c7" compoundref="db/d26/capacity_8h" startline="94">pyfolio::capacity::SecurityCapacityResult::max_daily_trade_shares</references>
        <references refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1af687e13280acf397f40f6276f025368f" compoundref="db/d26/capacity_8h" startline="93">pyfolio::capacity::SecurityCapacityResult::max_position_dollars</references>
        <references refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1aa057083e32ff5751ea284ec4c9de98f9" compoundref="db/d26/capacity_8h" startline="92">pyfolio::capacity::SecurityCapacityResult::max_position_shares</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1ae8a14a64fe52370085a62aa505640e40" compoundref="db/d26/capacity_8h" startline="91">pyfolio::capacity::SecurityCapacityResult::symbol</references>
        <references refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult_1a859948af3e6c74ff291b4ec2dfc951aa" compoundref="db/d26/capacity_8h" startline="98">pyfolio::capacity::SecurityCapacityResult::total_trading_cost</references>
        <referencedby refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a9b770c687ae049208149c5023b673cc2" compoundref="db/d26/capacity_8h" startline="253" endline="310">analyze_portfolio_capacity</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a9b770c687ae049208149c5023b673cc2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult" kindref="compound">PortfolioCapacityResult</ref> &gt;</type>
        <definition>Result&lt; PortfolioCapacityResult &gt; pyfolio::capacity::CapacityAnalyzer::analyze_portfolio_capacity</definition>
        <argsstring>(const std::map&lt; Symbol, double &gt; &amp;target_weights, double total_portfolio_value, const std::map&lt; Symbol, double &gt; &amp;current_prices) const</argsstring>
        <name>analyze_portfolio_capacity</name>
        <qualifiedname>pyfolio::capacity::CapacityAnalyzer::analyze_portfolio_capacity</qualifiedname>
        <param>
          <type>const std::map&lt; <ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref>, double &gt; &amp;</type>
          <declname>target_weights</declname>
        </param>
        <param>
          <type>double</type>
          <declname>total_portfolio_value</declname>
        </param>
        <param>
          <type>const std::map&lt; <ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref>, double &gt; &amp;</type>
          <declname>current_prices</declname>
        </param>
        <briefdescription>
<para>Analyze portfolio capacity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" line="253" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" bodystart="253" bodyend="310"/>
        <references refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a520ddf5e6d98e79e3db51abca6520e6f" compoundref="db/d26/capacity_8h" startline="189" endline="248">analyze_security_capacity</references>
        <references refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a74f91f94495bef5ef107b05807bc2fa6" compoundref="db/d26/capacity_8h" startline="126">pyfolio::capacity::PortfolioCapacityResult::average_trading_days</references>
        <references refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1aeb03b7c4e0abf3cf5bd0407ebcb5ba7b" compoundref="db/d26/capacity_8h" startline="127">pyfolio::capacity::PortfolioCapacityResult::capacity_constrained_securities</references>
        <references refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a750cc6109d3ed0951ad2146f3f9bc294" compoundref="db/d26/capacity_8h" startline="124">pyfolio::capacity::PortfolioCapacityResult::capacity_utilization</references>
        <references refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a54cb8b43d5e9bfa608c398795c6ae3e0" compoundref="db/d26/capacity_8h" startline="123">pyfolio::capacity::PortfolioCapacityResult::current_portfolio_size</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a2f9ab3f412568628188acf5bd5a430c4" compoundref="d3/d11/error__handling_8h" startline="111" endline="116">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1aafe774082562f921d30c23d914a94cb1" compoundref="db/d26/capacity_8h" startline="121">pyfolio::capacity::PortfolioCapacityResult::security_results</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1ac591b48910113cee1fd214b9b0895d60" compoundref="db/d26/capacity_8h" startline="125">pyfolio::capacity::PortfolioCapacityResult::total_estimated_costs</references>
        <references refid="de/d9b/structpyfolio_1_1capacity_1_1PortfolioCapacityResult_1a2f46c37a8471bee6936b396b02b2cba2" compoundref="db/d26/capacity_8h" startline="122">pyfolio::capacity::PortfolioCapacityResult::total_portfolio_capacity</references>
        <referencedby refid="d1/db6/capacity__analysis__example_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="d1/db6/capacity__analysis__example_8cpp" startline="8" endline="298">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1af897e871af916ea97b6e63d64d016be8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; double &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; double &gt; &gt; pyfolio::capacity::CapacityAnalyzer::calculate_capacity_decay</definition>
        <argsstring>(const Symbol &amp;symbol, double initial_capacity, const TimeSeries&lt; double &gt; &amp;volume_series) const</argsstring>
        <name>calculate_capacity_decay</name>
        <qualifiedname>pyfolio::capacity::CapacityAnalyzer::calculate_capacity_decay</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref> &amp;</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>double</type>
          <declname>initial_capacity</declname>
        </param>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; double &gt; &amp;</type>
          <declname>volume_series</declname>
        </param>
        <briefdescription>
<para>Calculate capacity decay over time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" line="315" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" bodystart="315" bodyend="346"/>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad492e2c2490fcbf8a16aba55f377dc76" compoundref="d3/d11/error__handling_8h" startline="24">pyfolio::InvalidSymbol</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0374bbc62bd808749ac476b3af4b0ead" compoundref="d8/d51/time__series_8h" startline="124" endline="124">pyfolio::TimeSeries&lt; T &gt;::timestamps</references>
      </memberdef>
      <memberdef kind="function" id="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a52e0e4938b3ac0b5f51fbce2ca91fe6b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>Result&lt; std::vector&lt; double &gt; &gt; pyfolio::capacity::CapacityAnalyzer::simulate_trading_impact</definition>
        <argsstring>(const Symbol &amp;symbol, const transactions::TransactionSeries &amp;transactions, double initial_capacity) const</argsstring>
        <name>simulate_trading_impact</name>
        <qualifiedname>pyfolio::capacity::CapacityAnalyzer::simulate_trading_impact</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref> &amp;</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>const <ref refid="d6/d6e/classpyfolio_1_1transactions_1_1TransactionSeries" kindref="compound">transactions::TransactionSeries</ref> &amp;</type>
          <declname>transactions</declname>
        </param>
        <param>
          <type>double</type>
          <declname>initial_capacity</declname>
        </param>
        <briefdescription>
<para>Simulate trading impact on capacity. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" line="351" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" bodystart="351" bodyend="385"/>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a9e32e294e8358345f2b9b52b7f8b41fa" compoundref="d3/d11/error__handling_8h" startline="18">pyfolio::InsufficientData</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad492e2c2490fcbf8a16aba55f377dc76" compoundref="d3/d11/error__handling_8h" startline="24">pyfolio::InvalidSymbol</references>
        <referencedby refid="d1/db6/capacity__analysis__example_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="d1/db6/capacity__analysis__example_8cpp" startline="8" endline="298">main</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a77819b69d0317b6fe5e7b1262afaaca0" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; <ref refid="d9/d58/structpyfolio_1_1capacity_1_1SecurityCapacityResult" kindref="compound">SecurityCapacityResult</ref> &gt;</type>
        <definition>std::optional&lt; SecurityCapacityResult &gt; pyfolio::capacity::CapacityAnalyzer::optimize_position_size</definition>
        <argsstring>(const Symbol &amp;symbol, double target_dollars, double current_price, const MarketMicrostructure &amp;market_data) const</argsstring>
        <name>optimize_position_size</name>
        <qualifiedname>pyfolio::capacity::CapacityAnalyzer::optimize_position_size</qualifiedname>
        <param>
          <type>const <ref refid="d7/df8/namespacepyfolio_1a66e3e2ebe494a9dccbeb419408aaf7ea" kindref="member">Symbol</ref> &amp;</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>double</type>
          <declname>target_dollars</declname>
        </param>
        <param>
          <type>double</type>
          <declname>current_price</declname>
        </param>
        <param>
          <type>const <ref refid="dc/d43/structpyfolio_1_1capacity_1_1MarketMicrostructure" kindref="compound">MarketMicrostructure</ref> &amp;</type>
          <declname>market_data</declname>
        </param>
        <briefdescription>
<para>Optimize position size to meet constraints. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" line="391" column="19" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" bodystart="391" bodyend="443"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Advanced capacity analyzer. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" line="158" column="1" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/capacity/capacity.h" bodystart="158" bodyend="444"/>
    <listofallmembers>
      <member refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a9b770c687ae049208149c5023b673cc2" prot="public" virt="non-virtual"><scope>pyfolio::capacity::CapacityAnalyzer</scope><name>analyze_portfolio_capacity</name></member>
      <member refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a520ddf5e6d98e79e3db51abca6520e6f" prot="public" virt="non-virtual"><scope>pyfolio::capacity::CapacityAnalyzer</scope><name>analyze_security_capacity</name></member>
      <member refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1af897e871af916ea97b6e63d64d016be8" prot="public" virt="non-virtual"><scope>pyfolio::capacity::CapacityAnalyzer</scope><name>calculate_capacity_decay</name></member>
      <member refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a65533c7e82c1834b4dca14495689ccd3" prot="public" virt="non-virtual"><scope>pyfolio::capacity::CapacityAnalyzer</scope><name>CapacityAnalyzer</name></member>
      <member refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a32ea7df8cd129b97da3e5c0353a16a66" prot="public" virt="non-virtual"><scope>pyfolio::capacity::CapacityAnalyzer</scope><name>CapacityAnalyzer</name></member>
      <member refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a67a1cd462fa7c92507ce3f725c7af916" prot="private" virt="non-virtual"><scope>pyfolio::capacity::CapacityAnalyzer</scope><name>constraints_</name></member>
      <member refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1af3a8ddeb3205318d3f2dd680744b2535" prot="private" virt="non-virtual"><scope>pyfolio::capacity::CapacityAnalyzer</scope><name>impact_model_</name></member>
      <member refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a1c2565b19c6e5340e27b3579684b8810" prot="private" virt="non-virtual"><scope>pyfolio::capacity::CapacityAnalyzer</scope><name>market_data_</name></member>
      <member refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a77819b69d0317b6fe5e7b1262afaaca0" prot="private" virt="non-virtual"><scope>pyfolio::capacity::CapacityAnalyzer</scope><name>optimize_position_size</name></member>
      <member refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a694cef8e19c011f3d8df240f87122128" prot="public" virt="non-virtual"><scope>pyfolio::capacity::CapacityAnalyzer</scope><name>set_constraints</name></member>
      <member refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1adef17e1c3d7e502c966f1c94ae485807" prot="public" virt="non-virtual"><scope>pyfolio::capacity::CapacityAnalyzer</scope><name>set_market_data</name></member>
      <member refid="d2/d15/classpyfolio_1_1capacity_1_1CapacityAnalyzer_1a52e0e4938b3ac0b5f51fbce2ca91fe6b" prot="public" virt="non-virtual"><scope>pyfolio::capacity::CapacityAnalyzer</scope><name>simulate_trading_impact</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
