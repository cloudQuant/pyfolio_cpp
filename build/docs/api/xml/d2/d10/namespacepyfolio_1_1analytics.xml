<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d2/d10/namespacepyfolio_1_1analytics" kind="namespace" language="C++">
    <compoundname>pyfolio::analytics</compoundname>
    <innerclass refid="d2/d63/structpyfolio_1_1analytics_1_1AdvancedTurnoverMetrics" prot="public">pyfolio::analytics::AdvancedTurnoverMetrics</innerclass>
    <innerclass refid="de/d28/structpyfolio_1_1analytics_1_1AnalysisConfig" prot="public">pyfolio::analytics::AnalysisConfig</innerclass>
    <innerclass refid="d4/dd2/structpyfolio_1_1analytics_1_1AnalysisReport" prot="public">pyfolio::analytics::AnalysisReport</innerclass>
    <innerclass refid="d6/d42/structpyfolio_1_1analytics_1_1AttributionResult" prot="public">pyfolio::analytics::AttributionResult</innerclass>
    <innerclass refid="dd/dcf/classpyfolio_1_1analytics_1_1BayesianAnalyzer" prot="public">pyfolio::analytics::BayesianAnalyzer</innerclass>
    <innerclass refid="d3/db4/structpyfolio_1_1analytics_1_1BayesianForecastResult" prot="public">pyfolio::analytics::BayesianForecastResult</innerclass>
    <innerclass refid="de/d6d/structpyfolio_1_1analytics_1_1BayesianPerformanceResult" prot="public">pyfolio::analytics::BayesianPerformanceResult</innerclass>
    <innerclass refid="d4/d98/structpyfolio_1_1analytics_1_1BayesianRegimeResult" prot="public">pyfolio::analytics::BayesianRegimeResult</innerclass>
    <innerclass refid="df/d48/structpyfolio_1_1analytics_1_1CacheConfig" prot="public">pyfolio::analytics::CacheConfig</innerclass>
    <innerclass refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator" prot="public">pyfolio::analytics::CachedPerformanceCalculator</innerclass>
    <innerclass refid="da/dd9/structpyfolio_1_1analytics_1_1CacheEntry" prot="public">pyfolio::analytics::CacheEntry</innerclass>
    <innerclass refid="d8/d97/classpyfolio_1_1analytics_1_1EnhancedTurnoverAnalyzer" prot="public">pyfolio::analytics::EnhancedTurnoverAnalyzer</innerclass>
    <innerclass refid="df/dcf/structpyfolio_1_1analytics_1_1IndicatorValue" prot="public">pyfolio::analytics::IndicatorValue</innerclass>
    <innerclass refid="d0/d6c/structpyfolio_1_1analytics_1_1MarketIndicators" prot="public">pyfolio::analytics::MarketIndicators</innerclass>
    <innerclass refid="d3/d3c/classpyfolio_1_1analytics_1_1MarketIndicatorsAnalyzer" prot="public">pyfolio::analytics::MarketIndicatorsAnalyzer</innerclass>
    <innerclass refid="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite" prot="public">pyfolio::analytics::ParallelPerformanceAnalysisSuite</innerclass>
    <innerclass refid="dd/d26/classpyfolio_1_1analytics_1_1PerformanceAnalysisSuite" prot="public">pyfolio::analytics::PerformanceAnalysisSuite</innerclass>
    <innerclass refid="de/d2e/structpyfolio_1_1analytics_1_1PerformanceMetrics" prot="public">pyfolio::analytics::PerformanceMetrics</innerclass>
    <innerclass refid="da/d0f/structpyfolio_1_1analytics_1_1PriorDistribution" prot="public">pyfolio::analytics::PriorDistribution</innerclass>
    <innerclass refid="d1/d57/structpyfolio_1_1analytics_1_1RegimeCharacteristics" prot="public">pyfolio::analytics::RegimeCharacteristics</innerclass>
    <innerclass refid="d1/d87/structpyfolio_1_1analytics_1_1RegimeDetectionResult" prot="public">pyfolio::analytics::RegimeDetectionResult</innerclass>
    <innerclass refid="d0/dfb/classpyfolio_1_1analytics_1_1RegimeDetector" prot="public">pyfolio::analytics::RegimeDetector</innerclass>
    <innerclass refid="d2/dcf/structpyfolio_1_1analytics_1_1RegimeTransition" prot="public">pyfolio::analytics::RegimeTransition</innerclass>
    <innerclass refid="d0/d81/structpyfolio_1_1analytics_1_1TurnoverResult" prot="public">pyfolio::analytics::TurnoverResult</innerclass>
    <innernamespace refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached">pyfolio::analytics::cached</innernamespace>
    <innernamespace refid="dc/d21/namespacepyfolio_1_1analytics_1_1statistics">pyfolio::analytics::statistics</innernamespace>
    <innernamespace refid="de/d0d/namespacepyfolio_1_1analytics_1_1turnover__utils">pyfolio::analytics::turnover_utils</innernamespace>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="d2/d10/namespacepyfolio_1_1analytics_1a550d713ba6be707f2120d6b9b8ff0001" prot="public" static="no" strong="yes">
        <type></type>
        <name>PriorType</name>
        <qualifiedname>pyfolio::analytics::PriorType</qualifiedname>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1a550d713ba6be707f2120d6b9b8ff0001af19516d11f2946f894070e92fcb56b6d" prot="public">
          <name>Uniform</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1a550d713ba6be707f2120d6b9b8ff0001a960b44c579bc2f6818d2daaf9e4c16f0" prot="public">
          <name>Normal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1a550d713ba6be707f2120d6b9b8ff0001aca8d881fd796beaf45a5b5a240b089e8" prot="public">
          <name>StudentT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1a550d713ba6be707f2120d6b9b8ff0001a71dac3f0f562eb0fbbfdf1e456dfad3e" prot="public">
          <name>Empirical</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1a550d713ba6be707f2120d6b9b8ff0001aceca48db179aba812cd0a398bd8568d7" prot="public">
          <name>Jeffreys</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Bayesian prior distribution types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" line="18" column="1" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" bodystart="18" bodyend="24"/>
      </memberdef>
      <memberdef kind="enum" id="d2/d10/namespacepyfolio_1_1analytics_1a51254d1fe289c5c99cc418aa26e0d5d2" prot="public" static="no" strong="yes">
        <type></type>
        <name>IndicatorType</name>
        <qualifiedname>pyfolio::analytics::IndicatorType</qualifiedname>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1a51254d1fe289c5c99cc418aa26e0d5d2af96d73e8fd3a87ab4e2fea235d3d79b0" prot="public">
          <name>VIX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1a51254d1fe289c5c99cc418aa26e0d5d2a65b8db9bf515cc37584c5bbc865298c4" prot="public">
          <name>TermSpread</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1a51254d1fe289c5c99cc418aa26e0d5d2a903f63be23b981f3d5c89a42ebc86cc2" prot="public">
          <name>CreditSpread</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1a51254d1fe289c5c99cc418aa26e0d5d2afce7f129c599a1cfc83a0e153a6ecf43" prot="public">
          <name>YieldCurveSlope</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1a51254d1fe289c5c99cc418aa26e0d5d2ad65864e8b09bc7c70dd77861c6c96421" prot="public">
          <name>PutCallRatio</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1a51254d1fe289c5c99cc418aa26e0d5d2ad148ee84ecc40a0e4b4840b09ea1f5b9" prot="public">
          <name>HighYieldSpread</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1a51254d1fe289c5c99cc418aa26e0d5d2aa500a8ab5a9f6cad5427d40d08d78fa1" prot="public">
          <name>DollarIndex</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1a51254d1fe289c5c99cc418aa26e0d5d2afdfd0e433864e681026f29ea781ecd77" prot="public">
          <name>CommodityIndex</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Market indicator types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/market_indicators.h" line="17" column="1" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/market_indicators.h" bodystart="17" bodyend="26"/>
      </memberdef>
      <memberdef kind="enum" id="d2/d10/namespacepyfolio_1_1analytics_1ac324d49fe4462ede46349d3be97bdb8a" prot="public" static="no" strong="yes">
        <type></type>
        <name>RegimeType</name>
        <qualifiedname>pyfolio::analytics::RegimeType</qualifiedname>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1ac324d49fe4462ede46349d3be97bdb8aa92c21511d7b383b2f8ba5b00c3c9a473" prot="public">
          <name>Bull</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1ac324d49fe4462ede46349d3be97bdb8aa372137ebb0d053fecd7a594ec5cb5971" prot="public">
          <name>Bear</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1ac324d49fe4462ede46349d3be97bdb8aa3e3af98b6b48c7e593d8d18863e3333b" prot="public">
          <name>Volatile</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1ac324d49fe4462ede46349d3be97bdb8aafa3aff3c185c6dc7754235f397c2099a" prot="public">
          <name>Stable</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1ac324d49fe4462ede46349d3be97bdb8aa9dc772d82afb9a5374668bd51a50cc8c" prot="public">
          <name>Crisis</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1ac324d49fe4462ede46349d3be97bdb8aad8afbc541b39d23648c823057cffe3a5" prot="public">
          <name>Recovery</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Market regime types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/regime_detection.h" line="29" column="1" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/regime_detection.h" bodystart="29" bodyend="36"/>
      </memberdef>
      <memberdef kind="enum" id="d2/d10/namespacepyfolio_1_1analytics_1a2b5238b2314b78cf335d70a61f483623" prot="public" static="no" strong="yes">
        <type></type>
        <name>TurnoverDenominator</name>
        <qualifiedname>pyfolio::analytics::TurnoverDenominator</qualifiedname>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1a2b5238b2314b78cf335d70a61f483623ac4ae8cdfc66973e53c8a1970545a3e2b" prot="public">
          <name>AGB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1a2b5238b2314b78cf335d70a61f483623af8fdd76dac43c8fc149d58f5edd42e6b" prot="public">
          <name>PortfolioValue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1a2b5238b2314b78cf335d70a61f483623a1727388a7eb25a127314827031273192" prot="public">
          <name>NetLiquidation</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="d2/d10/namespacepyfolio_1_1analytics_1a2b5238b2314b78cf335d70a61f483623ae04f80c67233d95aed971c40d10a0164" prot="public">
          <name>TotalAssets</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/turnover_enhanced.h" line="13" column="1" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/turnover_enhanced.h" bodystart="13" bodyend="18"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="d2/d10/namespacepyfolio_1_1analytics_1a08341e7b284ebb74da19938348b86a28" prot="public" static="no">
        <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="d0/d6c/structpyfolio_1_1analytics_1_1MarketIndicators" kindref="compound">MarketIndicators</ref> &gt;</type>
        <definition>using pyfolio::analytics::MarketIndicatorSeries =  TimeSeries&lt;MarketIndicators&gt;</definition>
        <argsstring></argsstring>
        <name>MarketIndicatorSeries</name>
        <qualifiedname>pyfolio::analytics::MarketIndicatorSeries</qualifiedname>
        <briefdescription>
<para>Time series of market indicators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/market_indicators.h" line="134" column="1" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/market_indicators.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/d10/namespacepyfolio_1_1analytics_1abb18ff1f67db5a5ced7beb8e9873092d" prot="public" static="no">
        <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> &gt;</type>
        <definition>using pyfolio::analytics::ReturnSeries =  TimeSeries&lt;Return&gt;</definition>
        <argsstring></argsstring>
        <name>ReturnSeries</name>
        <qualifiedname>pyfolio::analytics::ReturnSeries</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/regime_detection.h" line="23" column="1" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/regime_detection.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="d2/d10/namespacepyfolio_1_1analytics_1a57bd732d8503e2e838b6dfdaab4d141e" prot="public" static="no">
        <type><ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1a7801b507a1c22f3c1a83bdef81846fc6" kindref="member">Price</ref> &gt;</type>
        <definition>using pyfolio::analytics::PriceSeries =  TimeSeries&lt;Price&gt;</definition>
        <argsstring></argsstring>
        <name>PriceSeries</name>
        <qualifiedname>pyfolio::analytics::PriceSeries</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/regime_detection.h" line="24" column="1" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/regime_detection.h" bodystart="24" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="d2/d10/namespacepyfolio_1_1analytics_1a95e186c16759d6d2d7efae081c0edf3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator" kindref="compound">CachedPerformanceCalculator</ref> &amp;</type>
        <definition>CachedPerformanceCalculator &amp; pyfolio::analytics::get_global_cache</definition>
        <argsstring>()</argsstring>
        <name>get_global_cache</name>
        <qualifiedname>pyfolio::analytics::get_global_cache</qualifiedname>
        <briefdescription>
<para>Global cached performance calculator instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="522" column="36" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="522" bodyend="525"/>
        <referencedby refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1ab3e14536bb14d2efb02b83e4a3d2989e" compoundref="d4/dc1/cached__performance__metrics_8h" startline="577" endline="579">pyfolio::analytics::cached::clear_cache</referencedby>
        <referencedby refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1adf282fb835cd51a3c8e1258b2137f0bf" compoundref="d4/dc1/cached__performance__metrics_8h" startline="543" endline="545">pyfolio::analytics::cached::correlation</referencedby>
        <referencedby refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1a940b4befb9ec4fd40fd5aca4d3155997" compoundref="d4/dc1/cached__performance__metrics_8h" startline="570" endline="572">pyfolio::analytics::cached::get_cache_stats</referencedby>
        <referencedby refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1a721af56f260a3d1560f94f261c06352c" compoundref="d4/dc1/cached__performance__metrics_8h" startline="553" endline="555">pyfolio::analytics::cached::max_drawdown</referencedby>
        <referencedby refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1af806e5aece2fa569d3cec8ba37a4b31a" compoundref="d4/dc1/cached__performance__metrics_8h" startline="533" endline="535">pyfolio::analytics::cached::mean</referencedby>
        <referencedby refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1a19154f9f47ac8dd299519471406bd12f" compoundref="d4/dc1/cached__performance__metrics_8h" startline="558" endline="560">pyfolio::analytics::cached::rolling_mean</referencedby>
        <referencedby refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1ac72f648587fe1171805532226a3cbb5f" compoundref="d4/dc1/cached__performance__metrics_8h" startline="563" endline="565">pyfolio::analytics::cached::rolling_std</referencedby>
        <referencedby refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1a68b92ffe1367d82222e4ad30773a0fd0" compoundref="d4/dc1/cached__performance__metrics_8h" startline="548" endline="550">pyfolio::analytics::cached::sharpe_ratio</referencedby>
        <referencedby refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1a3e0d74b961f1c042079178977e61c765" compoundref="d4/dc1/cached__performance__metrics_8h" startline="538" endline="540">pyfolio::analytics::cached::std_deviation</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/d10/namespacepyfolio_1_1analytics_1abc013a1699b80479b30cddac1df1b664" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string pyfolio::analytics::indicator_type_to_string</definition>
        <argsstring>(IndicatorType type)</argsstring>
        <name>indicator_type_to_string</name>
        <qualifiedname>pyfolio::analytics::indicator_type_to_string</qualifiedname>
        <param>
          <type><ref refid="d2/d10/namespacepyfolio_1_1analytics_1a51254d1fe289c5c99cc418aa26e0d5d2" kindref="member">IndicatorType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Convert indicator type to string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/market_indicators.h" line="503" column="20" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/market_indicators.h" bodystart="503" bodyend="524"/>
        <references refid="d2/d10/namespacepyfolio_1_1analytics_1a51254d1fe289c5c99cc418aa26e0d5d2afdfd0e433864e681026f29ea781ecd77" compoundref="d4/d7b/market__indicators_8h" startline="25">CommodityIndex</references>
        <references refid="d2/d10/namespacepyfolio_1_1analytics_1a51254d1fe289c5c99cc418aa26e0d5d2a903f63be23b981f3d5c89a42ebc86cc2" compoundref="d4/d7b/market__indicators_8h" startline="20">CreditSpread</references>
        <references refid="d2/d10/namespacepyfolio_1_1analytics_1a51254d1fe289c5c99cc418aa26e0d5d2aa500a8ab5a9f6cad5427d40d08d78fa1" compoundref="d4/d7b/market__indicators_8h" startline="24">DollarIndex</references>
        <references refid="d2/d10/namespacepyfolio_1_1analytics_1a51254d1fe289c5c99cc418aa26e0d5d2ad148ee84ecc40a0e4b4840b09ea1f5b9" compoundref="d4/d7b/market__indicators_8h" startline="23">HighYieldSpread</references>
        <references refid="d2/d10/namespacepyfolio_1_1analytics_1a51254d1fe289c5c99cc418aa26e0d5d2ad65864e8b09bc7c70dd77861c6c96421" compoundref="d4/d7b/market__indicators_8h" startline="22">PutCallRatio</references>
        <references refid="d2/d10/namespacepyfolio_1_1analytics_1a51254d1fe289c5c99cc418aa26e0d5d2a65b8db9bf515cc37584c5bbc865298c4" compoundref="d4/d7b/market__indicators_8h" startline="19">TermSpread</references>
        <references refid="d2/d10/namespacepyfolio_1_1analytics_1a51254d1fe289c5c99cc418aa26e0d5d2af96d73e8fd3a87ab4e2fea235d3d79b0" compoundref="d4/d7b/market__indicators_8h" startline="18">VIX</references>
        <references refid="d2/d10/namespacepyfolio_1_1analytics_1a51254d1fe289c5c99cc418aa26e0d5d2afce7f129c599a1cfc83a0e153a6ecf43" compoundref="d4/d7b/market__indicators_8h" startline="21">YieldCurveSlope</references>
      </memberdef>
      <memberdef kind="function" id="d2/d10/namespacepyfolio_1_1analytics_1a45d2aadb6745440aca7b2b4a90712313" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite" kindref="compound">ParallelPerformanceAnalysisSuite</ref> &amp;</type>
        <definition>ParallelPerformanceAnalysisSuite &amp; pyfolio::analytics::get_global_parallel_analysis_suite</definition>
        <argsstring>()</argsstring>
        <name>get_global_parallel_analysis_suite</name>
        <qualifiedname>pyfolio::analytics::get_global_parallel_analysis_suite</qualifiedname>
        <briefdescription>
<para>Global parallel performance analysis suite instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/parallel_performance_suite.h" line="352" column="41" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/parallel_performance_suite.h" bodystart="352" bodyend="355"/>
        <referencedby refid="d2/d10/namespacepyfolio_1_1analytics_1accf2e8a2179a292346940eef67adfa3c" compoundref="dd/d71/parallel__performance__suite_8h" startline="361" endline="364">analyze_portfolio_performance_parallel</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/d10/namespacepyfolio_1_1analytics_1accf2e8a2179a292346940eef67adfa3c" prot="public" static="no" nodiscard="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d4/dd2/structpyfolio_1_1analytics_1_1AnalysisReport" kindref="compound">AnalysisReport</ref> &gt;</type>
        <definition>Result&lt; AnalysisReport &gt; pyfolio::analytics::analyze_portfolio_performance_parallel</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns, const std::optional&lt; TimeSeries&lt; T &gt; &gt; &amp;benchmark=std::nullopt)</argsstring>
        <name>analyze_portfolio_performance_parallel</name>
        <qualifiedname>pyfolio::analytics::analyze_portfolio_performance_parallel</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>const std::optional&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt; &amp;</type>
          <declname>benchmark</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
<para>Convenience function for parallel performance analysis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/parallel_performance_suite.h" line="361" column="9" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/parallel_performance_suite.h" bodystart="361" bodyend="364"/>
        <references refid="d3/d03/classpyfolio_1_1analytics_1_1ParallelPerformanceAnalysisSuite_1a7c39e9da13b225d9186ed324da6514d5" compoundref="dd/d71/parallel__performance__suite_8h" startline="158" endline="334">pyfolio::analytics::ParallelPerformanceAnalysisSuite::analyze_performance_parallel</references>
        <references refid="d2/d10/namespacepyfolio_1_1analytics_1a45d2aadb6745440aca7b2b4a90712313" compoundref="dd/d71/parallel__performance__suite_8h" startline="352" endline="355">get_global_parallel_analysis_suite</references>
      </memberdef>
      <memberdef kind="function" id="d2/d10/namespacepyfolio_1_1analytics_1a89aef52fd7efed75e7392b01745fe762" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dd/d26/classpyfolio_1_1analytics_1_1PerformanceAnalysisSuite" kindref="compound">PerformanceAnalysisSuite</ref> &amp;</type>
        <definition>PerformanceAnalysisSuite &amp; pyfolio::analytics::get_global_analysis_suite</definition>
        <argsstring>()</argsstring>
        <name>get_global_analysis_suite</name>
        <qualifiedname>pyfolio::analytics::get_global_analysis_suite</qualifiedname>
        <briefdescription>
<para>Global performance analysis suite instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_analysis_suite.h" line="450" column="33" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_analysis_suite.h" bodystart="450" bodyend="453"/>
        <referencedby refid="d2/d10/namespacepyfolio_1_1analytics_1a692d3d38854a2039ea715d0ba5ca5838" compoundref="df/de7/performance__analysis__suite_8h" startline="459" endline="462">analyze_portfolio_performance</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/d10/namespacepyfolio_1_1analytics_1a692d3d38854a2039ea715d0ba5ca5838" prot="public" static="no" nodiscard="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d4/dd2/structpyfolio_1_1analytics_1_1AnalysisReport" kindref="compound">AnalysisReport</ref> &gt;</type>
        <definition>Result&lt; AnalysisReport &gt; pyfolio::analytics::analyze_portfolio_performance</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns, const std::optional&lt; TimeSeries&lt; T &gt; &gt; &amp;benchmark=std::nullopt)</argsstring>
        <name>analyze_portfolio_performance</name>
        <qualifiedname>pyfolio::analytics::analyze_portfolio_performance</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>const std::optional&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt; &amp;</type>
          <declname>benchmark</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
<para>Convenience function for quick performance analysis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_analysis_suite.h" line="459" column="9" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_analysis_suite.h" bodystart="459" bodyend="462"/>
        <references refid="dd/d26/classpyfolio_1_1analytics_1_1PerformanceAnalysisSuite_1a2a89a113f35927f33af40fa23ed44a70" compoundref="df/de7/performance__analysis__suite_8h" startline="255" endline="403">pyfolio::analytics::PerformanceAnalysisSuite::analyze_performance</references>
        <references refid="d2/d10/namespacepyfolio_1_1analytics_1a89aef52fd7efed75e7392b01745fe762" compoundref="df/de7/performance__analysis__suite_8h" startline="450" endline="453">get_global_analysis_suite</references>
      </memberdef>
      <memberdef kind="function" id="d2/d10/namespacepyfolio_1_1analytics_1a0562de05a212709b5e0fe358e30c90d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="de/d2e/structpyfolio_1_1analytics_1_1PerformanceMetrics" kindref="compound">PerformanceMetrics</ref> &gt;</type>
        <definition>Result&lt; PerformanceMetrics &gt; pyfolio::analytics::calculate_performance_metrics</definition>
        <argsstring>(const TimeSeries&lt; Return &gt; &amp;returns, const std::optional&lt; TimeSeries&lt; Return &gt; &gt; &amp;benchmark=std::nullopt, double risk_free_rate=0.02, int periods_per_year=252)</argsstring>
        <name>calculate_performance_metrics</name>
        <qualifiedname>pyfolio::analytics::calculate_performance_metrics</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>const std::optional&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> &gt; &gt; &amp;</type>
          <declname>benchmark</declname>
          <defval>std::nullopt</defval>
        </param>
        <param>
          <type>double</type>
          <declname>risk_free_rate</declname>
          <defval>0.02</defval>
        </param>
        <param>
          <type>int</type>
          <declname>periods_per_year</declname>
          <defval>252</defval>
        </param>
        <briefdescription>
<para>Calculate comprehensive performance metrics for a return series. </para>
        </briefdescription>
        <detaileddescription>
<para>Computes all standard and advanced performance metrics used in institutional portfolio analysis. The calculation is optimized for large datasets and includes proper handling of missing data and edge cases.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>returns</parametername>
</parameternamelist>
<parameterdescription>
<para>Time series of portfolio returns (typically daily) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>benchmark</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional benchmark returns for relative metrics (beta, alpha, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>risk_free_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Annual risk-free rate (default: 2%) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>periods_per_year</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of periods per year for annualization (default: 252 for daily)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref> containing <ref refid="de/d2e/structpyfolio_1_1analytics_1_1PerformanceMetrics" kindref="compound">PerformanceMetrics</ref> on success, or <ref refid="d0/da5/structpyfolio_1_1Error" kindref="compound">Error</ref> on failure</para>
</simplesect>
<simplesect kind="note"><para>Returns must have at least 2 data points for meaningful calculations </para>
</simplesect>
<simplesect kind="note"><para>If benchmark is provided, it must have matching timestamps with returns </para>
</simplesect>
<simplesect kind="note"><para>All metrics are calculated using unbiased estimators where applicable</para>
</simplesect>
<simplesect kind="see"><para><ref refid="de/d2e/structpyfolio_1_1analytics_1_1PerformanceMetrics" kindref="compound">PerformanceMetrics</ref> for detailed description of calculated metrics </para>
</simplesect>
<simplesect kind="see"><para><ref refid="d2/d10/namespacepyfolio_1_1analytics_1a6767fe5fe2707ba7d41dcc60be71fc15" kindref="member">calculate_rolling_performance_metrics()</ref> for time-varying analysis</para>
</simplesect>
<bold>Time Complexity</bold>: O(n) where n is the number of returns <bold>Space Complexity</bold>: O(1) additional space</para>
<para><simplesect kind="par"><title>Example:</title><para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries&lt;Return&gt;</ref><sp/>portfolio_returns<sp/>=<sp/>load_returns(</highlight><highlight class="stringliteral">&quot;portfolio.csv&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries&lt;Return&gt;</ref><sp/>spy_benchmark<sp/>=<sp/>load_returns(</highlight><highlight class="stringliteral">&quot;spy.csv&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>metrics<sp/>=<sp/><ref refid="d2/d10/namespacepyfolio_1_1analytics_1a0562de05a212709b5e0fe358e30c90d0" kindref="member">calculate_performance_metrics</ref>(portfolio_returns,<sp/>spy_benchmark,<sp/>0.025,<sp/>252);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(metrics.is_ok())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>m<sp/>=<sp/>metrics.value();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Annual<sp/>Return:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m.annual_return<sp/>*<sp/>100<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Sharpe<sp/>Ratio:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m.sharpe_ratio<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Max<sp/>Drawdown:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m.max_drawdown<sp/>*<sp/>100<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;%&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>metrics.error().message<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" line="135" column="8" declfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" declline="135" declcolumn="8"/>
        <referencedby refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a0e3a4ce0474850feced4c15ca589cb97" compoundref="d4/dc1/cached__performance__metrics_8h" startline="412" endline="438">pyfolio::analytics::CachedPerformanceCalculator::calculate_performance_metrics</referencedby>
      </memberdef>
      <memberdef kind="function" id="d2/d10/namespacepyfolio_1_1analytics_1a6767fe5fe2707ba7d41dcc60be71fc15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="de/d2e/structpyfolio_1_1analytics_1_1PerformanceMetrics" kindref="compound">PerformanceMetrics</ref> &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; PerformanceMetrics &gt; &gt; pyfolio::analytics::calculate_rolling_performance_metrics</definition>
        <argsstring>(const TimeSeries&lt; Return &gt; &amp;returns, size_t window=252, const std::optional&lt; TimeSeries&lt; Return &gt; &gt; &amp;benchmark=std::nullopt, double risk_free_rate=0.02)</argsstring>
        <name>calculate_rolling_performance_metrics</name>
        <qualifiedname>pyfolio::analytics::calculate_rolling_performance_metrics</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window</declname>
          <defval>252</defval>
        </param>
        <param>
          <type>const std::optional&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> &gt; &gt; &amp;</type>
          <declname>benchmark</declname>
          <defval>std::nullopt</defval>
        </param>
        <param>
          <type>double</type>
          <declname>risk_free_rate</declname>
          <defval>0.02</defval>
        </param>
        <briefdescription>
<para>Calculate rolling performance metrics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" line="142" column="8" declfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" declline="142" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="d2/d10/namespacepyfolio_1_1analytics_1ac955ed8431f05a15c70173afce43e083" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d6/d42/structpyfolio_1_1analytics_1_1AttributionResult" kindref="compound">AttributionResult</ref> &gt;</type>
        <definition>Result&lt; AttributionResult &gt; pyfolio::analytics::calculate_attribution</definition>
        <argsstring>(const TimeSeries&lt; Return &gt; &amp;portfolio_returns, const TimeSeries&lt; Return &gt; &amp;benchmark_returns, const TimeSeries&lt; std::unordered_map&lt; std::string, double &gt; &gt; &amp;weights, const TimeSeries&lt; std::unordered_map&lt; std::string, Return &gt; &gt; &amp;sector_returns)</argsstring>
        <name>calculate_attribution</name>
        <qualifiedname>pyfolio::analytics::calculate_attribution</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> &gt; &amp;</type>
          <declname>portfolio_returns</declname>
        </param>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; <ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> &gt; &amp;</type>
          <declname>benchmark_returns</declname>
        </param>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; std::unordered_map&lt; std::string, double &gt; &gt; &amp;</type>
          <declname>weights</declname>
        </param>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; std::unordered_map&lt; std::string, <ref refid="d7/df8/namespacepyfolio_1ab26cb0b13c68f84ed67abcc669658f35" kindref="member">Return</ref> &gt; &gt; &amp;</type>
          <declname>sector_returns</declname>
        </param>
        <briefdescription>
<para>Calculate performance attribution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" line="159" column="8" declfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/performance_metrics.h" declline="159" declcolumn="8"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/bayesian.h" line="13" column="1"/>
  </compounddef>
</doxygen>
