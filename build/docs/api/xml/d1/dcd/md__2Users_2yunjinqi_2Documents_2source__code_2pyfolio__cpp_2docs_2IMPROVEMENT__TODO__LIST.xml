<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST" kind="page">
    <compoundname>md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST</compoundname>
    <title>Pyfolio C++ 改进待办事项清单</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md68"/></para>
<sect1 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md69">
<title>前言</title><para>基于对原始 pyfolio Python 库和 pyfolio_cpp C++ 重构版本的深度分析，本文档详细列出了需要改进的关键领域。作为拥有30年经验的 C++ 和 Python 高级开发工程师的分析结果，这些改进建议将显著提升项目的代码质量、性能和功能完整性。</para>
<para><hruler/>
</para>
</sect1>
<sect1 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md71">
<title>🔴 <bold>优先级 1 - 紧急修复 (Critical - 立即处理)</bold></title><sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md72">
<title>1.1 API 兼容性修复</title><para><bold>影响范围</bold>: 75% 的测试失败 <bold>预计工作量</bold>: 3-5 工作日</para>
<sect3 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md73">
<title>问题详述:</title><para><itemizedlist>
<listitem><para><bold>文件</bold>: <computeroutput>tests/test_python_pos_equivalence.cpp:19-27</computeroutput><itemizedlist>
<listitem><para>Position 构造函数签名不匹配</para>
</listitem><listitem><para>需要更新构造函数参数顺序和类型</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>文件</bold>: <computeroutput>tests/test_positions.cpp</computeroutput><itemizedlist>
<listitem><para>12 个 TODO 注释 (行 85, 92, 100 等)</para>
</listitem><listitem><para>AllocationAnalyzer API 不兼容</para>
</listitem><listitem><para>方法名称和参数不匹配</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>文件</bold>: <computeroutput>tests/test_regime_detection.cpp:62, 76-77</computeroutput><itemizedlist>
<listitem><para>MarketIndicators 实现缺失</para>
</listitem><listitem><para>需要实现完整的市场指标分析功能</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md74">
<title>解决方案:</title><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>示例修复<sp/>-<sp/>Position<sp/>构造函数</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Position<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>当前:<sp/>Position(symbol,<sp/>quantity,<sp/>price)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>需要:<sp/>Position(symbol,<sp/>market_value,<sp/>quantity,<sp/>price)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Position(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Symbol&amp;<sp/>symbol,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MarketValue&amp;<sp/>market_value,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Quantity&amp;<sp/>quantity,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Price&amp;<sp/>price);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
</sect3>
</sect2>
<sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md75">
<title>1.2 缺失实现补全</title><para><bold>影响范围</bold>: 核心功能不完整 <bold>预计工作量</bold>: 5-7 工作日</para>
<sect3 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md76">
<title>Regime Detection 模块缺失:</title><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>文件:<sp/>include/pyfolio/analytics/regime_detection.h</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>需要实现的方法:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RegimeDetector<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Result&lt;RegimeAnalysis&gt;<sp/>markov_switching_detection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TimeSeries&lt;double&gt;&amp;<sp/>returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Result&lt;RegimeAnalysis&gt;<sp/>hidden_markov_detection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TimeSeries&lt;double&gt;&amp;<sp/>returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Result&lt;RegimeAnalysis&gt;<sp/>structural_break_detection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TimeSeries&lt;double&gt;&amp;<sp/>returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Result&lt;RegimeAnalysis&gt;<sp/>volatility_regime_detection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TimeSeries&lt;double&gt;&amp;<sp/>returns);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md77">
<title>MarketIndicators 实现:</title><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>新文件:<sp/>include/pyfolio/analytics/market_indicators.h</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MarketIndicators<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Result&lt;TimeSeries&lt;double&gt;&gt;<sp/>calculate_vix_regime(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TimeSeries&lt;double&gt;&amp;<sp/>returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Result&lt;TimeSeries&lt;double&gt;&gt;<sp/>calculate_yield_curve_slope(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TimeSeries&lt;double&gt;&amp;<sp/>returns);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Result&lt;TimeSeries&lt;double&gt;&gt;<sp/>calculate_credit_spreads(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TimeSeries&lt;double&gt;&amp;<sp/>returns);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
</sect3>
</sect2>
<sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md78">
<title>1.3 错误处理一致性</title><para><bold>问题</bold>: 混合使用异常和 Result&lt;T&gt; 模式 <bold>预计工作量</bold>: 2-3 工作日</para>
<sect3 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md79">
<title>当前问题:</title><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>文件:<sp/>include/pyfolio/core/time_series.h:29</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>validate_consistency()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timestamps_.size()<sp/>!=<sp/>values_.size())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;TimeSeries:<sp/>timestamps<sp/>and<sp/>values<sp/>size<sp/>mismatch&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>❌<sp/>不一致</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md80">
<title>修复方案:</title><para><programlisting filename=".cpp"><codeline><highlight class="normal">Result&lt;void&gt;<sp/>validate_consistency()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timestamps_.size()<sp/>!=<sp/>values_.size())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Error{ErrorCode::SIZE_MISMATCH,<sp/></highlight><highlight class="stringliteral">&quot;TimeSeries:<sp/>timestamps<sp/>and<sp/>values<sp/>size<sp/>mismatch&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a505a83f220c02df2f85c3810cd9ceb38" kindref="member">Success</ref>{};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><hruler/>
</para>
</sect3>
</sect2>
</sect1>
<sect1 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md82">
<title>🟡 <bold>优先级 2 - 性能优化 (Performance - 短期处理)</bold></title><sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md83">
<title>2.1 算法复杂度优化</title><para><bold>影响范围</bold>: 核心计算性能 <bold>预计工作量</bold>: 4-6 工作日</para>
<sect3 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md84">
<title>A. TimeSeries 排序性能问题</title><para><bold>文件</bold>: <computeroutput><ref refid="d8/d51/time__series_8h" kindref="compound">include/pyfolio/core/time_series.h</ref>:126-148</computeroutput> <bold>问题</bold>: O(n) 额外内存分配</para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>当前实现<sp/>-<sp/>低效</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sort_by_time()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;DateTime&gt;<sp/>sorted_timestamps;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>❌<sp/>额外内存分配</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>sorted_values;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>❌<sp/>额外内存分配</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>拷贝整个向量</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>优化方案<sp/>-<sp/>原地排序</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sort_by_time()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;<sp/>indices(timestamps_.size());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::iota(indices.begin(),<sp/>indices.end(),<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::sort(indices.begin(),<sp/>indices.end(),<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j)<sp/>{<sp/>return<sp/>timestamps_[i]<sp/>&lt;<sp/>timestamps_[j];<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>使用<sp/>indices<sp/>进行原地重排序</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>apply_permutation(timestamps_,<sp/>indices);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>apply_permutation(values_,<sp/>indices);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md85">
<title>B. 滚动指标算法效率</title><para><bold>文件</bold>: <computeroutput><ref refid="d3/d7e/rolling__metrics_8h" kindref="compound">include/pyfolio/performance/rolling_metrics.h</ref>:40-68</computeroutput> <bold>问题</bold>: O(n²) 复杂度</para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>当前实现<sp/>-<sp/>O(n²)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>values.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>start_idx;<sp/>j<sp/>&lt;=<sp/>i;<sp/>++j)<sp/>{<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>❌<sp/>重复计算</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>values[j];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum_sq<sp/>+=<sp/>values[j]<sp/>*<sp/>values[j];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>优化方案<sp/>-<sp/>O(n)<sp/>滑动窗口</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RollingWindow<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::deque&lt;double&gt;<sp/>window_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_<sp/>=<sp/>0.0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_sq_<sp/>=<sp/>0.0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_value(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window_.size()<sp/>&gt;=<sp/>window_size_)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>old_value<sp/>=<sp/>window_.front();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_.pop_front();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum_<sp/>-=<sp/>old_value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum_sq_<sp/>-=<sp/>old_value<sp/>*<sp/>old_value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_.push_back(value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum_<sp/>+=<sp/>value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum_sq_<sp/>+=<sp/>value<sp/>*<sp/>value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1af806e5aece2fa569d3cec8ba37a4b31a" kindref="member">mean</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum_<sp/>/<sp/>window_.size();<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d6/ddc/namespacepyfolio_1_1stats_1afae76bfc655b39b929869957f17e2406" kindref="member">variance</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mean_val<sp/>=<sp/><ref refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1af806e5aece2fa569d3cec8ba37a4b31a" kindref="member">mean</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(sum_sq_<sp/>/<sp/>window_.size())<sp/>-<sp/>(mean_val<sp/>*<sp/>mean_val);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
</sect3>
</sect2>
<sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md86">
<title>2.2 内存使用优化</title><para><bold>预计工作量</bold>: 2-3 工作日</para>
<sect3 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md87">
<title>SIMD 优化机会:</title><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>文件:<sp/>include/pyfolio/math/statistics.h</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>当前实现</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>calculate_mean(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>values)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::accumulate(values.begin(),<sp/>values.end(),<sp/>0.0)<sp/>/<sp/>values.size();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>SIMD<sp/>优化版本</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;immintrin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>calculate_mean_simd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>values)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>simd_size<sp/>=<sp/>4;<sp/></highlight><highlight class="comment">//<sp/>AVX2<sp/>可以处理<sp/>4<sp/>个<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>aligned_size<sp/>=<sp/>(values.size()<sp/>/<sp/>simd_size)<sp/>*<sp/>simd_size;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>__m256d<sp/>sum_vec<sp/>=<sp/>_mm256_setzero_pd();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>aligned_size;<sp/>i<sp/>+=<sp/>simd_size)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__m256d<sp/>data<sp/>=<sp/>_mm256_loadu_pd(&amp;values[i]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum_vec<sp/>=<sp/>_mm256_add_pd(sum_vec,<sp/>data);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>提取并求和<sp/>SIMD<sp/>结果</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_array[4];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>_mm256_storeu_pd(sum_array,<sp/>sum_vec);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total<sp/>=<sp/>sum_array[0]<sp/>+<sp/>sum_array[1]<sp/>+<sp/>sum_array[2]<sp/>+<sp/>sum_array[3];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>处理剩余元素</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>aligned_size;<sp/>i<sp/>&lt;<sp/>values.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>values[i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total<sp/>/<sp/>values.size();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><hruler/>
</para>
</sect3>
</sect2>
</sect1>
<sect1 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md89">
<title>🟠 <bold>优先级 3 - 现代 C++ 特性 (Modern C++ - 中期处理)</bold></title><sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md90">
<title>3.1 编译时优化</title><para><bold>预计工作量</bold>: 3-4 工作日</para>
<sect3 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md91">
<title>A. 扩展 <computeroutput>constexpr</computeroutput> 使用</title><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>当前<sp/>-<sp/>运行时计算</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1a68b92ffe1367d82222e4ad30773a0fd0" kindref="member">sharpe_ratio</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>annual_return,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>annual_volatility,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>risk_free_rate<sp/>=<sp/>0.0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(annual_return<sp/>-<sp/>risk_free_rate)<sp/>/<sp/>annual_volatility;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>优化<sp/>-<sp/>编译时计算</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1a68b92ffe1367d82222e4ad30773a0fd0" kindref="member">sharpe_ratio</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>annual_return,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>annual_volatility,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>risk_free_rate<sp/>=<sp/>0.0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(annual_return<sp/>-<sp/>risk_free_rate)<sp/>/<sp/>annual_volatility;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>编译时常量计算</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="db/d9c/namespacepyfolio_1_1constants_1accf4b9e8a1c9179437b61a3f9a0e2e53" kindref="member">TRADING_DAYS_PER_YEAR</ref><sp/>=<sp/>252.0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>SQRT_TRADING_DAYS<sp/>=<sp/>std::sqrt(TRADING_DAYS_PER_YEAR);<sp/></highlight><highlight class="comment">//<sp/>C++26</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md92">
<title>B. 添加 <computeroutput>[[nodiscard]]</computeroutput> 属性</title><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>文件:<sp/>include/pyfolio/core/error_handling.h</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">[[nodiscard]]<sp/>Result<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>✅<sp/>防止意外忽略结果</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_success()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_error()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>const<sp/>T&amp;<sp/>value()<sp/>const&amp;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>T&amp;&amp;<sp/>value()<sp/>&amp;&amp;;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>性能关键函数</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">[[nodiscard]]<sp/>Result&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;<sp/>calculate_volatility(const<sp/>TimeSeries&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;&amp;<sp/>returns);</highlight></codeline>
<codeline><highlight class="normal">[[nodiscard]]<sp/>Result&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;<sp/>calculate_max_drawdown(const<sp/>TimeSeries&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&gt;&amp;<sp/>returns);</highlight></codeline>
</programlisting></para>
</sect3>
</sect2>
<sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md93">
<title>3.2 类型安全增强</title><para><bold>预计工作量</bold>: 2-3 工作日</para>
<sect3 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md94">
<title>std::span 视图优化</title><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>当前<sp/>-<sp/>创建临时对象</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">TimeSeries&lt;double&gt;<sp/>get_window(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;DateTime&gt;<sp/>window_timestamps(timestamps_.begin()<sp/>+<sp/>start,<sp/>timestamps_.begin()<sp/>+<sp/>end);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>window_values(values_.begin()<sp/>+<sp/>start,<sp/>values_.begin()<sp/>+<sp/>end);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TimeSeries&lt;double&gt;(std::move(window_timestamps),<sp/>std::move(window_values));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>优化<sp/>-<sp/>零拷贝视图</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::pair&lt;std::span&lt;const<sp/>DateTime&gt;,<sp/>std::span&lt;const<sp/>double&gt;&gt;<sp/></highlight></codeline>
<codeline><highlight class="normal">get_window_view(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::span&lt;const<sp/>DateTime&gt;{timestamps_.data()<sp/>+<sp/>start,<sp/>end<sp/>-<sp/>start},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::span&lt;const<sp/>double&gt;{values_.data()<sp/>+<sp/>start,<sp/>end<sp/>-<sp/>start}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md95">
<title>强化 Concepts</title><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>文件:<sp/>include/pyfolio/core/types.h</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>当前概念定义</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal">Numeric<sp/>=<sp/>std::is_arithmetic_v&lt;T&gt;;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>增强的概念定义</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal">FinancialValue<sp/>=<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(T<sp/>t)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>t.value()<sp/>}<sp/>-&gt;<sp/>std::convertible_to&lt;double&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>T::zero()<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;T&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>t<sp/>+<sp/>t<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;T&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>t<sp/>-<sp/>t<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;T&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>t<sp/>*<sp/>2.0<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;T&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>t<sp/>/<sp/>2.0<sp/>}<sp/>-&gt;<sp/>std::same_as&lt;T&gt;;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">concept<sp/></highlight><highlight class="normal">TimeSeriesValue<sp/>=<sp/>FinancialValue&lt;T&gt;<sp/>&amp;&amp;<sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::value_type;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_default_constructible_v&lt;T&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_copy_constructible_v&lt;T&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_move_constructible_v&lt;T&gt;;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><hruler/>
</para>
</sect3>
</sect2>
</sect1>
<sect1 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md97">
<title>🔵 <bold>优先级 4 - 功能增强 (Features - 中长期处理)</bold></title><sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md98">
<title>4.1 缺失的 Python 功能</title><para><bold>预计工作量</bold>: 8-12 工作日</para>
<sect3 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md99">
<title>A. Web 框架集成 (替代 Flask)</title><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>新文件:<sp/>include/pyfolio/web/server.h</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;crow.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>轻量级<sp/>C++<sp/>web<sp/>框架</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PyfolioWebServer<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>crow::SimpleApp<sp/>app_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setup_routes()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>主页路由</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CROW_ROUTE(app_,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">)([](){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>crow::load_text(</highlight><highlight class="stringliteral">&quot;templates/index.html&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>API<sp/>路由</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CROW_ROUTE(app_,<sp/></highlight><highlight class="stringliteral">&quot;/api/analysis&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.methods(</highlight><highlight class="stringliteral">&quot;POST&quot;</highlight><highlight class="normal">_method)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>([</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>crow::request&amp;<sp/>req)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>generate_analysis_json(req.body);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>静态文件服务</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CROW_ROUTE(app_,<sp/></highlight><highlight class="stringliteral">&quot;/static/&lt;path&gt;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>([](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>crow::load_text(</highlight><highlight class="stringliteral">&quot;static/&quot;</highlight><highlight class="normal"><sp/>+<sp/>path);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>start(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port<sp/>=<sp/>8080)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>app_.port(port).multithreaded().run();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>crow::response<sp/>generate_analysis_json(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>request_data);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md100">
<title>B. 增强的可视化功能</title><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>文件:<sp/>include/pyfolio/visualization/plotly_integration.h</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nlohmann/json.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PlotlyChart<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>nlohmann::json<sp/>create_returns_chart(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TimeSeries&lt;double&gt;&amp;<sp/>returns)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nlohmann::json<sp/>chart;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chart[</highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">]<sp/>=<sp/>nlohmann::json::array();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>trace<sp/>=<sp/>chart[</highlight><highlight class="stringliteral">&quot;data&quot;</highlight><highlight class="normal">][0];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace[</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;scatter&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace[</highlight><highlight class="stringliteral">&quot;mode&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;lines&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>转换时间序列数据</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[timestamp,<sp/>value]<sp/>:<sp/>returns)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace[</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">].push_back(timestamp.to_iso_string());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trace[</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">].push_back(value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chart[</highlight><highlight class="stringliteral">&quot;layout&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;title&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Portfolio<sp/>Returns&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chart[</highlight><highlight class="stringliteral">&quot;layout&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;xaxis&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;title&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Date&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chart[</highlight><highlight class="stringliteral">&quot;layout&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;yaxis&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;title&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Returns&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chart;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>to_html(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>nlohmann::json&amp;<sp/>chart)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>html<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;(</highlight></codeline>
<codeline><highlight class="stringliteral">&lt;!DOCTYPE<sp/>html&gt;</highlight></codeline>
<codeline><highlight class="stringliteral">&lt;html&gt;</highlight></codeline>
<codeline><highlight class="stringliteral">&lt;head&gt;</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&lt;script<sp/>src=&quot;https://cdn.plot.ly/plotly-latest.min.js&quot;&gt;&lt;/script&gt;</highlight></codeline>
<codeline><highlight class="stringliteral">&lt;/head&gt;</highlight></codeline>
<codeline><highlight class="stringliteral">&lt;body&gt;</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&lt;div<sp/>id=&quot;chart&quot;&gt;&lt;/div&gt;</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&lt;script&gt;</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Plotly.newPlot(&apos;chart&apos;,<sp/>)&quot;<sp/>+<sp/>chart.dump()<sp/>+<sp/>R</highlight><highlight class="stringliteral">&quot;();</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&lt;/script&gt;</highlight></codeline>
<codeline><highlight class="stringliteral">&lt;/body&gt;</highlight></codeline>
<codeline><highlight class="stringliteral">&lt;/html&gt;)&quot;;</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>html;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
</sect3>
</sect2>
<sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md101">
<title>4.2 高级分析功能</title><para><bold>预计工作量</bold>: 6-8 工作日</para>
<sect3 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md102">
<title>A. 机器学习集成</title><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>新文件:<sp/>include/pyfolio/ml/regime_ml.h</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dlib/svm.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">MLRegimeDetector<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">sample_type<sp/>=<sp/>dlib::matrix&lt;double,<sp/>0,<sp/>1&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">kernel_type<sp/>=<sp/>dlib::radial_basis_kernel&lt;sample_type&gt;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dlib::svm_c_trainer&lt;kernel_type&gt;<sp/>trainer_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Result&lt;RegimeClassification&gt;<sp/>detect_regimes_ml(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TimeSeries&lt;double&gt;&amp;<sp/>returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;FeatureVector&gt;&amp;<sp/>features)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>特征工程</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;sample_type&gt;<sp/>samples;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>labels;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>feature<sp/>:<sp/>features)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample_type<sp/>sample;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample.set_size(feature.size());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>feature.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample(i)<sp/>=<sp/>feature[i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples.push_back(sample);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>训练<sp/>SVM<sp/>模型</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>decision_function<sp/>=<sp/>trainer_.train(samples,<sp/>labels);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>应用模型进行分类</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RegimeClassification<sp/>result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>sample<sp/>:<sp/>samples)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.regimes.push_back(decision_function(sample));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9a505a83f220c02df2f85c3810cd9ceb38" kindref="member">Success</ref>{result};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md103">
<title>B. 实时分析支持</title><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>新文件:<sp/>include/pyfolio/realtime/streaming.h</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">StreamingAnalyzer<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>RollingWindow&lt;T&gt;<sp/>window_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::function&lt;void(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AnalysisResult&amp;)&gt;&gt;<sp/>callbacks_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_data_point(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DateTime&amp;<sp/>timestamp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_.add(timestamp,<sp/>value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(window_.size()<sp/>&gt;=<sp/>min_window_size_)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>analysis<sp/>=<sp/>perform_analysis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notify_callbacks(analysis);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>subscribe(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AnalysisResult&amp;)&gt;<sp/>callback)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callbacks_.push_back(std::move(callback));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>AnalysisResult<sp/>perform_analysis()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AnalysisResult<sp/>result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.sharpe_ratio<sp/>=<sp/>calculate_sharpe_ratio(window_.returns());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.max_drawdown<sp/>=<sp/>calculate_max_drawdown(window_.returns());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.volatility<sp/>=<sp/><ref refid="d8/dd9/namespacepyfolio_1_1performance_1a187ff948556631bd1ebbe0c3c87bdb76" kindref="member">calculate_volatility</ref>(window_.returns());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>notify_callbacks(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AnalysisResult&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>callback<sp/>:<sp/>callbacks_)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>callback(result);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><hruler/>
</para>
</sect3>
</sect2>
</sect1>
<sect1 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md105">
<title>🟢 <bold>优先级 5 - 质量提升 (Quality - 长期处理)</bold></title><sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md106">
<title>5.1 测试覆盖率提升</title><para><bold>目标</bold>: 从 60-70% 提升到 95%+ <bold>预计工作量</bold>: 5-7 工作日</para>
<sect3 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md107">
<title>A. 边界条件测试</title><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>文件:<sp/>tests/test_edge_cases.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">TEST(PerformanceMetrics,<sp/>EmptyTimeSeries)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TimeSeries&lt;double&gt;<sp/>empty_series;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>calculate_sharpe_ratio(empty_series);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(result.is_error());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(result.error().code,<sp/>ErrorCode::INSUFFICIENT_DATA);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">TEST(PerformanceMetrics,<sp/>SingleDataPoint)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TimeSeries&lt;double&gt;<sp/>single_point;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>single_point.add(DateTime::now(),<sp/>0.05);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="d8/dd9/namespacepyfolio_1_1performance_1a187ff948556631bd1ebbe0c3c87bdb76" kindref="member">calculate_volatility</ref>(single_point);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(result.is_error());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(result.error().code,<sp/>ErrorCode::INSUFFICIENT_DATA);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">TEST(PerformanceMetrics,<sp/>NaNHandling)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TimeSeries&lt;double&gt;<sp/>series_with_nan;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>series_with_nan.add(DateTime::now(),<sp/>0.05);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>series_with_nan.add(DateTime::now()<sp/>+<sp/>std::chrono::days(1),<sp/>std::numeric_limits&lt;double&gt;::quiet_NaN());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>calculate_mean(series_with_nan);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(result.is_error());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(result.error().code,<sp/>ErrorCode::INVALID_DATA);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md108">
<title>B. 性能回归测试</title><para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>文件:<sp/>tests/test_performance_regression.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PerformanceBenchmark<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::testing::Test<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TimeSeries&lt;double&gt;<sp/>large_series_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetUp()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>生成<sp/>100,000<sp/>个数据点</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100000;<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>large_series_.add(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DateTime::from_days_since_epoch(i),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>random_normal_distribution_(generator_)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">TEST_F(PerformanceBenchmark,<sp/>SharpeRatioPerformance)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>calculate_sharpe_ratio(large_series_);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>duration<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(end<sp/>-<sp/>start);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(result.is_success());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_LT(duration.count(),<sp/>100);<sp/></highlight><highlight class="comment">//<sp/>应该在<sp/>100ms<sp/>内完成</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect3>
</sect2>
<sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md109">
<title>5.2 代码质量工具集成</title><para><bold>预计工作量</bold>: 2-3 工作日</para>
<sect3 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md110">
<title>A. 静态代码分析</title><para><programlisting filename=".cmake"><codeline><highlight class="normal">#<sp/>CMakeLists.txt<sp/>增强</highlight></codeline>
<codeline><highlight class="normal">find_program(CLANG_TIDY_EXE<sp/>NAMES<sp/>&quot;clang-tidy&quot;)</highlight></codeline>
<codeline><highlight class="normal">if(CLANG_TIDY_EXE)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>set(CMAKE_CXX_CLANG_TIDY<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>${CLANG_TIDY_EXE};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-checks=*,-fuchsia-*,-google-*,-zircon-*,-abseil-*,-llvm-header-guard;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-header-filter=.*pyfolio.*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">endif()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">find_program(CPPCHECK_EXE<sp/>NAMES<sp/>&quot;cppcheck&quot;)</highlight></codeline>
<codeline><highlight class="normal">if(CPPCHECK_EXE)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>add_custom_target(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cppcheck</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COMMAND<sp/>${CPPCHECK_EXE}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--enable=warning,performance,portability</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--std=c++20</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--template=&quot;[{severity}][{id}]<sp/>{message}<sp/>{callstack}<sp/>\(On<sp/>{file}:{line}\)&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--verbose</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--quiet</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>${CMAKE_SOURCE_DIR}/include</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">endif()</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md111">
<title>B. 代码格式化标准化</title><para><programlisting filename=".yaml"><codeline><highlight class="normal">#<sp/>.clang-format</highlight></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline><highlight class="normal">Language:<sp/>Cpp</highlight></codeline>
<codeline><highlight class="normal">BasedOnStyle:<sp/>Google</highlight></codeline>
<codeline><highlight class="normal">IndentWidth:<sp/>4</highlight></codeline>
<codeline><highlight class="normal">TabWidth:<sp/>4</highlight></codeline>
<codeline><highlight class="normal">UseTab:<sp/>Never</highlight></codeline>
<codeline><highlight class="normal">ColumnLimit:<sp/>100</highlight></codeline>
<codeline><highlight class="normal">AlignAfterOpenBracket:<sp/>Align</highlight></codeline>
<codeline><highlight class="normal">AlignConsecutiveAssignments:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">AlignConsecutiveDeclarations:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">AllowShortFunctionsOnASingleLine:<sp/>Empty</highlight></codeline>
<codeline><highlight class="normal">AllowShortIfStatementsOnASingleLine:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">AlwaysBreakTemplateDeclarations:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">BreakBeforeBraces:<sp/>Attach</highlight></codeline>
<codeline><highlight class="normal">BreakConstructorInitializers:<sp/>BeforeColon</highlight></codeline>
<codeline><highlight class="normal">IncludeBlocks:<sp/>Regroup</highlight></codeline>
<codeline><highlight class="normal">NamespaceIndentation:<sp/>None</highlight></codeline>
<codeline><highlight class="normal">PointerAlignment:<sp/>Left</highlight></codeline>
<codeline><highlight class="normal">SpaceAfterCStyleCast:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">SpaceAfterTemplateKeyword:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">SpaceBeforeAssignmentOperators:<sp/>true</highlight></codeline>
<codeline><highlight class="normal">SpaceBeforeCpp11BracedList:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">SpaceBeforeParens:<sp/>ControlStatements</highlight></codeline>
<codeline><highlight class="normal">SpaceInEmptyParentheses:<sp/>false</highlight></codeline>
<codeline><highlight class="normal">Standard:<sp/>c++20</highlight></codeline>
</programlisting></para>
</sect3>
</sect2>
<sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md112">
<title>5.3 文档完善</title><para><bold>预计工作量</bold>: 4-5 工作日</para>
<sect3 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md113">
<title>A. API 文档生成</title><para><programlisting filename=".cpp"><codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;Numeric<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PerformanceCalculator<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]<sp/>Result&lt;T&gt;<sp/><ref refid="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1a68b92ffe1367d82222e4ad30773a0fd0" kindref="member">sharpe_ratio</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TimeSeries&lt;T&gt;&amp;<sp/>returns,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>risk_free_rate<sp/>=<sp/>T{0.0},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>periods_per_year<sp/>=<sp/>252</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><hruler/>
</para>
</sect3>
</sect2>
</sect1>
<sect1 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md115">
<title>📊 <bold>实施优先级矩阵</bold></title><para><table rows="13" cols="5"><row>
<entry thead="yes"><para>类别   </para>
</entry><entry thead="yes"><para>工作量   </para>
</entry><entry thead="yes"><para>业务影响   </para>
</entry><entry thead="yes"><para>技术影响   </para>
</entry><entry thead="yes"><para>推荐顺序    </para>
</entry></row>
<row>
<entry thead="no"><para>API 兼容性修复   </para>
</entry><entry thead="no"><para>3-5天   </para>
</entry><entry thead="no"><para>🔴 高   </para>
</entry><entry thead="no"><para>🔴 高   </para>
</entry><entry thead="no"><para>1    </para>
</entry></row>
<row>
<entry thead="no"><para>缺失实现补全   </para>
</entry><entry thead="no"><para>5-7天   </para>
</entry><entry thead="no"><para>🔴 高   </para>
</entry><entry thead="no"><para>🟡 中   </para>
</entry><entry thead="no"><para>2    </para>
</entry></row>
<row>
<entry thead="no"><para>错误处理一致性   </para>
</entry><entry thead="no"><para>2-3天   </para>
</entry><entry thead="no"><para>🟡 中   </para>
</entry><entry thead="no"><para>🔴 高   </para>
</entry><entry thead="no"><para>3    </para>
</entry></row>
<row>
<entry thead="no"><para>算法复杂度优化   </para>
</entry><entry thead="no"><para>4-6天   </para>
</entry><entry thead="no"><para>🟡 中   </para>
</entry><entry thead="no"><para>🔴 高   </para>
</entry><entry thead="no"><para>4    </para>
</entry></row>
<row>
<entry thead="no"><para>内存使用优化   </para>
</entry><entry thead="no"><para>2-3天   </para>
</entry><entry thead="no"><para>🟡 中   </para>
</entry><entry thead="no"><para>🟡 中   </para>
</entry><entry thead="no"><para>5    </para>
</entry></row>
<row>
<entry thead="no"><para>现代 C++ 特性   </para>
</entry><entry thead="no"><para>3-4天   </para>
</entry><entry thead="no"><para>🟢 低   </para>
</entry><entry thead="no"><para>🔴 高   </para>
</entry><entry thead="no"><para>6    </para>
</entry></row>
<row>
<entry thead="no"><para>类型安全增强   </para>
</entry><entry thead="no"><para>2-3天   </para>
</entry><entry thead="no"><para>🟢 低   </para>
</entry><entry thead="no"><para>🟡 中   </para>
</entry><entry thead="no"><para>7    </para>
</entry></row>
<row>
<entry thead="no"><para>Web 框架集成   </para>
</entry><entry thead="no"><para>8-12天   </para>
</entry><entry thead="no"><para>🟡 中   </para>
</entry><entry thead="no"><para>🟢 低   </para>
</entry><entry thead="no"><para>8    </para>
</entry></row>
<row>
<entry thead="no"><para>高级分析功能   </para>
</entry><entry thead="no"><para>6-8天   </para>
</entry><entry thead="no"><para>🟡 中   </para>
</entry><entry thead="no"><para>🟢 低   </para>
</entry><entry thead="no"><para>9    </para>
</entry></row>
<row>
<entry thead="no"><para>测试覆盖率提升   </para>
</entry><entry thead="no"><para>5-7天   </para>
</entry><entry thead="no"><para>🟡 中   </para>
</entry><entry thead="no"><para>🟡 中   </para>
</entry><entry thead="no"><para>10    </para>
</entry></row>
<row>
<entry thead="no"><para>代码质量工具   </para>
</entry><entry thead="no"><para>2-3天   </para>
</entry><entry thead="no"><para>🟢 低   </para>
</entry><entry thead="no"><para>🟡 中   </para>
</entry><entry thead="no"><para>11    </para>
</entry></row>
<row>
<entry thead="no"><para>文档完善   </para>
</entry><entry thead="no"><para>4-5天   </para>
</entry><entry thead="no"><para>🟢 低   </para>
</entry><entry thead="no"><para>🟢 低   </para>
</entry><entry thead="no"><para>12   </para>
</entry></row>
</table>
</para>
<para><bold>总预计工作量</bold>: 47-66 工作日 (约 2-3 个月)</para>
<para><hruler/>
</para>
</sect1>
<sect1 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md117">
<title>🎯 <bold>阶段性目标</bold></title><sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md118">
<title>第一阶段 (第 1-2 周): 基础修复</title><para><itemizedlist>
<listitem><para>✅ 修复所有 API 兼容性问题</para>
</listitem><listitem><para>✅ 补全 MarketIndicators 和 RegimeDetection 实现</para>
</listitem><listitem><para>✅ 统一错误处理模式</para>
</listitem><listitem><para><bold>目标</bold>: 所有测试通过，测试覆盖率达到 80%</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md119">
<title>第二阶段 (第 3-4 周): 性能优化</title><para><itemizedlist>
<listitem><para>✅ 实施算法复杂度优化</para>
</listitem><listitem><para>✅ 内存使用优化</para>
</listitem><listitem><para>✅ SIMD 指令集成</para>
</listitem><listitem><para><bold>目标</bold>: 性能提升 2-5x，内存使用减少 30%</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md120">
<title>第三阶段 (第 5-8 周): 功能增强</title><para><itemizedlist>
<listitem><para>✅ 现代 C++ 特性集成</para>
</listitem><listitem><para>✅ Web 框架开发</para>
</listitem><listitem><para>✅ 高级分析功能实现</para>
</listitem><listitem><para><bold>目标</bold>: 功能覆盖率达到 95，用户体验显著提升</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md121">
<title>第四阶段 (第 9-12 周): 质量提升</title><para><itemizedlist>
<listitem><para>✅ 测试覆盖率提升到 95%+</para>
</listitem><listitem><para>✅ 代码质量工具集成</para>
</listitem><listitem><para>✅ 完整文档编写</para>
</listitem><listitem><para><bold>目标</bold>: 生产就绪，发布 v1.0</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
</sect2>
</sect1>
<sect1 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md123">
<title>🔧 <bold>开发环境建议</bold></title><sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md124">
<title>构建系统优化</title><para><programlisting filename=".cmake"><codeline><highlight class="normal">#<sp/>CMakeLists.txt<sp/>增强版本</highlight></codeline>
<codeline><highlight class="normal">cmake_minimum_required(VERSION<sp/>3.20)</highlight></codeline>
<codeline><highlight class="normal">project(pyfolio_cpp<sp/>VERSION<sp/>1.0.0<sp/>LANGUAGES<sp/>CXX)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>现代<sp/>C++<sp/>标准</highlight></codeline>
<codeline><highlight class="normal">set(CMAKE_CXX_STANDARD<sp/>20)</highlight></codeline>
<codeline><highlight class="normal">set(CMAKE_CXX_STANDARD_REQUIRED<sp/>ON)</highlight></codeline>
<codeline><highlight class="normal">set(CMAKE_CXX_EXTENSIONS<sp/>OFF)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>编译器优化选项</highlight></codeline>
<codeline><highlight class="normal">if(CMAKE_CXX_COMPILER_ID<sp/>MATCHES<sp/>&quot;GNU|Clang&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>target_compile_options(pyfolio_cpp<sp/>PRIVATE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-Wall<sp/>-Wextra<sp/>-Wpedantic</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-march=native<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>CPU<sp/>架构优化</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-O3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>最高优化级别</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-DNDEBUG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>Release<sp/>模式</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-flto<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#<sp/>链接时优化</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline><highlight class="normal">endif()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>分析和调试工具</highlight></codeline>
<codeline><highlight class="normal">option(ENABLE_SANITIZERS<sp/>&quot;Enable<sp/>address<sp/>and<sp/>undefined<sp/>behavior<sp/>sanitizers&quot;<sp/>OFF)</highlight></codeline>
<codeline><highlight class="normal">if(ENABLE_SANITIZERS)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>target_compile_options(pyfolio_cpp<sp/>PRIVATE<sp/>-fsanitize=address,undefined)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>target_link_options(pyfolio_cpp<sp/>PRIVATE<sp/>-fsanitize=address,undefined)</highlight></codeline>
<codeline><highlight class="normal">endif()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">option(ENABLE_PROFILING<sp/>&quot;Enable<sp/>profiling<sp/>support&quot;<sp/>OFF)</highlight></codeline>
<codeline><highlight class="normal">if(ENABLE_PROFILING)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>target_compile_options(pyfolio_cpp<sp/>PRIVATE<sp/>-pg)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>target_link_options(pyfolio_cpp<sp/>PRIVATE<sp/>-pg)</highlight></codeline>
<codeline><highlight class="normal">endif()</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md125">
<title>持续集成配置</title><para><programlisting filename=".yaml"><codeline><highlight class="normal">#<sp/>.github/workflows/ci.yml</highlight></codeline>
<codeline><highlight class="normal">name:<sp/>CI</highlight></codeline>
<codeline><highlight class="normal">on:<sp/>[push,<sp/>pull_request]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">jobs:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>test:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>strategy:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>matrix:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os:<sp/>[ubuntu-latest,<sp/>macos-latest,<sp/>windows-latest]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler:<sp/>[gcc-11,<sp/>clang-14]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>build_type:<sp/>[Debug,<sp/>Release]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>runs-on:<sp/>${{<sp/>matrix.os<sp/>}}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>steps:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>uses:<sp/>actions/checkout@v3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>name:<sp/>Install<sp/>dependencies</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>run:<sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sudo<sp/>apt-get<sp/>update</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sudo<sp/>apt-get<sp/>install<sp/>-y<sp/>cmake<sp/>ninja-build<sp/>lcov</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>name:<sp/>Configure</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>run:<sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmake<sp/>-B<sp/>build<sp/>-G<sp/>Ninja<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-DCMAKE_BUILD_TYPE=${{<sp/>matrix.build_type<sp/>}}<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-DENABLE_TESTING=ON<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-DENABLE_COVERAGE=ON</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>name:<sp/>Build</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>run:<sp/>cmake<sp/>--build<sp/>build<sp/>--parallel</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>name:<sp/>Test</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>run:<sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd<sp/>build</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctest<sp/>--output-on-failure<sp/>--parallel</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>name:<sp/>Coverage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if:<sp/>matrix.build_type<sp/>==<sp/>&apos;Debug&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>run:<sp/>|</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cd<sp/>build</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>make<sp/>coverage</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bash<sp/>&lt;(curl<sp/>-s<sp/>https://codecov.io/bash)</highlight></codeline>
</programlisting></para>
<para><hruler/>
</para>
</sect2>
</sect1>
<sect1 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md127">
<title>📈 <bold>预期收益</bold></title><sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md128">
<title>性能提升</title><para><itemizedlist>
<listitem><para><bold>计算性能</bold>: 10-100x 提升 (已实现部分)</para>
</listitem><listitem><para><bold>内存效率</bold>: 50% 减少 (已实现部分) <linebreak/>
</para>
</listitem><listitem><para><bold>编译时优化</bold>: 20-30% 构建时间减少</para>
</listitem><listitem><para><bold>运行时安全</bold>: 0 崩溃率 (通过 Result&lt;T&gt; 模式)</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md129">
<title>开发效率</title><para><itemizedlist>
<listitem><para><bold>API 一致性</bold>: 100% 兼容性</para>
</listitem><listitem><para><bold>类型安全</bold>: 编译时错误检测</para>
</listitem><listitem><para><bold>测试覆盖</bold>: 95%+ 代码覆盖率</para>
</listitem><listitem><para><bold>文档完整性</bold>: 100% API 文档覆盖</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md130">
<title>维护性</title><para><itemizedlist>
<listitem><para><bold>代码质量</bold>: A+ 等级 (通过静态分析)</para>
</listitem><listitem><para><bold>技术债务</bold>: 最小化</para>
</listitem><listitem><para><bold>扩展性</bold>: 支持新功能快速开发</para>
</listitem><listitem><para><bold>社区贡献</bold>: 清晰的贡献指南</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
</sect2>
</sect1>
<sect1 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md132">
<title>💡 <bold>创新特性建议</bold></title><sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md133">
<title>1. 智能缓存系统</title><para><programlisting filename=".cpp"><codeline><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>KeyType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueType&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">IntelligentCache<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>std::shared_mutex<sp/>cache_mutex_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;KeyType,<sp/>std::pair&lt;ValueType,<sp/>std::chrono::steady_clock::time_point&gt;&gt;<sp/>cache_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::seconds<sp/>ttl_;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::optional&lt;ValueType&gt;<sp/>get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>KeyType&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_lock<sp/>lock(cache_mutex_);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>cache_.find(key);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>cache_.end())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>now<sp/>=<sp/>std::chrono::steady_clock::now();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(now<sp/>-<sp/>it-&gt;second.second<sp/>&lt;<sp/>ttl_)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second.first;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>put(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>KeyType&amp;<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueType&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_lock<sp/>lock(cache_mutex_);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_[key]<sp/>=<sp/>{value,<sp/>std::chrono::steady_clock::now()};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md134">
<title>2. 自适应参数优化</title><para><programlisting filename=".cpp"><codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal">AdaptiveOptimizer<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>optimize_parameters(Func&amp;&amp;<sp/>func,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>使用机器学习算法自动优化参数</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>基于历史性能数据调整计算参数</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bayesian_optimization(std::forward&lt;Func&gt;(func),<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md135">
<title>3. 并行计算框架</title><para><programlisting filename=".cpp"><codeline><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExecutionPolicy<sp/>=<sp/>std::execution::par_unseq&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ParallelAnalyzer<sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parallel_transform(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Container&amp;<sp/>input,<sp/>Func&amp;&amp;<sp/>func)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::invoke_result_t&lt;Func,<sp/>typename<sp/>Container::value_type&gt;&gt;<sp/>output;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.resize(input.size());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(ExecutionPolicy{},<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input.begin(),<sp/>input.end(),<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.begin(),<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;Func&gt;(func));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><hruler/>
</para>
</sect2>
</sect1>
<sect1 id="d1/dcd/md__2Users_2yunjinqi_2Documents_2source__code_2pyfolio__cpp_2docs_2IMPROVEMENT__TODO__LIST_1autotoc_md137">
<title>🏁 <bold>结论</bold></title><para>pyfolio_cpp 项目展现出优秀的架构设计和现代 C++ 实践，但仍需要系统性的改进来达到生产环境的要求。通过按照本文档的优先级和时间计划执行改进措施，该项目将成为一个高性能、类型安全、功能完整的金融分析库。</para>
<para>关键成功因素:<orderedlist>
<listitem><para><bold>严格按照优先级执行</bold>: 先解决基础问题，再优化性能</para>
</listitem><listitem><para><bold>持续集成</bold>: 确保每个改进都有对应的测试</para>
</listitem><listitem><para><bold>性能基准</bold>: 每个优化都要有量化的性能提升指标</para>
</listitem><listitem><para><bold>代码审查</bold>: 确保代码质量和一致性</para>
</listitem><listitem><para><bold>文档同步</bold>: 代码和文档同步更新</para>
</listitem></orderedlist>
</para>
<para>预计完成所有改进后，pyfolio_cpp 将成为业界领先的 C++ 金融分析库，为用户提供卓越的性能和开发体验。</para>
<para><hruler/>
</para>
<para><bold>文档版本</bold>: v1.0 <linebreak/>
 <bold>最后更新</bold>: 2024-06-28 <linebreak/>
 <bold>审查者</bold>: 30年经验 C++/Python 高级开发工程师 <linebreak/>
 <bold>下次审查</bold>: 2024-07-28 (或主要功能完成后) </para>
</sect1>
    </detaileddescription>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/docs/IMPROVEMENT_TODO_LIST.md"/>
  </compounddef>
</doxygen>
