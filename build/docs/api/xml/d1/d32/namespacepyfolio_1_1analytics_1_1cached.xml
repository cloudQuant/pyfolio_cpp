<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d1/d32/namespacepyfolio_1_1analytics_1_1cached" kind="namespace" language="C++">
    <compoundname>pyfolio::analytics::cached</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1af806e5aece2fa569d3cec8ba37a4b31a" prot="public" static="no" nodiscard="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::analytics::cached::mean</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;series)</argsstring>
        <name>mean</name>
        <qualifiedname>pyfolio::analytics::cached::mean</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>series</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="533" column="9" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="533" bodyend="535"/>
        <references refid="d2/d10/namespacepyfolio_1_1analytics_1a95e186c16759d6d2d7efae081c0edf3e" compoundref="d4/dc1/cached__performance__metrics_8h" startline="522" endline="525">pyfolio::analytics::get_global_cache</references>
        <references refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a8bc981bc9cbd284d47b40f4ce72c14a5" compoundref="d4/dc1/cached__performance__metrics_8h" startline="282" endline="302">pyfolio::analytics::CachedPerformanceCalculator::mean</references>
      </memberdef>
      <memberdef kind="function" id="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1a3e0d74b961f1c042079178977e61c765" prot="public" static="no" nodiscard="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::analytics::cached::std_deviation</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;series)</argsstring>
        <name>std_deviation</name>
        <qualifiedname>pyfolio::analytics::cached::std_deviation</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>series</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="538" column="9" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="538" bodyend="540"/>
        <references refid="d2/d10/namespacepyfolio_1_1analytics_1a95e186c16759d6d2d7efae081c0edf3e" compoundref="d4/dc1/cached__performance__metrics_8h" startline="522" endline="525">pyfolio::analytics::get_global_cache</references>
        <references refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1ae2b363deb9d87338d104b96de4ae3a7f" compoundref="d4/dc1/cached__performance__metrics_8h" startline="308" endline="327">pyfolio::analytics::CachedPerformanceCalculator::std_deviation</references>
      </memberdef>
      <memberdef kind="function" id="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1adf282fb835cd51a3c8e1258b2137f0bf" prot="public" static="no" nodiscard="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::analytics::cached::correlation</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;series1, const TimeSeries&lt; T &gt; &amp;series2)</argsstring>
        <name>correlation</name>
        <qualifiedname>pyfolio::analytics::cached::correlation</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>series1</declname>
        </param>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>series2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="543" column="9" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="543" bodyend="545"/>
        <references refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1ae8d11622fcee575f2c19849d443dbb94" compoundref="d4/dc1/cached__performance__metrics_8h" startline="333" endline="356">pyfolio::analytics::CachedPerformanceCalculator::correlation</references>
        <references refid="d2/d10/namespacepyfolio_1_1analytics_1a95e186c16759d6d2d7efae081c0edf3e" compoundref="d4/dc1/cached__performance__metrics_8h" startline="522" endline="525">pyfolio::analytics::get_global_cache</references>
      </memberdef>
      <memberdef kind="function" id="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1a68b92ffe1367d82222e4ad30773a0fd0" prot="public" static="no" nodiscard="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::analytics::cached::sharpe_ratio</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;returns, double risk_free_rate=0.02)</argsstring>
        <name>sharpe_ratio</name>
        <qualifiedname>pyfolio::analytics::cached::sharpe_ratio</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>returns</declname>
        </param>
        <param>
          <type>double</type>
          <declname>risk_free_rate</declname>
          <defval>0.02</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="548" column="9" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="548" bodyend="550"/>
        <references refid="d2/d10/namespacepyfolio_1_1analytics_1a95e186c16759d6d2d7efae081c0edf3e" compoundref="d4/dc1/cached__performance__metrics_8h" startline="522" endline="525">pyfolio::analytics::get_global_cache</references>
        <references refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a78e06e24b176ddec6dc0640e175bdd1f" compoundref="d4/dc1/cached__performance__metrics_8h" startline="444" endline="477">pyfolio::analytics::CachedPerformanceCalculator::sharpe_ratio</references>
      </memberdef>
      <memberdef kind="function" id="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1a721af56f260a3d1560f94f261c06352c" prot="public" static="no" nodiscard="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::analytics::cached::max_drawdown</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;prices)</argsstring>
        <name>max_drawdown</name>
        <qualifiedname>pyfolio::analytics::cached::max_drawdown</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>prices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="553" column="9" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="553" bodyend="555"/>
        <references refid="d2/d10/namespacepyfolio_1_1analytics_1a95e186c16759d6d2d7efae081c0edf3e" compoundref="d4/dc1/cached__performance__metrics_8h" startline="522" endline="525">pyfolio::analytics::get_global_cache</references>
        <references refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1ae12cd4f5a2e889c8d7ff4ac4ab513f5e" compoundref="d4/dc1/cached__performance__metrics_8h" startline="483" endline="516">pyfolio::analytics::CachedPerformanceCalculator::max_drawdown</references>
      </memberdef>
      <memberdef kind="function" id="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1a19154f9f47ac8dd299519471406bd12f" prot="public" static="no" nodiscard="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::analytics::cached::rolling_mean</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;series, size_t window)</argsstring>
        <name>rolling_mean</name>
        <qualifiedname>pyfolio::analytics::cached::rolling_mean</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>series</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="558" column="9" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="558" bodyend="560"/>
        <references refid="d2/d10/namespacepyfolio_1_1analytics_1a95e186c16759d6d2d7efae081c0edf3e" compoundref="d4/dc1/cached__performance__metrics_8h" startline="522" endline="525">pyfolio::analytics::get_global_cache</references>
        <references refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a86abd7db22a354c6ef057158864d41bf" compoundref="d4/dc1/cached__performance__metrics_8h" startline="362" endline="381">pyfolio::analytics::CachedPerformanceCalculator::rolling_mean</references>
      </memberdef>
      <memberdef kind="function" id="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1ac72f648587fe1171805532226a3cbb5f" prot="public" static="no" nodiscard="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::analytics::cached::rolling_std</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;series, size_t window)</argsstring>
        <name>rolling_std</name>
        <qualifiedname>pyfolio::analytics::cached::rolling_std</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>series</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="563" column="9" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="563" bodyend="565"/>
        <references refid="d2/d10/namespacepyfolio_1_1analytics_1a95e186c16759d6d2d7efae081c0edf3e" compoundref="d4/dc1/cached__performance__metrics_8h" startline="522" endline="525">pyfolio::analytics::get_global_cache</references>
        <references refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a42bf7ecca30cbf723515dc06df7ba678" compoundref="d4/dc1/cached__performance__metrics_8h" startline="387" endline="406">pyfolio::analytics::CachedPerformanceCalculator::rolling_std</references>
      </memberdef>
      <memberdef kind="function" id="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1a940b4befb9ec4fd40fd5aca4d3155997" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="da/d79/structpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1_1CacheStats" kindref="compound">CachedPerformanceCalculator::CacheStats</ref></type>
        <definition>CachedPerformanceCalculator::CacheStats pyfolio::analytics::cached::get_cache_stats</definition>
        <argsstring>()</argsstring>
        <name>get_cache_stats</name>
        <qualifiedname>pyfolio::analytics::cached::get_cache_stats</qualifiedname>
        <briefdescription>
<para>Get cache statistics. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="570" column="48" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="570" bodyend="572"/>
        <references refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1a01e913b9511bc9d0574335cd413e6e10" compoundref="d4/dc1/cached__performance__metrics_8h" startline="241" endline="254">pyfolio::analytics::CachedPerformanceCalculator::get_cache_stats</references>
        <references refid="d2/d10/namespacepyfolio_1_1analytics_1a95e186c16759d6d2d7efae081c0edf3e" compoundref="d4/dc1/cached__performance__metrics_8h" startline="522" endline="525">pyfolio::analytics::get_global_cache</references>
      </memberdef>
      <memberdef kind="function" id="d1/d32/namespacepyfolio_1_1analytics_1_1cached_1ab3e14536bb14d2efb02b83e4a3d2989e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::analytics::cached::clear_cache</definition>
        <argsstring>()</argsstring>
        <name>clear_cache</name>
        <qualifiedname>pyfolio::analytics::cached::clear_cache</qualifiedname>
        <briefdescription>
<para>Clear global cache. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="577" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" bodystart="577" bodyend="579"/>
        <references refid="de/d09/classpyfolio_1_1analytics_1_1CachedPerformanceCalculator_1af10f63228f6a2a851924d47b1e159470" compoundref="d4/dc1/cached__performance__metrics_8h" startline="259" endline="266">pyfolio::analytics::CachedPerformanceCalculator::clear_cache</references>
        <references refid="d2/d10/namespacepyfolio_1_1analytics_1a95e186c16759d6d2d7efae081c0edf3e" compoundref="d4/dc1/cached__performance__metrics_8h" startline="522" endline="525">pyfolio::analytics::get_global_cache</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Convenience functions that use global cache. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/analytics/cached_performance_metrics.h" line="530" column="1"/>
  </compounddef>
</doxygen>
