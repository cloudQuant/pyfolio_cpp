<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms" kind="class" language="C++" prot="public">
    <compoundname>pyfolio::parallel::ParallelAlgorithms</compoundname>
    <includes refid="d9/d36/parallel__algorithms_8h" local="no">parallel_algorithms.h</includes>
    <innerclass refid="d7/dd3/structpyfolio_1_1parallel_1_1ParallelAlgorithms_1_1PerformanceStats" prot="public">pyfolio::parallel::ParallelAlgorithms::PerformanceStats</innerclass>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1ab17bd65d91ed6e334eba8d8763530aac" prot="private" static="no" mutable="no">
        <type><ref refid="d3/de7/structpyfolio_1_1parallel_1_1ParallelConfig" kindref="compound">ParallelConfig</ref></type>
        <definition>ParallelConfig pyfolio::parallel::ParallelAlgorithms::config_</definition>
        <argsstring></argsstring>
        <name>config_</name>
        <qualifiedname>pyfolio::parallel::ParallelAlgorithms::config_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" line="132" column="20" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" bodystart="132" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a6bea99f7e0e5a82e2c734bfe06fdf999" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t pyfolio::parallel::ParallelAlgorithms::calculate_chunk_size</definition>
        <argsstring>(size_t total_size, size_t num_threads) const</argsstring>
        <name>calculate_chunk_size</name>
        <qualifiedname>pyfolio::parallel::ParallelAlgorithms::calculate_chunk_size</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>total_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_threads</declname>
        </param>
        <briefdescription>
<para>Calculate optimal chunk size for parallel processing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" line="137" column="12" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" bodystart="137" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a8eb40b8849fa459988d63af2fc9dea54" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool pyfolio::parallel::ParallelAlgorithms::should_use_parallel</definition>
        <argsstring>(size_t data_size) const</argsstring>
        <name>should_use_parallel</name>
        <qualifiedname>pyfolio::parallel::ParallelAlgorithms::should_use_parallel</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
<para>Determine if parallel execution is beneficial. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" line="153" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" bodystart="153" bodyend="155"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1ac2b310cf9bed4c215ec4ca1b3bb74b7f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>pyfolio::parallel::ParallelAlgorithms::ParallelAlgorithms</definition>
        <argsstring>(ParallelConfig config={})</argsstring>
        <name>ParallelAlgorithms</name>
        <qualifiedname>pyfolio::parallel::ParallelAlgorithms::ParallelAlgorithms</qualifiedname>
        <param>
          <type><ref refid="d3/de7/structpyfolio_1_1parallel_1_1ParallelConfig" kindref="compound">ParallelConfig</ref></type>
          <declname>config</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" line="158" column="14" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" bodystart="158" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a43b6ea31d4d8a3f7a81b6d240df54e06" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename UnaryOp</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; std::vector&lt; T &gt; &gt;</type>
        <definition>Result&lt; std::vector&lt; T &gt; &gt; pyfolio::parallel::ParallelAlgorithms::parallel_map</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;input, UnaryOp op) const</argsstring>
        <name>parallel_map</name>
        <qualifiedname>pyfolio::parallel::ParallelAlgorithms::parallel_map</qualifiedname>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>UnaryOp</type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Parallel map operation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" line="164" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" bodystart="164" bodyend="206"/>
        <references refid="d9/d20/namespacepyfolio_1_1parallel_1ad752371eba260b351e1b16ee88cceb63" compoundref="d9/d36/parallel__algorithms_8h" startline="122" endline="125">pyfolio::parallel::get_global_thread_pool</references>
      </memberdef>
      <memberdef kind="function" id="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a3ba756e53e41ef4d081bd813d026afeb" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename BinaryOp</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; T &gt;</type>
        <definition>Result&lt; T &gt; pyfolio::parallel::ParallelAlgorithms::parallel_reduce</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;input, T init, BinaryOp op) const</argsstring>
        <name>parallel_reduce</name>
        <qualifiedname>pyfolio::parallel::ParallelAlgorithms::parallel_reduce</qualifiedname>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>T</type>
          <declname>init</declname>
        </param>
        <param>
          <type>BinaryOp</type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Parallel reduce operation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" line="212" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" bodystart="212" bodyend="262"/>
        <references refid="d9/d20/namespacepyfolio_1_1parallel_1ad752371eba260b351e1b16ee88cceb63" compoundref="d9/d36/parallel__algorithms_8h" startline="122" endline="125">pyfolio::parallel::get_global_thread_pool</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <referencedby refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a92b8d67fd5072f6ff834101212b172fa" compoundref="d9/d36/parallel__algorithms_8h" startline="314" endline="384">parallel_correlation</referencedby>
        <referencedby refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1af891348d5d6cc6b7f50308ef2e29201c" compoundref="d9/d36/parallel__algorithms_8h" startline="268" endline="281">parallel_mean</referencedby>
        <referencedby refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1ad92d62a79d4044197fdf6532ea08eb8f" compoundref="d9/d36/parallel__algorithms_8h" startline="287" endline="308">parallel_std_deviation</referencedby>
      </memberdef>
      <memberdef kind="function" id="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1af891348d5d6cc6b7f50308ef2e29201c" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::parallel::ParallelAlgorithms::parallel_mean</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;series) const</argsstring>
        <name>parallel_mean</name>
        <qualifiedname>pyfolio::parallel::ParallelAlgorithms::parallel_mean</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>series</declname>
        </param>
        <briefdescription>
<para>Parallel time series operations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" line="268" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" bodystart="268" bodyend="281"/>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a283b3c95dbf4bfbe61d4fac4da7073bc" compoundref="d3/d11/error__handling_8h" startline="79" endline="84">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a3ba756e53e41ef4d081bd813d026afeb" compoundref="d9/d36/parallel__algorithms_8h" startline="212" endline="262">parallel_reduce</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" compoundref="d8/d51/time__series_8h" startline="125" endline="125">pyfolio::TimeSeries&lt; T &gt;::values</references>
        <referencedby refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a92b8d67fd5072f6ff834101212b172fa" compoundref="d9/d36/parallel__algorithms_8h" startline="314" endline="384">parallel_correlation</referencedby>
        <referencedby refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1ad92d62a79d4044197fdf6532ea08eb8f" compoundref="d9/d36/parallel__algorithms_8h" startline="287" endline="308">parallel_std_deviation</referencedby>
      </memberdef>
      <memberdef kind="function" id="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1ad92d62a79d4044197fdf6532ea08eb8f" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::parallel::ParallelAlgorithms::parallel_std_deviation</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;series) const</argsstring>
        <name>parallel_std_deviation</name>
        <qualifiedname>pyfolio::parallel::ParallelAlgorithms::parallel_std_deviation</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>series</declname>
        </param>
        <briefdescription>
<para>Parallel standard deviation calculation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" line="287" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" bodystart="287" bodyend="308"/>
        <references refid="de/dfa/classpyfolio_1_1Result_1a283b3c95dbf4bfbe61d4fac4da7073bc" compoundref="d3/d11/error__handling_8h" startline="79" endline="84">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1af891348d5d6cc6b7f50308ef2e29201c" compoundref="d9/d36/parallel__algorithms_8h" startline="268" endline="281">parallel_mean</references>
        <references refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a3ba756e53e41ef4d081bd813d026afeb" compoundref="d9/d36/parallel__algorithms_8h" startline="212" endline="262">parallel_reduce</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" compoundref="d8/d51/time__series_8h" startline="125" endline="125">pyfolio::TimeSeries&lt; T &gt;::values</references>
      </memberdef>
      <memberdef kind="function" id="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a92b8d67fd5072f6ff834101212b172fa" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; double &gt;</type>
        <definition>Result&lt; double &gt; pyfolio::parallel::ParallelAlgorithms::parallel_correlation</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;series1, const TimeSeries&lt; T &gt; &amp;series2) const</argsstring>
        <name>parallel_correlation</name>
        <qualifiedname>pyfolio::parallel::ParallelAlgorithms::parallel_correlation</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>series1</declname>
        </param>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>series2</declname>
        </param>
        <briefdescription>
<para>Parallel correlation calculation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" line="314" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" bodystart="314" bodyend="384"/>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a7401475da2acefda00385214b27e7c59" compoundref="d8/d51/time__series_8h" startline="103" endline="103">pyfolio::TimeSeries&lt; T &gt;::empty</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1a283b3c95dbf4bfbe61d4fac4da7073bc" compoundref="d3/d11/error__handling_8h" startline="79" endline="84">pyfolio::Result&lt; T &gt;::error</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1af891348d5d6cc6b7f50308ef2e29201c" compoundref="d9/d36/parallel__algorithms_8h" startline="268" endline="281">parallel_mean</references>
        <references refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a3ba756e53e41ef4d081bd813d026afeb" compoundref="d9/d36/parallel__algorithms_8h" startline="212" endline="262">parallel_reduce</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="de/dfa/classpyfolio_1_1Result_1aff326d3892070879bd3d5cd55c186677" compoundref="d3/d11/error__handling_8h" startline="74" endline="74">pyfolio::Result&lt; T &gt;::success</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" compoundref="d8/d51/time__series_8h" startline="125" endline="125">pyfolio::TimeSeries&lt; T &gt;::values</references>
      </memberdef>
      <memberdef kind="function" id="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a108b4651f0cd7b9335eb935f57b67ad3" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename WindowOp</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::parallel::ParallelAlgorithms::parallel_rolling_operation</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;series, size_t window_size, WindowOp op) const</argsstring>
        <name>parallel_rolling_operation</name>
        <qualifiedname>pyfolio::parallel::ParallelAlgorithms::parallel_rolling_operation</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>series</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window_size</declname>
        </param>
        <param>
          <type>WindowOp</type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Parallel rolling window operations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" line="390" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" bodystart="390" bodyend="451"/>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a729141cccb1544762ac2069d734929d0" compoundref="d8/d51/time__series_8h" startline="68" endline="83">pyfolio::TimeSeries&lt; T &gt;::create</references>
        <references refid="d9/d20/namespacepyfolio_1_1parallel_1ad752371eba260b351e1b16ee88cceb63" compoundref="d9/d36/parallel__algorithms_8h" startline="122" endline="125">pyfolio::parallel::get_global_thread_pool</references>
        <references refid="d7/df8/namespacepyfolio_1a10901a85b628face8a96ad7e052555f9ad8f78ca9a692a9411afbc7584b69d043" compoundref="d3/d11/error__handling_8h" startline="17">pyfolio::InvalidInput</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a14dc0c14e60203348e7a7a474f086a49" compoundref="d8/d51/time__series_8h" startline="137" endline="137">pyfolio::TimeSeries&lt; T &gt;::name</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a82aad601509b554d6968521b8461f50e" compoundref="d8/d51/time__series_8h" startline="102" endline="102">pyfolio::TimeSeries&lt; T &gt;::size</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1a0374bbc62bd808749ac476b3af4b0ead" compoundref="d8/d51/time__series_8h" startline="124" endline="124">pyfolio::TimeSeries&lt; T &gt;::timestamps</references>
        <references refid="d7/ddc/classpyfolio_1_1TimeSeries_1ab0b20c4945cdde977885888f384256c3" compoundref="d8/d51/time__series_8h" startline="125" endline="125">pyfolio::TimeSeries&lt; T &gt;::values</references>
        <referencedby refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a939ab533a457be119754167123f517af" compoundref="d9/d36/parallel__algorithms_8h" startline="457" endline="461">parallel_rolling_mean</referencedby>
        <referencedby refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a0a09b4946bd7396bb9e4052bd461be4d" compoundref="d9/d36/parallel__algorithms_8h" startline="467" endline="481">parallel_rolling_std</referencedby>
      </memberdef>
      <memberdef kind="function" id="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a939ab533a457be119754167123f517af" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::parallel::ParallelAlgorithms::parallel_rolling_mean</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;series, size_t window_size) const</argsstring>
        <name>parallel_rolling_mean</name>
        <qualifiedname>pyfolio::parallel::ParallelAlgorithms::parallel_rolling_mean</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>series</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window_size</declname>
        </param>
        <briefdescription>
<para>Parallel rolling mean. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" line="457" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" bodystart="457" bodyend="461"/>
        <references refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a108b4651f0cd7b9335eb935f57b67ad3" compoundref="d9/d36/parallel__algorithms_8h" startline="390" endline="451">parallel_rolling_operation</references>
      </memberdef>
      <memberdef kind="function" id="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a0a09b4946bd7396bb9e4052bd461be4d" prot="public" static="no" nodiscard="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="de/dfa/classpyfolio_1_1Result" kindref="compound">Result</ref>&lt; <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &gt;</type>
        <definition>Result&lt; TimeSeries&lt; T &gt; &gt; pyfolio::parallel::ParallelAlgorithms::parallel_rolling_std</definition>
        <argsstring>(const TimeSeries&lt; T &gt; &amp;series, size_t window_size) const</argsstring>
        <name>parallel_rolling_std</name>
        <qualifiedname>pyfolio::parallel::ParallelAlgorithms::parallel_rolling_std</qualifiedname>
        <param>
          <type>const <ref refid="d7/ddc/classpyfolio_1_1TimeSeries" kindref="compound">TimeSeries</ref>&lt; T &gt; &amp;</type>
          <declname>series</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>window_size</declname>
        </param>
        <briefdescription>
<para>Parallel rolling standard deviation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" line="467" column="13" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" bodystart="467" bodyend="481"/>
        <references refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a108b4651f0cd7b9335eb935f57b67ad3" compoundref="d9/d36/parallel__algorithms_8h" startline="390" endline="451">parallel_rolling_operation</references>
      </memberdef>
      <memberdef kind="function" id="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a1a4a8abf10f5a66bae10390c28d8bff2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="d3/de7/structpyfolio_1_1parallel_1_1ParallelConfig" kindref="compound">ParallelConfig</ref> &amp;</type>
        <definition>const ParallelConfig &amp; pyfolio::parallel::ParallelAlgorithms::get_config</definition>
        <argsstring>() const</argsstring>
        <name>get_config</name>
        <qualifiedname>pyfolio::parallel::ParallelAlgorithms::get_config</qualifiedname>
        <briefdescription>
<para>Get current configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" line="486" column="26" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" bodystart="486" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1abda22add4672c19171434f6c700cbfe9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void pyfolio::parallel::ParallelAlgorithms::update_config</definition>
        <argsstring>(const ParallelConfig &amp;new_config)</argsstring>
        <name>update_config</name>
        <qualifiedname>pyfolio::parallel::ParallelAlgorithms::update_config</qualifiedname>
        <param>
          <type>const <ref refid="d3/de7/structpyfolio_1_1parallel_1_1ParallelConfig" kindref="compound">ParallelConfig</ref> &amp;</type>
          <declname>new_config</declname>
        </param>
        <briefdescription>
<para>Update configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" line="491" column="10" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" bodystart="491" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1aab77141b644135a3d126b10d3cdfe7f6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="d7/dd3/structpyfolio_1_1parallel_1_1ParallelAlgorithms_1_1PerformanceStats" kindref="compound">PerformanceStats</ref></type>
        <definition>PerformanceStats pyfolio::parallel::ParallelAlgorithms::get_performance_stats</definition>
        <argsstring>() const</argsstring>
        <name>get_performance_stats</name>
        <qualifiedname>pyfolio::parallel::ParallelAlgorithms::get_performance_stats</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" line="503" column="22" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" bodystart="503" bodyend="510"/>
        <references refid="d9/d20/namespacepyfolio_1_1parallel_1ad752371eba260b351e1b16ee88cceb63" compoundref="d9/d36/parallel__algorithms_8h" startline="122" endline="125">pyfolio::parallel::get_global_thread_pool</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Parallel algorithms for financial data processing. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" line="130" column="1" bodyfile="/Users/yunjinqi/Documents/source_code/pyfolio_cpp/include/pyfolio/parallel/parallel_algorithms.h" bodystart="130" bodyend="511"/>
    <listofallmembers>
      <member refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a6bea99f7e0e5a82e2c734bfe06fdf999" prot="private" virt="non-virtual"><scope>pyfolio::parallel::ParallelAlgorithms</scope><name>calculate_chunk_size</name></member>
      <member refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1ab17bd65d91ed6e334eba8d8763530aac" prot="private" virt="non-virtual"><scope>pyfolio::parallel::ParallelAlgorithms</scope><name>config_</name></member>
      <member refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a1a4a8abf10f5a66bae10390c28d8bff2" prot="public" virt="non-virtual"><scope>pyfolio::parallel::ParallelAlgorithms</scope><name>get_config</name></member>
      <member refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1aab77141b644135a3d126b10d3cdfe7f6" prot="public" virt="non-virtual"><scope>pyfolio::parallel::ParallelAlgorithms</scope><name>get_performance_stats</name></member>
      <member refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a92b8d67fd5072f6ff834101212b172fa" prot="public" virt="non-virtual"><scope>pyfolio::parallel::ParallelAlgorithms</scope><name>parallel_correlation</name></member>
      <member refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a43b6ea31d4d8a3f7a81b6d240df54e06" prot="public" virt="non-virtual"><scope>pyfolio::parallel::ParallelAlgorithms</scope><name>parallel_map</name></member>
      <member refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1af891348d5d6cc6b7f50308ef2e29201c" prot="public" virt="non-virtual"><scope>pyfolio::parallel::ParallelAlgorithms</scope><name>parallel_mean</name></member>
      <member refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a3ba756e53e41ef4d081bd813d026afeb" prot="public" virt="non-virtual"><scope>pyfolio::parallel::ParallelAlgorithms</scope><name>parallel_reduce</name></member>
      <member refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a939ab533a457be119754167123f517af" prot="public" virt="non-virtual"><scope>pyfolio::parallel::ParallelAlgorithms</scope><name>parallel_rolling_mean</name></member>
      <member refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a108b4651f0cd7b9335eb935f57b67ad3" prot="public" virt="non-virtual"><scope>pyfolio::parallel::ParallelAlgorithms</scope><name>parallel_rolling_operation</name></member>
      <member refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a0a09b4946bd7396bb9e4052bd461be4d" prot="public" virt="non-virtual"><scope>pyfolio::parallel::ParallelAlgorithms</scope><name>parallel_rolling_std</name></member>
      <member refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1ad92d62a79d4044197fdf6532ea08eb8f" prot="public" virt="non-virtual"><scope>pyfolio::parallel::ParallelAlgorithms</scope><name>parallel_std_deviation</name></member>
      <member refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1ac2b310cf9bed4c215ec4ca1b3bb74b7f" prot="public" virt="non-virtual"><scope>pyfolio::parallel::ParallelAlgorithms</scope><name>ParallelAlgorithms</name></member>
      <member refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1a8eb40b8849fa459988d63af2fc9dea54" prot="private" virt="non-virtual"><scope>pyfolio::parallel::ParallelAlgorithms</scope><name>should_use_parallel</name></member>
      <member refid="d1/d34/classpyfolio_1_1parallel_1_1ParallelAlgorithms_1abda22add4672c19171434f6c700cbfe9" prot="public" virt="non-virtual"><scope>pyfolio::parallel::ParallelAlgorithms</scope><name>update_config</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
