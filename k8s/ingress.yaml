# PyFolio C++ Ingress Configuration
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pyfolio-ingress
  namespace: pyfolio
  labels:
    app.kubernetes.io/name: pyfolio
    app.kubernetes.io/component: ingress
  annotations:
    # Nginx ingress controller
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://pyfolio.example.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "DENY" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "no-referrer-when-downgrade" always;
      add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Connection and timeout settings
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    
    # Load balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    nginx.ingress.kubernetes.io/session-cookie-name: "pyfolio-session"
    nginx.ingress.kubernetes.io/session-cookie-expires: "3600"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "3600"
    
    # Cert-manager for automatic TLS
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/acme-challenge-type: "http01"

spec:
  tls:
    - hosts:
        - pyfolio.example.com
        - api.pyfolio.example.com
      secretName: pyfolio-tls-secret
  
  rules:
    # Main application
    - host: pyfolio.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: pyfolio-app
                port:
                  number: 8000
          
          # Health check endpoint
          - path: /health
            pathType: Exact
            backend:
              service:
                name: pyfolio-app
                port:
                  number: 8000
          
          # Static files
          - path: /static
            pathType: Prefix
            backend:
              service:
                name: pyfolio-app
                port:
                  number: 8000
    
    # API subdomain
    - host: api.pyfolio.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: pyfolio-app
                port:
                  number: 8000

---
# Alternative Ingress for different environments
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pyfolio-ingress-staging
  namespace: pyfolio
  labels:
    app.kubernetes.io/name: pyfolio
    app.kubernetes.io/component: ingress
    app.kubernetes.io/environment: staging
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
spec:
  tls:
    - hosts:
        - staging.pyfolio.example.com
      secretName: pyfolio-staging-tls-secret
  
  rules:
    - host: staging.pyfolio.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: pyfolio-app
                port:
                  number: 8000

---
# Traefik Ingress (alternative)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: pyfolio-traefik
  namespace: pyfolio
  labels:
    app.kubernetes.io/name: pyfolio
    app.kubernetes.io/component: ingress
  annotations:
    kubernetes.io/ingress.class: "traefik"
    traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.middlewares: "pyfolio-auth@kubernetescrd"
spec:
  tls:
    - hosts:
        - pyfolio.example.com
      secretName: pyfolio-tls-secret
  
  rules:
    - host: pyfolio.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: pyfolio-app
                port:
                  number: 8000